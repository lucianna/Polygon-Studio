/**
 * @module Lens Scripting
 * @version 5.1.0 (Internal)
 * For Snapchat Version: 13.4 (Internal)
*/
interface ComponentNameMap {
    "Animation": Animation;
    "AnimationMixer": AnimationMixer;
    "AnimationPlayer": AnimationPlayer;
    "AudioChainComponent": AudioEffectComponent;
    "AudioComponent": AudioComponent;
    "AudioEffectComponent": AudioEffectComponent;
    "AudioListenerComponent": AudioListenerComponent;
    "AudioPlayer": AudioComponent;
    "AudioTriggerComponent": AudioTriggerComponent;
    "BaseMeshVisual": BaseMeshVisual;
    "BillboardVisual": BillboardVisual;
    "BlendShapes": BlendShapes;
    "BlurNoiseEstimation": BlurNoiseEstimation;
    "Camera": Camera;
    "Canvas": Canvas;
    "ClearDepth": ClearDepth;
    "ClearScreen": ClearDepth;
    "ClientInterfaceComponent": ClientInterfaceComponent;
    "ClothVisual": ClothVisual;
    "ColliderComponent": ColliderComponent;
    "ColocatedTrackingComponent": ColocatedTrackingComponent;
    "Component.Animation": Animation;
    "Component.AnimationMixer": AnimationMixer;
    "Component.AnimationPlayer": AnimationPlayer;
    "Component.AudioChainComponent": AudioEffectComponent;
    "Component.AudioComponent": AudioComponent;
    "Component.AudioEffectComponent": AudioEffectComponent;
    "Component.AudioListenerComponent": AudioListenerComponent;
    "Component.AudioPlayer": AudioComponent;
    "Component.AudioTriggerComponent": AudioTriggerComponent;
    "Component.BaseMeshVisual": BaseMeshVisual;
    "Component.BillboardVisual": BillboardVisual;
    "Component.BlendShapes": BlendShapes;
    "Component.BlurNoiseEstimation": BlurNoiseEstimation;
    "Component.Camera": Camera;
    "Component.Canvas": Canvas;
    "Component.ClearDepth": ClearDepth;
    "Component.ClearScreen": ClearDepth;
    "Component.ClientInterfaceComponent": ClientInterfaceComponent;
    "Component.ClothVisual": ClothVisual;
    "Component.ColliderComponent": ColliderComponent;
    "Component.ColocatedTrackingComponent": ColocatedTrackingComponent;
    "Component.Data": DataComponent;
    "Component.DataComponent": DataComponent;
    "Component.DataStoreComponent": DataStoreComponent;
    "Component.DepthSetter": DepthSetter;
    "Component.DeviceLocationTrackingComponent": DeviceLocationTrackingComponent;
    "Component.DeviceTracking": DeviceTracking;
    "Component.ExternalRendererComponent": ExternalRendererComponent;
    "Component.Eye": Eye;
    "Component.EyeColorVisual": EyeColorVisual;
    "Component.FaceInsetVisual": FaceInsetVisual;
    "Component.FaceMaskVisual": FaceMaskVisual;
    "Component.FaceStretchVisual": FaceStretchVisual;
    "Component.FaceSubVisual": FaceMaskVisual;
    "Component.GaussianSplattingVisual": GaussianSplattingVisual;
    "Component.Gyroscope": Gyroscope;
    "Component.HairSimulationColliderComponent": ColliderComponent;
    "Component.HairVisual": HairVisual;
    "Component.Head": Head;
    "Component.Hints": HintsComponent;
    "Component.HintsComponent": HintsComponent;
    "Component.Image": Image;
    "Component.Inpainting": Inpainting;
    "Component.InteractionComponent": InteractionComponent;
    "Component.Label": Label;
    "Component.LightSource": LightSource;
    "Component.LiquifyVisual": LiquifyVisual;
    "Component.LocatedAtComponent": LocatedAtComponent;
    "Component.LookAtComponent": LookAtComponent;
    "Component.MLComponent": MLComponent;
    "Component.ManipulateComponent": ManipulateComponent;
    "Component.MarkerTrackingComponent": MarkerTrackingComponent;
    "Component.MaskingComponent": MaskingComponent;
    "Component.MaterialMeshVisual": MaterialMeshVisual;
    "Component.MeshVisual": RenderMeshVisual;
    "Component.ObjectTracker2D": ObjectTracking;
    "Component.ObjectTracking": ObjectTracking;
    "Component.ObjectTracking3D": ObjectTracking3D;
    "Component.ParticlesVisual": ParticlesVisual;
    "Component.PinToMeshComponent": PinToMeshComponent;
    "Component.PostEffectVisual": PostEffectVisual;
    "Component.PrefabInstantiator": PrefabInstantiator;
    "Component.RectangleSetter": RectangleSetter;
    "Component.RenderMeshVisual": RenderMeshVisual;
    "Component.Restriction": RestrictionComponent;
    "Component.RestrictionComponent": RestrictionComponent;
    "Component.RetouchVisual": RetouchVisual;
    "Component.Rotator": Rotator;
    "Component.ScreenRegionComponent": ScreenRegionComponent;
    "Component.ScreenTransform": ScreenTransform;
    "Component.Script": ScriptComponent;
    "Component.ScriptComponent": ScriptComponent;
    "Component.Skin": Skin;
    "Component.Snap3D": Snap3D;
    "Component.SplineComponent": SplineComponent;
    "Component.SpriteAligner": SpriteAligner;
    "Component.SpriteVisual": SpriteVisual;
    "Component.SpriteVisualV2": Image;
    "Component.StreamPlayerComponent": StreamPlayerComponent;
    "Component.Surface": Surface;
    "Component.Text": Text;
    "Component.Text3D": Text3D;
    "Component.TextVisual": Label;
    "Component.Touch": InteractionComponent;
    "Component.TouchComponent": InteractionComponent;
    "Component.TrackedPointComponent": TrackedPointComponent;
    "Component.VFXComponent": VFXComponent;
    "Component.VertexCache": VertexCache;
    "Component.VideoRecorderComponent": VideoRecorderComponent;
    "Component.Visual": Visual;
    "Component.WorldTracking": DeviceTracking;
    "Data": DataComponent;
    "DataComponent": DataComponent;
    "DataStoreComponent": DataStoreComponent;
    "DepthSetter": DepthSetter;
    "DeviceLocationTrackingComponent": DeviceLocationTrackingComponent;
    "DeviceTracking": DeviceTracking;
    "ExternalRendererComponent": ExternalRendererComponent;
    "Eye": Eye;
    "EyeColorVisual": EyeColorVisual;
    "FaceInsetVisual": FaceInsetVisual;
    "FaceMaskVisual": FaceMaskVisual;
    "FaceStretchVisual": FaceStretchVisual;
    "FaceSubVisual": FaceMaskVisual;
    "GaussianSplattingVisual": GaussianSplattingVisual;
    "Gyroscope": Gyroscope;
    "HairSimulationColliderComponent": ColliderComponent;
    "HairVisual": HairVisual;
    "Head": Head;
    "Hints": HintsComponent;
    "HintsComponent": HintsComponent;
    "Image": Image;
    "Inpainting": Inpainting;
    "InteractionComponent": InteractionComponent;
    "Label": Label;
    "LightSource": LightSource;
    "LiquifyVisual": LiquifyVisual;
    "LocatedAtComponent": LocatedAtComponent;
    "LookAtComponent": LookAtComponent;
    "MLComponent": MLComponent;
    "ManipulateComponent": ManipulateComponent;
    "MarkerTrackingComponent": MarkerTrackingComponent;
    "MaskingComponent": MaskingComponent;
    "MaterialMeshVisual": MaterialMeshVisual;
    "MeshVisual": RenderMeshVisual;
    "ObjectTracker2D": ObjectTracking;
    "ObjectTracking": ObjectTracking;
    "ObjectTracking3D": ObjectTracking3D;
    "ParticlesVisual": ParticlesVisual;
    "Physics.BodyComponent": BodyComponent;
    "Physics.ColliderComponent": ColliderComponent;
    "Physics.ConstraintComponent": ConstraintComponent;
    "Physics.WorldComponent": WorldComponent;
    "PinToMeshComponent": PinToMeshComponent;
    "PostEffectVisual": PostEffectVisual;
    "PrefabInstantiator": PrefabInstantiator;
    "RectangleSetter": RectangleSetter;
    "RenderMeshVisual": RenderMeshVisual;
    "Restriction": RestrictionComponent;
    "RestrictionComponent": RestrictionComponent;
    "RetouchVisual": RetouchVisual;
    "Rotator": Rotator;
    "ScreenRegionComponent": ScreenRegionComponent;
    "ScreenTransform": ScreenTransform;
    "Script": ScriptComponent;
    "ScriptComponent": ScriptComponent;
    "Skin": Skin;
    "Snap3D": Snap3D;
    "SplineComponent": SplineComponent;
    "SpriteAligner": SpriteAligner;
    "SpriteVisual": SpriteVisual;
    "SpriteVisualV2": Image;
    "StreamPlayerComponent": StreamPlayerComponent;
    "Surface": Surface;
    "Text": Text;
    "Text3D": Text3D;
    "TextVisual": Label;
    "Touch": InteractionComponent;
    "TouchComponent": InteractionComponent;
    "TrackedPointComponent": TrackedPointComponent;
    "VFXComponent": VFXComponent;
    "VertexCache": VertexCache;
    "VideoRecorderComponent": VideoRecorderComponent;
    "Visual": Visual;
    "WorldTracking": DeviceTracking;
}

interface EventNameMap {
    "BrowsLoweredEvent": BrowsLoweredEvent;
    "BrowsRaisedEvent": BrowsRaisedEvent;
    "BrowsReturnedToNormalEvent": BrowsReturnedToNormalEvent;
    "CameraBackEvent": CameraBackEvent;
    "CameraFrontEvent": CameraFrontEvent;
    "CandideUpdatedEvent": CandideUpdatedEvent;
    "ClientInterfaceActionTakenEvent": ClientInterfaceActionTakenEvent;
    "ClientInterfacePlayButtonTriggerEvent": ConnectedLensEnteredEvent;
    "ComponentDisabledEvent": ComponentDisabledEvent;
    "ComponentEnabledEvent": ComponentEnabledEvent;
    "ComponentEvent": ComponentEvent;
    "ConnectedLensEnteredEvent": ConnectedLensEnteredEvent;
    "CustomClientUIActionEvent": CustomClientUIActionEvent;
    "DelayedCallbackEvent": DelayedCallbackEvent;
    "DoubleTapEvent": DoubleTapEvent;
    "ExternalEvent": ExternalEvent;
    "FaceFoundEvent": FaceFoundEvent;
    "FaceLostEvent": FaceLostEvent;
    "FaceTrackingEvent": FaceTrackingEvent;
    "HoverEndEvent": HoverEndEvent;
    "HoverEvent": HoverEvent;
    "HoverStartEvent": HoverStartEvent;
    "KissFinishedEvent": KissFinishedEvent;
    "KissStartedEvent": KissStartedEvent;
    "LateUpdateEvent": LateUpdateEvent;
    "LongPressEndEvent": LongPressEndEvent;
    "LongPressStartEvent": LongPressStartEvent;
    "ManipulateEndEvent": ManipulateEndEvent;
    "ManipulateStartEvent": ManipulateStartEvent;
    "MouthClosedEvent": MouthClosedEvent;
    "MouthOpenedEvent": MouthOpenedEvent;
    "ObjectTrackingEndEvent": ObjectTrackingEndEvent;
    "ObjectTrackingEvent": ObjectTrackingEvent;
    "ObjectTrackingStartEvent": ObjectTrackingStartEvent;
    "OnAwakeEvent": OnAwakeEvent;
    "OnDestroyEvent": OnDestroyEvent;
    "OnDisableEvent": OnDisableEvent;
    "OnEnableEvent": OnEnableEvent;
    "OnLoopStartedEvent": OnTimeStartEvent;
    "OnPauseEvent": OnPauseEvent;
    "OnResumeEvent": OnResumeEvent;
    "OnStartEvent": OnStartEvent;
    "OnTimeStartEvent": OnTimeStartEvent;
    "PanGestureEndEvent": PanGestureEndEvent;
    "PanGestureMoveEvent": PanGestureMoveEvent;
    "PanGestureStartEvent": PanGestureStartEvent;
    "PinchGestureEndEvent": PinchGestureEndEvent;
    "PinchGestureMoveEvent": PinchGestureMoveEvent;
    "PinchGestureStartEvent": PinchGestureStartEvent;
    "SceneEvent.BrowsWereJustFrownedEvent": BrowsLoweredEvent;
    "SceneEvent.BrowsWereJustRaisedEvent": BrowsRaisedEvent;
    "SceneEvent.BrowsWereJustReturnedToNormalEvent": BrowsReturnedToNormalEvent;
    "SceneEvent.ClientInterfacePlayButtonTriggerEvent": ConnectedLensEnteredEvent;
    "SceneEvent.KissJustFinishedEvent": KissFinishedEvent;
    "SceneEvent.KissJustStartedEvent": KissStartedEvent;
    "SceneEvent.MouthWasJustClosedEvent": MouthClosedEvent;
    "SceneEvent.MouthWasJustOpenedEvent": MouthOpenedEvent;
    "SceneEvent.OnLoopStartedEvent": OnTimeStartEvent;
    "SceneEvent.SmileJustFinishedEvent": SmileFinishedEvent;
    "SceneEvent.SmileJustStartedEvent": SmileStartedEvent;
    "SceneEvent.SnappableSessionReadyEvent": SnappablesSessionReadyEvent;
    "SceneEvent.SurfaceTrackingResetEvent": SurfaceTrackingResetEvent;
    "SceneObjectEvent": SceneObjectEvent;
    "SinglePlaneTrackingUpdatedEvent": SinglePlaneTrackingUpdatedEvent;
    "SmileFinishedEvent": SmileFinishedEvent;
    "SmileStartedEvent": SmileStartedEvent;
    "SnapImageCaptureEvent": SnapImageCaptureEvent;
    "SnapRecordStartEvent": SnapRecordStartEvent;
    "SnapRecordStopEvent": SnapRecordStopEvent;
    "SnapcodeFoundEvent": SnapcodeFoundEvent;
    "SnappableSessionReadyEvent": SnappablesSessionReadyEvent;
    "SnappablesSessionInitFailedEvent": SnappablesSessionInitFailedEvent;
    "SnappablesSessionReadyEvent": SnappablesSessionReadyEvent;
    "SpatialMapLoadEvent": SpatialMapLoadEvent;
    "SpatialMapRelocalizationEvent": SpatialMapRelocalizationEvent;
    "SpatialMapSaveEvent": SpatialMapSaveEvent;
    "TapEvent": TapEvent;
    "TouchEndEvent": TouchEndEvent;
    "TouchMoveEvent": TouchMoveEvent;
    "TouchStartEvent": TouchStartEvent;
    "TriggerPrimaryEvent": TriggerPrimaryEvent;
    "TurnOffEvent": TurnOffEvent;
    "TurnOnEvent": TurnOnEvent;
    "UpdateEvent": UpdateEvent;
    "WorldTrackingMeshesAddedEvent": WorldTrackingMeshesAddedEvent;
    "WorldTrackingMeshesRemovedEvent": WorldTrackingMeshesRemovedEvent;
    "WorldTrackingMeshesUpdatedEvent": WorldTrackingMeshesUpdatedEvent;
    "WorldTrackingModeChangedEvent": WorldTrackingModeChangedEvent;
    "WorldTrackingPlanesAddedEvent": WorldTrackingPlanesAddedEvent;
    "WorldTrackingPlanesRemovedEvent": WorldTrackingPlanesRemovedEvent;
    "WorldTrackingPlanesUpdatedEvent": WorldTrackingPlanesUpdatedEvent;
    "WorldTrackingResetEvent": SurfaceTrackingResetEvent;
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/Globals-description.md Edit}
*/
/**
* Start a high resolution timer to measure real-world time elapsed. Call the function `endMeasure` with the same `name` argument to mark the end of the measurement period. Calling this function again with the same name before calling `endMeasure` will reset the start of the timer. Multiple measurements can overlap by using different timer names.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-beginMeasure.md Edit}

* @private
*/
declare function beginMeasure(name: string): void

/**
* Returns the determinant of `arg1`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-determinantMat3.md Edit}

* @deprecated

* @private
*/
declare function determinantMat3(arg1: mat3): number

/**
* Returns the determinant of `arg1`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-determinantMat4.md Edit}

* @deprecated

* @private
*/
declare function determinantMat4(arg1: mat4): number

/**
* Stop a named timer that was previously started with `beginMeasure` and returns the duration in milliseconds.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-endMeasure.md Edit}

* @private
*/
declare function endMeasure(name: string): number

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-endProfilingScope.md Edit}

* @private
*/
declare function endProfilingScope(scopeName: string): void

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-endProfilingSession.md Edit}

* @private
*/
declare function endProfilingSession(): void

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-eulerAngleX.md Edit}

* @deprecated

* @private
*/
declare function eulerAngleX(arg1: number): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-eulerAngleY.md Edit}

* @deprecated

* @private
*/
declare function eulerAngleY(arg1: number): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-eulerAngleYXZ.md Edit}

* @deprecated

* @private
*/
declare function eulerAngleYXZ(x: vec3): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-eulerAngleZ.md Edit}

* @deprecated

* @private
*/
declare function eulerAngleZ(arg1: number): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-extractEulerAngleXYZ.md Edit}

* @deprecated

* @private
*/
declare function extractEulerAngleXYZ(mat: mat4): vec3

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-failAsync.md Edit}
*/
declare function failAsync(error: any): void

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-fromEuler.md Edit}

* @deprecated

* @private
*/
declare function fromEuler(eulerAngles: vec3): quat

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-getAbsoluteStartTime.md Edit}

* @private
*/
declare function getAbsoluteStartTime(): number

/**
* Returns the version number of the engine running the lens.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-getCoreVersion.md Edit}

* @unreleased
*/
declare function getCoreVersion(): number

/**
* Returns the time difference in seconds between the current frame and previous frame.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-getDeltaTime.md Edit}
*/
declare function getDeltaTime(): number

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-getFileVersion.md Edit}

* @private
*/
declare function getFileVersion(): number

/**
* Get current time in Nanoseconds. Useful when optimizing a Lens to understand its performance.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-getRealTimeNanos.md Edit}
*/
declare function getRealTimeNanos(): number

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-getScenariumVersion.md Edit}

* @private
*/
declare function getScenariumVersion(): number

/**
* Returns the time in seconds since the lens was started.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-getTime.md Edit}
*/
declare function getTime(): number

/**
* Returns the inverse mat3 of `arg1`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-inverseMat3.md Edit}

* @deprecated

* @private
*/
declare function inverseMat3(arg1: mat3): mat3

/**
* Returns the inverse mat4 of `arg1`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-inverseMat4.md Edit}

* @deprecated

* @private
*/
declare function inverseMat4(arg1: mat4): mat4

/**
* Returns true if the passed in object is null or destroyed. Useful as a safe way to check if a SceneObject or Component has been destroyed.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-isNull.md Edit}
*/
declare function isNull(reference: any): boolean

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat2Add.md Edit}

* @deprecated

* @private
*/
declare function mat2Add(arg1: mat2, arg2: mat2): mat2

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat2Div.md Edit}

* @deprecated

* @private
*/
declare function mat2Div(arg1: mat2, arg2: mat2): mat2

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat2Mul.md Edit}

* @deprecated

* @private
*/
declare function mat2Mul(arg1: mat2, arg2: mat2): mat2

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat2Sub.md Edit}

* @deprecated

* @private
*/
declare function mat2Sub(arg1: mat2, arg2: mat2): mat2

/**
* Returns the result of adding `arg1` and `arg2`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat3Add.md Edit}

* @deprecated

* @private
*/
declare function mat3Add(arg1: mat3, arg2: mat3): mat3

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat3Div.md Edit}

* @deprecated

* @private
*/
declare function mat3Div(arg1: mat3, arg2: mat3): mat3

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat3Mul.md Edit}

* @deprecated

* @private
*/
declare function mat3Mul(arg1: mat3, arg2: mat3): mat3

/**
* Returns the result of subtracting `arg2` from `arg1`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat3Sub.md Edit}

* @deprecated

* @private
*/
declare function mat3Sub(arg1: mat3, arg2: mat3): mat3

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat4Add.md Edit}

* @deprecated

* @private
*/
declare function mat4Add(arg1: mat4, arg2: mat4): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat4Div.md Edit}

* @deprecated

* @private
*/
declare function mat4Div(arg1: mat4, arg2: mat4): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat4Mul.md Edit}

* @deprecated

* @private
*/
declare function mat4Mul(arg1: mat4, arg2: mat4): mat4

/**
* Returns the result of subtracting `arg2` from `arg1`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-mat4Sub.md Edit}

* @deprecated

* @private
*/
declare function mat4Sub(arg1: mat4, arg2: mat4): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-matrixCompMultMat3.md Edit}

* @deprecated

* @private
*/
declare function matrixCompMultMat3(arg1: mat3, arg2: mat3): mat3

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-matrixCompMultMat4.md Edit}

* @deprecated

* @private
*/
declare function matrixCompMultMat4(arg1: mat4, arg2: mat4): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-outerProductMat3.md Edit}

* @deprecated

* @private
*/
declare function outerProductMat3(arg1: vec3, arg2: vec3): mat3

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-outerProductMat4.md Edit}

* @deprecated

* @private
*/
declare function outerProductMat4(arg1: vec4, arg2: vec4): mat4

/**
* Prints out a message to the Logger window.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-print.md Edit}
*/
declare function print(message: any): void

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-quatFromAngleAxis.md Edit}

* @deprecated

* @private
*/
declare function quatFromAngleAxis(arg1: number, arg2: vec3): quat

/**
* Load a JavaScript module. Used for importing another JavaScript file found in the Resources panel to be used in the current script. Similar to `require` found in CommonJS specification. You can access Lens Studio specific modules (like `RemoteServiceModule`) using the `LensStudio` prefix, such as: `require("LensStudio:RemoteServiceModule)`. 

* You can use the modules name or path, meaning you can have two version of the same module in your project if needed. Both by name or by path will be relative to the script which is calling require, but by name will check the same folder as the script, then the parent folder, and so on. In addition, any require can be relative to your library folder. Take a look at the [Scripting guide](https://docs.snap.com/lens-studio/references/guides/lens-features/adding-interactivity/scripting-overview) to learn more.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-require.md Edit}
*/
declare function require(moduleName: (ScriptAsset|string)): any

/**
* Load an asset like a `Texture`, `Material`, or `MLAsset` directly from script. 

* You can use the modules name or path. Both by name or by path will be relative to the script which is calling require, but by name will check the same folder as the script, then the parent folder, and so on. In addition, any require can be relative to your library folder. Take a look at the [Scripting guide](https://docs.snap.com/lens-studio/references/guides/lens-features/adding-interactivity/scripting-overview) to learn more.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-requireAsset.md Edit}
*/
declare function requireAsset(name: string): Asset

/**
* Load a script by name or path in order to use that type to create or get a component at runtime. 

* You can use the modules name or path. Both by name or by path will be relative to the script which is calling require, but by name will check the same folder as the script, then the parent folder, and so on. In addition, any require can be relative to your library folder. Take a look at the [Scripting guide](https://docs.snap.com/lens-studio/references/guides/lens-features/adding-interactivity/scripting-overview) to learn more.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-requireType.md Edit}
*/
declare function requireType(name: string): string

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-setDirtyRectsEnabled.md Edit}

* @snapOsOnly

* @private
*/
declare function setDirtyRectsEnabled(enabled: boolean): void

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-slerp.md Edit}

* @deprecated

* @private
*/
declare function slerp(x: quat, y: quat, t: number): quat

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-startProfilingScope.md Edit}

* @private
*/
declare function startProfilingScope(scopeName: string): void

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-startProfilingSession.md Edit}

* @private
*/
declare function startProfilingSession(): void

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-toEuler.md Edit}

* @deprecated

* @private
*/
declare function toEuler(arg1: quat): vec3

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-transposeMat3.md Edit}

* @deprecated

* @private
*/
declare function transposeMat3(arg1: mat3): mat3

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-transposeMat4.md Edit}

* @deprecated

* @private
*/
declare function transposeMat4(arg1: mat4): mat4

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/methods/Globals-yawPitchRoll.md Edit}

* @deprecated

* @private
*/
declare function yawPitchRoll(yaw: vec3): mat4

declare namespace global {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.analyticsSystem.md Edit}
    
    * @private
    */
    let analyticsSystem: AnalyticsSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.assetSystem.md Edit}
    
    * @private
    */
    let assetSystem: AssetSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.audioSystem.md Edit}
    
    * @private
    */
    let audioSystem: AudioSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.bitmojiSystem.md Edit}
    
    * @deprecated
    
    * @private
    */
    let bitmojiSystem: BitmojiSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.clientInterfaceSystem.md Edit}
    
    * @private
    */
    let clientInterfaceSystem: ClientInterfaceSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.coreVersionChecks.md Edit}
    
    * @private
    */
    let coreVersionChecks: CoreVersionChecks
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.debugRenderSystem.md Edit}
    
    * @private
    */
    let debugRenderSystem: DebugRender
    
    /**
    * Returns the global DeviceInfoSystem, which provides information about the device running the Lens.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.deviceInfoSystem.md Edit}
    */
    let deviceInfoSystem: DeviceInfoSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.drawingSystem2D.md Edit}
    
    * @private
    */
    let drawingSystem2D: DrawingSystem2D
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.experimentSystem.md Edit}
    
    * @private
    */
    let experimentSystem: ExperimentSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.freezeFrameSystem.md Edit}
    
    * @private
    */
    let freezeFrameSystem: FreezeFrameSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.friendSystem.md Edit}
    
    * @exposesUserData
    
    * @private
    */
    let friendSystem: FriendSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.glyphLoader.md Edit}
    
    * @private
    */
    let glyphLoader: GlyphLoader
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.hapticFeedbackSystem.md Edit}
    */
    let hapticFeedbackSystem: HapticFeedbackSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.landmarkersSystem.md Edit}
    
    * @private
    */
    let landmarkersSystem: LandmarkersSystem
    
    /**
    * Returns the global `GeneralDataStore` for Launch Params, which provides any special data passed in when the Lens is launched.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.launchParams.md Edit}
    */
    let launchParams: GeneralDataStore
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.lensDataSystem.md Edit}
    
    * @private
    */
    let lensDataSystem: LensDataSystem
    
    /**
    * Returns the global [LocalizationSystem](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#LocalizationSystem), which helps convert times, dates, and other units to user friendly strings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.localizationSystem.md Edit}
    */
    let localizationSystem: LocalizationSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.locationSystem.md Edit}
    
    * @private
    */
    let locationSystem: LocationSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.multiplayerSystem.md Edit}
    
    * @private
    */
    let multiplayerSystem: MultiplayerSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.objectTracker2DSystem.md Edit}
    
    * @deprecated
    
    * @private
    */
    let objectTracker2DSystem: ObjectTrackingSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.objectTrackingSystem.md Edit}
    
    * @private
    */
    let objectTrackingSystem: ObjectTrackingSystem
    
    /**
    * Returns the global [PersistentStorageSystem](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#PersistentStorageSystem), which allows data to persist between Lens sessions.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.persistentStorageSystem.md Edit}
    */
    let persistentStorageSystem: PersistentStorageSystem
    
    /**
    * A read-only property that gets the pointer to the `RenderAPIJS` object.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.renderAPI.md Edit}
    
    * @private
    */
    let renderAPI: RenderAPIJS
    
    /**
    * Returns the global [ScriptScene](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#ScriptScene) object, which offers information and controls for the current scene.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.scene.md Edit}
    */
    let scene: ScriptScene
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.sceneConfig.md Edit}
    
    * @private
    */
    let sceneConfig: SceneConfig
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.sceneIntelligenceSystem.md Edit}
    
    * @private
    */
    let sceneIntelligenceSystem: SceneIntelligenceSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.serializationSystem.md Edit}
    
    * @private
    */
    let serializationSystem: SerializationSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.shaderResourceSystem.md Edit}
    */
    let shaderResourceSystem: ShaderResourceSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.snapRecordingSystem.md Edit}
    
    * @private
    */
    let snapRecordingSystem: SnapRecordingSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.snappablesSystem.md Edit}
    
    * @private
    */
    let snappablesSystem: SnappablesSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.textInputSystem.md Edit}
    */
    let textInputSystem: TextInputSystem
    
    /**
    * Returns the global [TouchDataProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Providers#TouchDataProvider), which controls how the Lens handles touch events.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.touchSystem.md Edit}
    */
    let touchSystem: TouchDataProvider
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.uriSystem.md Edit}
    
    * @private
    */
    let uriSystem: UriSystem
    
    /**
    * Returns the global [UserContextSystem](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#UserContextSystem), which provides information about the user such as display name, birthday, and even current weather.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.userContextSystem.md Edit}
    */
    let userContextSystem: UserContextSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.userInfoSystem.md Edit}
    
    * @private
    */
    let userInfoSystem: UserInfoSystem
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Globals/properties/Globals-global.weatherSystem.md Edit}
    
    * @private
    */
    let weatherSystem: WeatherSystem
    
}

/**
* The base class for data accessible through [DataComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DataComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AbstractData/AbstractData-description.md Edit}

* @private
*/
interface AbstractData extends ScriptObject {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AccessLevel/AccessLevel-description.md Edit}

* @private
*/
declare enum AccessLevel {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AccessLevel/properties/AccessLevel-Undefined.md Edit}
    
    * @private
    */
    Undefined,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AccessLevel/properties/AccessLevel-User.md Edit}
    
    * @private
    */
    User,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AccessLevel/properties/AccessLevel-Friend.md Edit}
    
    * @private
    */
    Friend,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AccessLevel/properties/AccessLevel-Global.md Edit}
    
    * @private
    */
    Global
}

/**
* Interface for sending Blizzard analytics events. Accessible from [DataComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#DataComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnalyticsSystem/AnalyticsSystem-description.md Edit}

* @private
*/
interface AnalyticsSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnalyticsSystem/methods/AnalyticsSystem-getEvents.md Edit}
    
    * @private
    */
    getEvents(): object
    
    /**
    * Set an analytics event with name `name` to value `value`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnalyticsSystem/methods/AnalyticsSystem-setEventValue.md Edit}
    
    * @private
    */
    setEventValue(name: string, value: string): void
    
}

/**
* An object containing the position of an object relative to a LocationAsset. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Anchor/Anchor-description.md Edit}
*/
interface Anchor extends ScriptObject {
    /**
    * The LocationAsset which this anchor is relative to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Anchor/properties/Anchor-location.md Edit}
    
    * @readonly
    */
    location: LocationAsset
    
    /**
    * The position of this anchor relative to the LocationAsset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Anchor/properties/Anchor-position.md Edit}
    
    * @readonly
    */
    position: vec3
    
}

/**
* Controls an animated texture resource. Can be accessed from [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#texture--control) on an animated texture.
* See also: [2D Animation Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/2d/2d-animation).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/AnimatedTextureFileProvider-description.md Edit}
*/
interface AnimatedTextureFileProvider extends TextureProvider {
    /**
    * Duplicates the AnimatedTextureFileProvider and returns the new copy. Can be used for playing the same animation at different offsets.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-clone.md Edit}
    */
    clone(): AnimatedTextureFileProvider
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-getAllAnimationGroups.md Edit}
    
    * @private
    */
    getAllAnimationGroups(): string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-getAnimationGroupFilenames.md Edit}
    
    * @private
    */
    getAnimationGroupFilenames(groupName: string): string[]
    
    /**
    * Returns the index of the frame that is currently playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-getCurrentPlayingFrame.md Edit}
    */
    getCurrentPlayingFrame(): number
    
    /**
    * Returns how long the animation is in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-getDuration.md Edit}
    */
    getDuration(): number
    
    /**
    * Returns the number of frames in the animation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-getFramesCount.md Edit}
    */
    getFramesCount(): number
    
    /**
    * Returns whether the animation is finished playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-isFinished.md Edit}
    */
    isFinished(): boolean
    
    /**
    * Returns whether the animation is currently paused.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-isPaused.md Edit}
    */
    isPaused(): boolean
    
    /**
    * Returns whether the animation is currently playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-isPlaying.md Edit}
    */
    isPlaying(): boolean
    
    /**
    * Pauses the animation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-pause.md Edit}
    */
    pause(): void
    
    /**
    * Pauses the animation at frame `frameIndex`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-pauseAtFrame.md Edit}
    */
    pauseAtFrame(frameIndex: number): void
    
    /**
    * Plays the animation `loops` times, starting with an offset of `offset` seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-play.md Edit}
    */
    play(loops: number, offset: number): void
    
    /**
    * Start playing the animation from frame `frameIndex`, `loops` times.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-playFromFrame.md Edit}
    */
    playFromFrame(frameIndex: number, loops: number): void
    
    /**
    * Resumes a paused animation from the frame that was last played.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-resume.md Edit}
    */
    resume(): void
    
    /**
    * Sets the callback function to be called whenever the animation stops playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-setOnFinish.md Edit}
    */
    setOnFinish(eventCallback: (animatedTexture: AnimatedTextureFileProvider) => void): void
    
    /**
    * Stops the animation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-stop.md Edit}
    */
    stop(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/methods/AnimatedTextureFileProvider-useFrameByName.md Edit}
    
    * @private
    */
    useFrameByName(name: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/properties/AnimatedTextureFileProvider-animationGroup.md Edit}
    
    * @private
    */
    animationGroup: string
    
    /**
    * Length of the animation in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/properties/AnimatedTextureFileProvider-duration.md Edit}
    */
    duration: number
    
    /**
    * Returns whether the animation was set to automatically play and loop.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/properties/AnimatedTextureFileProvider-isAutoplay.md Edit}
    */
    isAutoplay: boolean
    
    /**
    * If enabled, the animation will alternate between normal and reverse each time it loops.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/properties/AnimatedTextureFileProvider-isPingPong.md Edit}
    */
    isPingPong: boolean
    
    /**
    * Whether the animation plays in reverse.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/properties/AnimatedTextureFileProvider-isReversed.md Edit}
    */
    isReversed: boolean
    
    /**
    * The animation track used to control the frame animation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimatedTextureFileProvider/properties/AnimatedTextureFileProvider-track.md Edit}
    
    * @deprecated
    */
    track: IntStepAnimationTrackKeyFramed
    
}

/**
* Used by [AnimationMixer](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AnimationMixer) to animate a single object in the hierarchy.
* These are automatically added to SceneObjects when importing animated FBX files.
* See also: [Playing 3D Animation Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/additional-examples/playing-3d-animation), [AnimationMixer](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AnimationMixer), [AnimationLayer](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#AnimationLayer).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Animation/Animation-description.md Edit}

* @deprecated
*/
interface Animation extends Component {
    /**
    * Returns the AnimationLayer under the name `layerName`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Animation/methods/Animation-getAnimationLayerByName.md Edit}
    */
    getAnimationLayerByName(layerName: string): AnimationLayer
    
    /**
    * Removes the AnimationLayer under the name `layerName`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Animation/methods/Animation-removeAnimationLayerByName.md Edit}
    */
    removeAnimationLayerByName(layerName: string): void
    
    /**
    * Adds an AnimationLayer under the name `layerName`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Animation/methods/Animation-setAnimationLayerByName.md Edit}
    */
    setAnimationLayerByName(layerName: string, animationLayer: AnimationLayer): void
    
}

/**
* Asset that contains multiple animation layers. Animation assets themselves do not handle playing or orchestrating animations. This is left to the animation player component to handle.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/AnimationAsset-description.md Edit}
*/
interface AnimationAsset extends Asset {
    /**
    * Add the AnimationPropertyLayer that will be used as default.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/methods/AnimationAsset-addDefaultLayer.md Edit}
    
    * @private
    */
    addDefaultLayer(layerName: string): void
    
    /**
    * Adds AnimationPropertyLayer to Animation asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/methods/AnimationAsset-addLayer.md Edit}
    */
    addLayer(layerName: string, layer: AnimationPropertyLayer): void
    
    /**
    * Delete all the AnimationPropertyLayer in this AnimationAsset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/methods/AnimationAsset-clearLayers.md Edit}
    */
    clearLayers(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/methods/AnimationAsset-createEvent.md Edit}
    */
    createEvent(eventName: string, time: number): AnimationPropertyEventRegistration
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/methods/AnimationAsset-deleteEvent.md Edit}
    */
    deleteEvent(layerName: AnimationPropertyEventRegistration): void
    
    /**
    * Delete the AnimationPropertyLayer named `layerName`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/methods/AnimationAsset-deleteLayer.md Edit}
    */
    deleteLayer(layerName: string): void
    
    /**
    * Retrieves an animation associated with a particular object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/methods/AnimationAsset-getLayer.md Edit}
    */
    getLayer(layerName: string): AnimationPropertyLayer
    
    /**
    * Animation duration in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/properties/AnimationAsset-duration.md Edit}
    
    * @readonly
    */
    duration: number
    
    /**
    * Denotes how many key frames this animation was sampled at.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/properties/AnimationAsset-fps.md Edit}
    
    * @readonly
    */
    fps: number
    
    /**
    * The AnimationPropertyLayer in this Animation Asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationAsset/properties/AnimationAsset-layers.md Edit}
    
    * @readonly
    
    * @private
    */
    layers: any
    
}

/**
* Animation Clip is what an Animation Player uses to manage playback for a specific animation. It defines that animation by referencing an Animation Asset and providing start and end points, playback speed and direction, and blending information. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/AnimationClip-description.md Edit}
*/
interface AnimationClip extends ScriptObject {
    /**
    * Clones the existing clip with a new name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/methods/AnimationClip-clone.md Edit}
    */
    clone(clipName: string): AnimationClip
    
    /**
    * Points to the animation asset to be played by the Animation Player.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-animation.md Edit}
    */
    animation: AnimationAsset
    
    /**
    * Returns begin time of clip.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-begin.md Edit}
    */
    begin: number
    
    /**
    * The blend mode for this particular clip.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-blendMode.md Edit}
    */
    blendMode: AnimationLayerBlendMode
    
    /**
    * Whether the animation clip is disabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-disabled.md Edit}
    */
    disabled: boolean
    
    /**
    * Returns the duration of the clip which is calculated based on the begin and end times.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-duration.md Edit}
    
    * @readonly
    */
    duration: number
    
    /**
    * Returns end time of clip.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-end.md Edit}
    */
    end: number
    
    /**
    * Name of the clip.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-name.md Edit}
    
    * @readonly
    */
    name: string
    
    /**
    * Choose whether to play animation clip once, loop the clip, or ping pong it.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-playbackMode.md Edit}
    */
    playbackMode: PlaybackMode
    
    /**
    * Scalar value to represent playback speed percentage. 1.0 is 100% playback speed.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-playbackSpeed.md Edit}
    */
    playbackSpeed: number
    
    /**
    * Specifies if the clip should be played reversed.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-reversed.md Edit}
    */
    reversed: boolean
    
    /**
    * How scale is accumulated. Usually does not need to be changed after import.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-scaleMode.md Edit}
    */
    scaleMode: AnimationLayerScaleMode
    
    /**
    * Strength of animation clip contribution. Lies between [0.0, 1.0] inclusive. For default blending a 1.0 weight indicates this clip will override all earlier clips, a less than 1.0 weight indicates it will blend onto the calculated pose using a weighted average.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/properties/AnimationClip-weight.md Edit}
    */
    weight: number
    
}
declare namespace AnimationClip {
    /**
    * Creates a clip.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/methods/AnimationClip-create.md Edit}
    */
    export function create(clipName: string): AnimationClip
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip/methods/AnimationClip-createFromAnimation.md Edit}
    */
    export function createFromAnimation(clipName: string, animation: AnimationAsset): AnimationClip
    

}

declare namespace AnimationClip {
    /**
    * Used by [AnimationMixerLayer](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AnimationMixerLayer) for setting animation looping behavior.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip.PostInfinity/AnimationClip.PostInfinity-description.md Edit}
    
    * @deprecated
    */
    enum PostInfinity {
        /**
        * The animation will restart from the beginning each time it loops.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip.PostInfinity/properties/AnimationClip.PostInfinity-Cycle.md Edit}
        */
        Cycle,
        /**
        * The animation will switch between normal and reverse playback each time it loops.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip.PostInfinity/properties/AnimationClip.PostInfinity-Oscillate.md Edit}
        */
        Oscillate
    }

}

declare namespace AnimationClip {
    /**
    * Used by [AnimationMixerLayer](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AnimationMixerLayer) for setting animation clip range type.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip.RangeType/AnimationClip.RangeType-description.md Edit}
    
    * @deprecated
    */
    enum RangeType {
        /**
        * Range is specified by start and end time, in seconds
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip.RangeType/properties/AnimationClip.RangeType-Time.md Edit}
        */
        Time,
        /**
        * Range is specified by start and end frame numbers
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationClip.RangeType/properties/AnimationClip.RangeType-Frames.md Edit}
        */
        Frames
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/AnimationCurve-description.md Edit}
*/
interface AnimationCurve extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/methods/AnimationCurve-addKeyframe.md Edit}
    */
    addKeyframe(frame: AnimationKeyFrame): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/methods/AnimationCurve-evaluate.md Edit}
    */
    evaluate(time: number): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/methods/AnimationCurve-getKeyFrame.md Edit}
    */
    getKeyFrame(index: number): AnimationKeyFrame
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/methods/AnimationCurve-removeKeyFrame.md Edit}
    */
    removeKeyFrame(t: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/properties/AnimationCurve-keyFrameCount.md Edit}
    
    * @readonly
    */
    keyFrameCount: number
    
}
declare namespace AnimationCurve {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/methods/AnimationCurve-create.md Edit}
    */
    export function create(): AnimationCurve
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/methods/AnimationCurve-createEasingCurve.md Edit}
    */
    export function createEasingCurve(startValue: number, endValue: number, x1: number, y1: number, x2: number, y2: number): AnimationCurve
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurve/methods/AnimationCurve-createKeyFrame.md Edit}
    */
    export function createKeyFrame(): AnimationKeyFrame
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/AnimationCurveTrack-description.md Edit}
*/
interface AnimationCurveTrack extends AnimationTrack {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/methods/AnimationCurveTrack-evaluateNumber.md Edit}
    */
    evaluateNumber(time: number): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/methods/AnimationCurveTrack-evaluateRotation.md Edit}
    */
    evaluateRotation(time: number): quat
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/methods/AnimationCurveTrack-evaluateVec2.md Edit}
    */
    evaluateVec2(time: number): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/methods/AnimationCurveTrack-evaluateVec3.md Edit}
    */
    evaluateVec3(time: number): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/methods/AnimationCurveTrack-evaluateVec4.md Edit}
    */
    evaluateVec4(time: number): vec4
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/methods/AnimationCurveTrack-getProperty.md Edit}
    */
    getProperty(key: string): AnimationCurve
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/methods/AnimationCurveTrack-getPropertyKeys.md Edit}
    */
    getPropertyKeys(): string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationCurveTrack/methods/AnimationCurveTrack-setProperty.md Edit}
    */
    setProperty(key: string, curve: AnimationCurve): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationEventRegistration/AnimationEventRegistration-description.md Edit}

* @private
*/
interface AnimationEventRegistration extends ScriptObject {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationEventTrack/AnimationEventTrack-description.md Edit}

* @private
*/
interface AnimationEventTrack extends AnimationTrack {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationEventTrack/methods/AnimationEventTrack-addEvent.md Edit}
    
    * @private
    */
    addEvent(eventName: string, timestamp: number): AnimationEventRegistration
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationEventTrack/methods/AnimationEventTrack-removeEvent.md Edit}
    
    * @private
    */
    removeEvent(registration: AnimationEventRegistration): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationKeyFrame/AnimationKeyFrame-description.md Edit}
*/
interface AnimationKeyFrame extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationKeyFrame/properties/AnimationKeyFrame-inWeightPoint.md Edit}
    */
    inWeightPoint: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationKeyFrame/properties/AnimationKeyFrame-leftTangentType.md Edit}
    */
    leftTangentType: TangentType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationKeyFrame/properties/AnimationKeyFrame-outWeightPoint.md Edit}
    */
    outWeightPoint: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationKeyFrame/properties/AnimationKeyFrame-rightTangentType.md Edit}
    */
    rightTangentType: TangentType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationKeyFrame/properties/AnimationKeyFrame-time.md Edit}
    */
    time: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationKeyFrame/properties/AnimationKeyFrame-value.md Edit}
    */
    value: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationKeyFrame/properties/AnimationKeyFrame-weightedMode.md Edit}
    */
    weightedMode: WeightedMode
    
}

/**
* Configures an animation layer for a single [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject).
* Gives access to position, rotation, scale and blend shape animation tracks.
* See also: [Playing 3D Animation Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/additional-examples/playing-3d-animation), [AnimationMixer](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AnimationMixer), [Animation](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Animation).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/AnimationLayer-description.md Edit}

* @deprecated
*/
interface AnimationLayer extends AnimationTrack {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/methods/AnimationLayer-getAnimationEventTrack.md Edit}
    
    * @private
    */
    getAnimationEventTrack(): AnimationEventTrack
    
    /**
    * Returns a [FloatAnimationTrack](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#FloatAnimationTrack) from this AnimationLayer's blend shapes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/methods/AnimationLayer-getBlendShapeTrack.md Edit}
    */
    getBlendShapeTrack(shapeName: string): FloatAnimationTrack
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/methods/AnimationLayer-setAnimationEventTrack.md Edit}
    
    * @private
    */
    setAnimationEventTrack(eventTrack: AnimationEventTrack): void
    
    /**
    * Sets or adds a [FloatAnimationTrack](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#FloatAnimationTrack) to this AnimationLayer's blend shapes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/methods/AnimationLayer-setBlendShapeTrack.md Edit}
    */
    setBlendShapeTrack(shapeName: string, track: FloatAnimationTrack): void
    
    /**
    * The [Vec3AnimationTrack](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Vec3AnimationTrack) controlling position in this AnimationLayer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/properties/AnimationLayer-position.md Edit}
    */
    position: Vec3AnimationTrack
    
    /**
    * The [QuaternionAnimationTrack](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#QuaternionAnimationTrack) controlling rotation in this AnimationLayer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/properties/AnimationLayer-rotation.md Edit}
    */
    rotation: QuaternionAnimationTrack
    
    /**
    * The [Vec3AnimationTrack](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Vec3AnimationTrack) controlling scale in this AnimationLayer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/properties/AnimationLayer-scale.md Edit}
    */
    scale: Vec3AnimationTrack
    
    /**
    * The [IntAnimationTrack](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#IntAnimationTrack) controlling visibility in this AnimationLayer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayer/properties/AnimationLayer-visibility.md Edit}
    */
    visibility: IntAnimationTrack
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayerBlendMode/AnimationLayerBlendMode-description.md Edit}
*/
declare enum AnimationLayerBlendMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayerBlendMode/properties/AnimationLayerBlendMode-Default.md Edit}
    */
    Default,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayerBlendMode/properties/AnimationLayerBlendMode-Additive.md Edit}
    */
    Additive
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayerOnEventArgs/AnimationLayerOnEventArgs-description.md Edit}

* @private
*/
interface AnimationLayerOnEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayerOnEventArgs/properties/AnimationLayerOnEventArgs-eventName.md Edit}
    
    * @readonly
    
    * @private
    */
    eventName: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayerScaleMode/AnimationLayerScaleMode-description.md Edit}
*/
declare enum AnimationLayerScaleMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayerScaleMode/properties/AnimationLayerScaleMode-Multiply.md Edit}
    */
    Multiply,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationLayerScaleMode/properties/AnimationLayerScaleMode-Additive.md Edit}
    */
    Additive
}

/**
* Controls playback of animations on the attached [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) and its child objects.
* Please refer to the [Playing 3D Animation Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/additional-examples/playing-3d-animation) for setting up and playing animations.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/AnimationMixer-description.md Edit}

* @deprecated
*/
interface AnimationMixer extends Component {
    /**
    * Makes a copy of the layer `name` and stores it as `newName`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-cloneLayer.md Edit}
    */
    cloneLayer(name: string, newName: string): AnimationMixerLayer
    
    /**
    * Adds a new AnimationMixerLayer to this AnimationMixer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-createClip.md Edit}
    */
    createClip(name: string): AnimationMixerLayer
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-forceUpdate.md Edit}
    
    * @private
    */
    forceUpdate(): void
    
    /**
    * Returns a list of names of AnimationLayers in this AnimationMixer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-getAnimationLayerNames.md Edit}
    */
    getAnimationLayerNames(): string[]
    
    /**
    * Returns the AnimationMixerLayer with the name `name`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-getLayer.md Edit}
    */
    getLayer(name: string): AnimationMixerLayer
    
    /**
    * Returns the current time (in seconds) of the layer named `name`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-getLayerTime.md Edit}
    */
    getLayerTime(name: string): number
    
    /**
    * Returns a list of all AnimationMixerLayers controlled by the AnimationMixer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-getLayers.md Edit}
    */
    getLayers(): AnimationMixerLayer[]
    
    /**
    * Pauses animation layers named `name`, or all layers if `name` is empty.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-pause.md Edit}
    */
    pause(name: string): void
    
    /**
    * Rebuild the animation hierarchy by finding all [Animation](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Animation) components in the SceneObject and its children.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-resetAnimations.md Edit}
    */
    resetAnimations(): void
    
    /**
    * Resumes any paused animation layer with name `name`, or all layers if `name` is empty.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-resume.md Edit}
    */
    resume(name: string): void
    
    /**
    * Sets the weight of any layers with name `name`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-setWeight.md Edit}
    */
    setWeight(name: string, weight: number): void
    
    /**
    * Starts playing animation layers named `name`, or all layers if `name` is empty. The animation will start with an offset of `offset` seconds. The animation will play `cycles` times, or loop forever if `cycles` is -1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-start.md Edit}
    */
    start(name: string, offset: number, cycles: number): void
    
    /**
    * Starts playing animation layers named `name`, or all layers if `name` is empty. The animation will start with an offset of `offset` seconds. The animation will play `cycles` times, or loop forever if `cycles` is -1. `eventCallback` will be called after any animation layer finishes playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-startWithCallback.md Edit}
    */
    startWithCallback(name: string, offset: number, cycles: number, eventCallback: (name: string, animationMixer: AnimationMixer) => void): void
    
    /**
    * Stops any animation layer with name `name`, or all layers if `name` is empty.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/methods/AnimationMixer-stop.md Edit}
    */
    stop(name: string): void
    
    /**
    * Whether this AnimationMixer is set to automatically play animations on start.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/properties/AnimationMixer-autoplay.md Edit}
    */
    autoplay: boolean
    
    /**
    * A multiplying value for the speed of all animations being controlled by the AnimationMixer.
    * For example, a value of 2.0 will double animation speed, while a value of 0.5 will cut the speed in half.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixer/properties/AnimationMixer-speedRatio.md Edit}
    */
    speedRatio: number
    
}

/**
* Controls animation playback for a single animation layer.
* See also: [AnimationMixer](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AnimationMixer).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/AnimationMixerLayer-description.md Edit}

* @deprecated
*/
interface AnimationMixerLayer extends ScriptObject {
    /**
    * Returns a copy of this AnimationMixerLayer, with the name changed to `newName`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-clone.md Edit}
    */
    clone(newName: string): AnimationMixerLayer
    
    /**
    * Returns the length of the animation in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-getDuration.md Edit}
    */
    getDuration(): number
    
    /**
    * Returns the current playback position of the animation in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-getTime.md Edit}
    */
    getTime(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-isCycleFinished.md Edit}
    
    * @private
    */
    isCycleFinished(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-isFinished.md Edit}
    
    * @private
    */
    isFinished(): boolean
    
    /**
    * Returns whether the animation is currently playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-isPlaying.md Edit}
    */
    isPlaying(): boolean
    
    /**
    * Pauses the animation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-pause.md Edit}
    */
    pause(): void
    
    /**
    * Resumes the animation if it has been paused.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-resume.md Edit}
    */
    resume(): void
    
    /**
    * Starts playing the animation with an offset of `offsetArg` seconds.
    * The animation will play `cycles` times, or loop forever if `cycles` is -1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-start.md Edit}
    */
    start(offset: number, cycles: number): void
    
    /**
    * Starts the animation with an offset of `offsetArg` seconds.
    * The animation will play `cycles` times, or loop forever if `cycles` is -1.
    * `eventCallback` will be called after the animation finishes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-startWithCallback.md Edit}
    */
    startWithCallback(offset: number, cycles: number, eventCallback: (name: string, animationMixer: AnimationMixer) => void): void
    
    /**
    * Stops the animation from playing and jumps to the animation's end.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/methods/AnimationMixerLayer-stop.md Edit}
    */
    stop(): void
    
    /**
    * The name of the animation layer being used for this animation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-animationLayerName.md Edit}
    */
    animationLayerName: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-blendMode.md Edit}
    */
    blendMode: AnimationLayerBlendMode
    
    /**
    * The number of times this animation will play. If -1, the animation will loop forever.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-cycles.md Edit}
    */
    cycles: number
    
    /**
    * If true, the animation will stop having an effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-disabled.md Edit}
    */
    disabled: boolean
    
    /**
    * The framerate (frames per second) of the animation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-fps.md Edit}
    */
    fps: number
    
    /**
    * The starting point for this animation clip.
    * If `rangeType` is set to `Time`, this is the point to start at in seconds.
    * If `rangeType` is set to `Frames`, this is the frame number to start at.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-from.md Edit}
    */
    from: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-layer.md Edit}
    
    * @deprecated
    
    * @private
    */
    layer: string
    
    /**
    * The name of the AnimationMixerLayer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-name.md Edit}
    */
    name: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-onEvent.md Edit}
    
    * @readonly
    
    * @private
    */
    onEvent: event1<AnimationLayerOnEventArgs, void>
    
    /**
    * Defines the animation's looping behavior.
    * If set to `AnimationClip.PostInfinity.Cycle`, the animation will restart from the beginning each time it loops.
    * If set to `AnimationClip.PostInfinity.Oscillate`, the animation will switch between normal and reverse playback each time it loops.
    * This is set to `Cycle` by default.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-postInfinity.md Edit}
    */
    postInfinity: AnimationClip.PostInfinity
    
    /**
    * The range type used for defining the animation clip.
    * If set to `AnimationClip.RangeType.Time`, `to` and `from` represent times in seconds.
    * If set to `AnimationClip.RangeType.Frames`, `to` and `from` represent frame numbers.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-rangeType.md Edit}
    */
    rangeType: AnimationClip.RangeType
    
    /**
    * If true, the animation will play play in reverse.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-reversed.md Edit}
    */
    reversed: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-scaleMode.md Edit}
    */
    scaleMode: AnimationLayerScaleMode
    
    /**
    * A multiplying value for the speed of this animation.
    * For example, a value of 2.0 will double animation speed, while a value of 0.5 will cut the speed in half.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-speedRatio.md Edit}
    */
    speedRatio: number
    
    /**
    * The ending point for this animation clip.
    * If `rangeType` is set to `Time`, this is the point to end at in seconds.
    * If `rangeType` is set to `Frames`, this is the frame number to end at.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-to.md Edit}
    */
    to: number
    
    /**
    * The weight of this animation layer. Range is from [0-1], 0 being no animation strength and 1 being full animation strength.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationMixerLayer/properties/AnimationMixerLayer-weight.md Edit}
    */
    weight: number
    
}

/**
* Component that handles playing animation clips as well as binding callbacks to user defined events.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/AnimationPlayer-description.md Edit}
*/
interface AnimationPlayer extends Component {
    /**
    * Adds a clip to the player. If one exists, replace existing clip.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-addClip.md Edit}
    */
    addClip(clip: AnimationClip): void
    
    /**
    * Updates the animation player forcing sampling, resulting in the setting of transforms and firing of animation events.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-forceUpdate.md Edit}
    */
    forceUpdate(deltaTime: number): void
    
    /**
    * Get currently playing clips.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-getActiveClips.md Edit}
    */
    getActiveClips(): string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-getAnimationClips.md Edit}
    
    * @private
    */
    getAnimationClips(): AnimationClip[]
    
    /**
    * Tries to get a clip from the player, returns null if it does not exist.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-getClip.md Edit}
    */
    getClip(name: string): AnimationClip
    
    /**
    * Returns the current time for a clip.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-getClipCurrentTime.md Edit}
    */
    getClipCurrentTime(name: string): number
    
    /**
    * Returns if a clip is enabled for playback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-getClipEnabled.md Edit}
    */
    getClipEnabled(name: string): boolean
    
    /**
    * Returns if a clip is playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-getClipIsPlaying.md Edit}
    */
    getClipIsPlaying(name: string): boolean
    
    /**
    * Get currently inactive clips.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-getInactiveClips.md Edit}
    */
    getInactiveClips(): string[]
    
    /**
    * Pauses all clips.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-pauseAll.md Edit}
    */
    pauseAll(): void
    
    /**
    * Pause the clip with name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-pauseClip.md Edit}
    */
    pauseClip(name: string): void
    
    /**
    * Plays all clips.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-playAll.md Edit}
    */
    playAll(): void
    
    /**
    * Plays clip with the given name and starting from the given time.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-playClipAt.md Edit}
    */
    playClipAt(name: string, time: number): void
    
    /**
    * Removes a clip from the player.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-removeClip.md Edit}
    */
    removeClip(name: string): void
    
    /**
    * Resumes all clips.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-resumeAll.md Edit}
    */
    resumeAll(): void
    
    /**
    * Resumes clip with name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-resumeClip.md Edit}
    */
    resumeClip(name: string): void
    
    /**
    * Sets the clip to be enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-setClipEnabled.md Edit}
    */
    setClipEnabled(name: string, enabled: boolean): void
    
    /**
    * Stops all clips and resets time to t = 0.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-stopAll.md Edit}
    */
    stopAll(): void
    
    /**
    * Stops the clip and resets time to t = 0.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/methods/AnimationPlayer-stopClip.md Edit}
    */
    stopClip(name: string): void
    
    /**
    * Specifies if clips should play on initialization.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/properties/AnimationPlayer-autoplay.md Edit}
    
    * @private
    */
    autoplay: boolean
    
    /**
    * Array of animation clips
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/properties/AnimationPlayer-clips.md Edit}
    
    * @readonly
    */
    clips: AnimationClip[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayer/properties/AnimationPlayer-onEvent.md Edit}
    
    * @readonly
    */
    onEvent: event1<AnimationPlayerOnEventArgs, void>
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayerOnEventArgs/AnimationPlayerOnEventArgs-description.md Edit}
*/
interface AnimationPlayerOnEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPlayerOnEventArgs/properties/AnimationPlayerOnEventArgs-eventName.md Edit}
    
    * @readonly
    */
    eventName: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyEventRegistration/AnimationPropertyEventRegistration-description.md Edit}
*/
interface AnimationPropertyEventRegistration extends ScriptObject {
}

/**
* A layer containing different properties. Examples include position, rotation, scale or any other arbitrary properties a user would like to add and sample from.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyLayer/AnimationPropertyLayer-description.md Edit}
*/
interface AnimationPropertyLayer extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyLayer/methods/AnimationPropertyLayer-getBlendShapeTrack.md Edit}
    
    * @private
    */
    getBlendShapeTrack(shapeName: string): FloatAnimationPropertyTrack
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyLayer/methods/AnimationPropertyLayer-setBlendShapeTrack.md Edit}
    
    * @private
    */
    setBlendShapeTrack(shapeName: string, track: FloatAnimationPropertyTrack): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyLayer/properties/AnimationPropertyLayer-position.md Edit}
    
    * @private
    */
    position: Vec3AnimationPropertyTrack
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyLayer/properties/AnimationPropertyLayer-rotation.md Edit}
    
    * @private
    */
    rotation: QuatAnimationPropertyTrack
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyLayer/properties/AnimationPropertyLayer-scale.md Edit}
    
    * @private
    */
    scale: Vec3AnimationPropertyTrack
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyLayer/properties/AnimationPropertyLayer-vertexCache.md Edit}
    
    * @private
    */
    vertexCache: FloatAnimationPropertyTrack
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyLayer/properties/AnimationPropertyLayer-visibility.md Edit}
    
    * @private
    */
    visibility: IntStepAnimationPropertyTrack
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationPropertyTrack/AnimationPropertyTrack-description.md Edit}

* @private
*/
interface AnimationPropertyTrack extends ScriptObject {
}

/**
* The base class for animation tracks.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnimationTrack/AnimationTrack-description.md Edit}
*/
interface AnimationTrack extends Asset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnyData/AnyData-description.md Edit}

* @private
*/
interface AnyData {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnyData/methods/AnyData-getBool.md Edit}
    
    * @private
    */
    getBool(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnyData/methods/AnyData-getDouble.md Edit}
    
    * @private
    */
    getDouble(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnyData/methods/AnyData-getFloat.md Edit}
    
    * @private
    */
    getFloat(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnyData/methods/AnyData-getInt.md Edit}
    
    * @private
    */
    getInt(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AnyData/methods/AnyData-getString.md Edit}
    
    * @private
    */
    getString(): string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/ARDepthTextureProvider-description.md Edit}

* @private
*/
interface ARDepthTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/methods/ARDepthTextureProvider-getDepthToDisparityNumerator.md Edit}
    
    * @private
    */
    getDepthToDisparityNumerator(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/methods/ARDepthTextureProvider-getScale.md Edit}
    
    * @private
    */
    getScale(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/methods/ARDepthTextureProvider-sampleDepthAtPoint.md Edit}
    
    * @exposesUserData
    
    * @private
    */
    sampleDepthAtPoint(point: vec2): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/properties/ARDepthTextureProvider-depthProcessingOptions.md Edit}
    
    * @readonly
    
    * @private
    */
    depthProcessingOptions: DepthProcessingOptions
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/properties/ARDepthTextureProvider-dilatedDepthEnabled.md Edit}
    
    * @private
    */
    dilatedDepthEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/properties/ARDepthTextureProvider-guidedFilterEnabled.md Edit}
    
    * @private
    */
    guidedFilterEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/properties/ARDepthTextureProvider-zFar.md Edit}
    
    * @readonly
    
    * @private
    */
    zFar: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ARDepthTextureProvider/properties/ARDepthTextureProvider-zNear.md Edit}
    
    * @readonly
    
    * @private
    */
    zNear: number
    
}

/**
* Base class for all assets used in the engine.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Asset/Asset-description.md Edit}
*/
interface Asset extends SerializableWithUID {
    /**
    * The name of the Asset in Lens Studio.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Asset/properties/Asset-name.md Edit}
    */
    name: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/AssetSystem-description.md Edit}

* @private
*/
interface AssetSystem extends IAssetSystem {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-createAsset.md Edit}
    
    * @private
    */
    createAsset(typeName: string): Asset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-createPrefabFromAsset.md Edit}
    
    * @private
    */
    createPrefabFromAsset(asset: Asset): Prefab
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-createPrefabFromSceneObject.md Edit}
    
    * @private
    */
    createPrefabFromSceneObject(sceneObject: SceneObject): Prefab
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-createProceduralTexture.md Edit}
    
    * @private
    */
    createProceduralTexture(width: number, height: number, colorSpace: Colorspace): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-downloadAsset.md Edit}
    
    * @private
    */
    downloadAsset(onDownloaded: (id: string, path: string, asset: Asset) => void, onFailed: (id: string) => void, id: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-downloadAssetFromUrl.md Edit}
    
    * @private
    */
    downloadAssetFromUrl(onDownloaded: (id: string, path: string, asset: Asset) => void, onFailed: (id: string) => void, url: string, checksum: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-downloadBitmojiGlbAsset.md Edit}
    
    * @private
    */
    downloadBitmojiGlbAsset(onDownloaded: (id: string, path: string, asset: Asset) => void, onFailed: (id: string) => void, id: string, avatarId: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-downloadDeviceDependentAsset.md Edit}
    
    * @private
    */
    downloadDeviceDependentAsset(onDownloaded: (id: string, path: string, asset: Asset) => void, onFailed: (id: string) => void, id: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-downloadFriendmojiAsset.md Edit}
    
    * @private
    */
    downloadFriendmojiAsset(onDownloaded: (id: string, path: string, asset: Asset) => void, onFailed: (id: string) => void, id: string, avatarId: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-downloadUserGeneratedAsset.md Edit}
    
    * @private
    */
    downloadUserGeneratedAsset(onDownloaded: (id: string, path: string, asset: Asset) => void, onFailed: (id: string) => void, hexEncryptionKey: string, hexEncryptionIv: string, id: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-getAsset.md Edit}
    
    * @private
    */
    getAsset(key: string): Asset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-getDefaultSystemFont.md Edit}
    
    * @private
    */
    getDefaultSystemFont(): Font
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-getSystemFont.md Edit}
    
    * @private
    */
    getSystemFont(fontName: string): Font
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-hasAsset.md Edit}
    
    * @private
    */
    hasAsset(key: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-removeAsset.md Edit}
    
    * @private
    */
    removeAsset(key: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-setAsset.md Edit}
    
    * @private
    */
    setAsset(key: string, asset: Asset): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AssetSystem/methods/AssetSystem-unpackAssetPrefab.md Edit}
    
    * @private
    */
    unpackAssetPrefab(key: string, asset: Asset): Asset
    
}

/**
* Used by [Head.setAttachmentPointType()](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Head) to specify the type of attachment used with a Head binding.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/AttachmentPointType-description.md Edit}
*/
declare enum AttachmentPointType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-CandideCenter.md Edit}
    */
    CandideCenter,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-Chin.md Edit}
    */
    Chin,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-FaceMeshCenter.md Edit}
    */
    FaceMeshCenter,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-Forehead.md Edit}
    */
    Forehead,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-HeadCenter.md Edit}
    */
    HeadCenter,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-LeftCheek.md Edit}
    */
    LeftCheek,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-LeftEyeballCenter.md Edit}
    */
    LeftEyeballCenter,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-LeftForehead.md Edit}
    */
    LeftForehead,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-MouthCenter.md Edit}
    */
    MouthCenter,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-RightCheek.md Edit}
    */
    RightCheek,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-RightEyeballCenter.md Edit}
    */
    RightEyeballCenter,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-RightForehead.md Edit}
    */
    RightForehead,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AttachmentPointType/properties/AttachmentPointType-TriangleBarycentric.md Edit}
    */
    TriangleBarycentric
}

declare namespace Audio {
    /**
    * The curve that specifies how sound fades with the distance from Audio Component to the Audio Listener.****
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.DistanceCurveType/Audio.DistanceCurveType-description.md Edit}
    */
    enum DistanceCurveType {
        /**
        * Linear Curve ~ y(x) = ax+b
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.DistanceCurveType/properties/Audio.DistanceCurveType-Linear.md Edit}
        */
        Linear,
        /**
        * Inverse Curve ~ y(x) = (a/x)+b
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.DistanceCurveType/properties/Audio.DistanceCurveType-Inverse.md Edit}
        */
        Inverse,
        /**
        * Logarithmic Curve ~ -log(x)
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.DistanceCurveType/properties/Audio.DistanceCurveType-Logarithm.md Edit}
        */
        Logarithm,
        /**
        * Inverse Logarithmic Curve ~ +log(x)
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.DistanceCurveType/properties/Audio.DistanceCurveType-InverseLogarithm.md Edit}
        */
        InverseLogarithm
    }

}

declare namespace Audio {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.PanType/Audio.PanType-description.md Edit}
    
    * @private
    */
    enum PanType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.PanType/properties/Audio.PanType-Balance.md Edit}
        
        * @private
        */
        Balance,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.PanType/properties/Audio.PanType-PowerConst.md Edit}
        
        * @private
        */
        PowerConst
    }

}

declare namespace Audio {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.PlaybackMode/Audio.PlaybackMode-description.md Edit}
    
    * @snapOsOnly
    */
    enum PlaybackMode {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.PlaybackMode/properties/Audio.PlaybackMode-LowPower.md Edit}
        */
        LowPower,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Audio.PlaybackMode/properties/Audio.PlaybackMode-LowLatency.md Edit}
        */
        LowLatency
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioAnalysisEvent/AudioAnalysisEvent-description.md Edit}

* @private
*/
declare enum AudioAnalysisEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioAnalysisEvent/properties/AudioAnalysisEvent-DBLevelThresholdReached.md Edit}
    
    * @private
    */
    DBLevelThresholdReached,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioAnalysisEvent/properties/AudioAnalysisEvent-SpeechStarted.md Edit}
    
    * @private
    */
    SpeechStarted,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioAnalysisEvent/properties/AudioAnalysisEvent-KeywordDetected.md Edit}
    
    * @private
    */
    KeywordDetected
}

/**
* Used to play audio in a Lens.
* You can assign an [AudioTrackAsset](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AudioTrackAsset) to play through script or through the AudioComponent's inspector in Lens Studio.
* See the [Playing Audio](https://lensstudio.snapchat.com/guides/audio) guide for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/AudioComponent-description.md Edit}
*/
interface AudioComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/methods/AudioComponent-channelVolume.md Edit}
    
    * @private
    */
    channelVolume(channel: number, volume: number): void
    
    /**
    * Returns whether the sound is currently paused.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/methods/AudioComponent-isPaused.md Edit}
    */
    isPaused(): boolean
    
    /**
    * Returns whether the AudioComponent is currently playing sound.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/methods/AudioComponent-isPlaying.md Edit}
    */
    isPlaying(): boolean
    
    /**
    * Pauses the sound.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/methods/AudioComponent-pause.md Edit}
    */
    pause(): boolean
    
    /**
    * Plays the current sound `loops` number of times.  If `loops` is -1, the sound will repeat forever.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/methods/AudioComponent-play.md Edit}
    */
    play(loops: number): void
    
    /**
    * Resumes a paused sound.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/methods/AudioComponent-resume.md Edit}
    */
    resume(): boolean
    
    /**
    * Sets the callback function to be called whenever this sound stops playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/methods/AudioComponent-setOnFinish.md Edit}
    */
    setOnFinish(eventCallback: (audioComponent: AudioComponent) => void): void
    
    /**
    * Stops the current sound if already playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/methods/AudioComponent-stop.md Edit}
    */
    stop(fade: boolean): void
    
    /**
    * The audio asset currently assigned to play.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-audioTrack.md Edit}
    */
    audioTrack: AudioTrackAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-directivityEffectActive.md Edit}
    
    * @private
    */
    directivityEffectActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-directivityEffectShapeDecay.md Edit}
    
    * @private
    */
    directivityEffectShapeDecay: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-directivityEffectShapeFactor.md Edit}
    
    * @private
    */
    directivityEffectShapeFactor: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-distanceEffectActive.md Edit}
    
    * @private
    */
    distanceEffectActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-distanceEffectMaxAttenuation.md Edit}
    
    * @private
    */
    distanceEffectMaxAttenuation: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-distanceEffectMaxDistance.md Edit}
    
    * @private
    */
    distanceEffectMaxDistance: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-distanceEffectMinDistance.md Edit}
    
    * @private
    */
    distanceEffectMinDistance: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-distanceEffectType.md Edit}
    
    * @private
    */
    distanceEffectType: Audio.DistanceCurveType
    
    /**
    * The length (in seconds) of the current sound assigned to play.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-duration.md Edit}
    
    * @readonly
    */
    duration: number
    
    /**
    * Length (in seconds) of a volume fade in applied to the beginning of sound playback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-fadeInTime.md Edit}
    */
    fadeInTime: number
    
    /**
    * Length (in seconds) of a volume fade out applied to the end of sound playback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-fadeOutTime.md Edit}
    */
    fadeOutTime: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-mixFactor.md Edit}
    
    * @unreleased
    */
    mixFactor: number
    
    /**
    * When true, records sound directly into the snap. This mode works only when all Audio Components in the scene are using mix to snap. In this case input from microphone will be ignored.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-mixToSnap.md Edit}
    */
    mixToSnap: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-pan.md Edit}
    
    * @private
    */
    pan: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-panEffectActive.md Edit}
    
    * @private
    */
    panEffectActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-panEffectLevel.md Edit}
    
    * @private
    */
    panEffectLevel: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-panEffectType.md Edit}
    
    * @private
    */
    panEffectType: Audio.PanType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-playbackMode.md Edit}
    
    * @snapOsOnly
    */
    playbackMode: Audio.PlaybackMode
    
    /**
    * The current playback time in seconds
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-position.md Edit}
    */
    position: number
    
    /**
    * The volume of audio recorded to the snap, from 0 to 1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-recordingVolume.md Edit}
    */
    recordingVolume: number
    
    /**
    * Spatial Audio settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-spatialAudio.md Edit}
    
    * @readonly
    */
    spatialAudio: SpatialAudio
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-spatialAudioActive.md Edit}
    
    * @private
    */
    spatialAudioActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-streamPlayerEnabled.md Edit}
    
    * @private
    */
    streamPlayerEnabled: boolean
    
    /**
    * A volume multiplier for any sounds played by this AudioComponent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioComponent/properties/AudioComponent-volume.md Edit}
    */
    volume: number
    
}

/**
* Configures an audio effect for [AudioEffectComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AudioEffectComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioEffectAsset/AudioEffectAsset-description.md Edit}
*/
interface AudioEffectAsset extends Asset {
}

/**
* Used to add an audio effect to a Lens.
* When present in the scene, it will automatically apply the selected audio effect to recordings made with the Lens.
* See the [Audio Effect](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/audio/audio-effect) guide for more information.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioEffectComponent/AudioEffectComponent-description.md Edit}
*/
interface AudioEffectComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioEffectComponent/methods/AudioEffectComponent-enablePreset.md Edit}
    
    * @deprecated
    
    * @private
    */
    enablePreset(presetName: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioEffectComponent/methods/AudioEffectComponent-getParameter.md Edit}
    
    * @private
    */
    getParameter(parameterId: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioEffectComponent/methods/AudioEffectComponent-setParameter.md Edit}
    
    * @private
    */
    setParameter(parameterId: string, value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioEffectComponent/properties/AudioEffectComponent-audioEffect.md Edit}
    
    * @private
    */
    audioEffect: AudioEffectAsset
    
}

/**
* Provider for [AudioEffectAsset](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AudioEffectAsset).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioEffectProvider/AudioEffectProvider-description.md Edit}
*/
interface AudioEffectProvider extends Provider {
}

/**
* A component that receives input from Audio Components that have Spatial Audio enabled. Calculates their positions relative to the scene object it is attached to,and properly mixes them.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioListenerComponent/AudioListenerComponent-description.md Edit}
*/
interface AudioListenerComponent extends Component {
}

/**
* Provider of the Audio Output Audio Track asset. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioOutputProvider/AudioOutputProvider-description.md Edit}
*/
interface AudioOutputProvider extends AudioTrackProvider {
    /**
    * Enqueue audio data into an audio playback system.
    
    * `shape.x` - buffer size, must be less or equal to `audioFrame` length.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioOutputProvider/methods/AudioOutputProvider-enqueueAudioFrame.md Edit}
    */
    enqueueAudioFrame(audioFrame: Float32Array, inShape: vec3): void
    
    /**
    * Preferred size for audio output at the current frame update.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioOutputProvider/methods/AudioOutputProvider-getPreferredFrameSize.md Edit}
    */
    getPreferredFrameSize(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/AudioSystem-description.md Edit}

* @private
*/
interface AudioSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/methods/AudioSystem-load.md Edit}
    
    * @private
    */
    load(audioTrack: AudioTrackAsset): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/methods/AudioSystem-pause.md Edit}
    
    * @private
    */
    pause(soundId: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/methods/AudioSystem-play.md Edit}
    
    * @private
    */
    play(soundId: number, loops: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/methods/AudioSystem-resume.md Edit}
    
    * @private
    */
    resume(soundId: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/methods/AudioSystem-stop.md Edit}
    
    * @private
    */
    stop(soundId: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/methods/AudioSystem-suspend.md Edit}
    
    * @private
    */
    suspend(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/methods/AudioSystem-unload.md Edit}
    
    * @private
    */
    unload(soundId: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/methods/AudioSystem-unsuspend.md Edit}
    
    * @private
    */
    unsuspend(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/properties/AudioSystem-isHeadphones.md Edit}
    
    * @readonly
    
    * @private
    */
    isHeadphones: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioSystem/properties/AudioSystem-systemVolume.md Edit}
    
    * @private
    */
    systemVolume: number
    
}

/**
* Represents an audio file asset.
* See also: [AudioComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AudioComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTrackAsset/AudioTrackAsset-description.md Edit}
*/
interface AudioTrackAsset extends Asset {
    /**
    * The provider for this audio track asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTrackAsset/properties/AudioTrackAsset-control.md Edit}
    */
    control: AudioTrackProvider
    
}

/**
* Base class for Audio Track providers.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTrackProvider/AudioTrackProvider-description.md Edit}
*/
interface AudioTrackProvider extends Provider {
    /**
    * The maximum frame size of the audio track asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTrackProvider/properties/AudioTrackProvider-maxFrameSize.md Edit}
    
    * @readonly
    */
    maxFrameSize: number
    
    /**
    * Sample rate (samples per second) of the audio track asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTrackProvider/properties/AudioTrackProvider-sampleRate.md Edit}
    */
    sampleRate: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTriggerComponent/AudioTriggerComponent-description.md Edit}

* @private
*/
interface AudioTriggerComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTriggerComponent/methods/AudioTriggerComponent-addEvent.md Edit}
    
    * @private
    */
    addEvent(event: AudioAnalysisEvent, value: number, callback: () => any, keyword: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTriggerComponent/methods/AudioTriggerComponent-addKeyword.md Edit}
    
    * @private
    */
    addKeyword(keyword: string, threshold: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTriggerComponent/methods/AudioTriggerComponent-clearEvents.md Edit}
    
    * @private
    */
    clearEvents(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/AudioTriggerComponent/properties/AudioTriggerComponent-modelPath.md Edit}
    
    * @private
    */
    modelPath: BinAsset
    
}

/**
* Cardinal axis enumeration.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Axis/Axis-description.md Edit}
*/
declare enum Axis {
    /**
    * The X axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Axis/properties/Axis-X.md Edit}
    */
    X,
    /**
    * The Y axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Axis/properties/Axis-Y.md Edit}
    */
    Y,
    /**
    * The Z axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Axis/properties/Axis-Z.md Edit}
    */
    Z
}

/**
* Settings for rendering the background on a [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) component.
* Accessible through the [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) component's `backgroundSettings` property.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BackgroundSettings/BackgroundSettings-description.md Edit}
*/
interface BackgroundSettings extends ScriptObject {
    /**
    * Controls how rounded the corner of the background should be.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BackgroundSettings/properties/BackgroundSettings-cornerRadius.md Edit}
    */
    cornerRadius: number
    
    /**
    * If enabled, the background will be rendered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BackgroundSettings/properties/BackgroundSettings-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * Settings for how the inside of the background is drawn.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BackgroundSettings/properties/BackgroundSettings-fill.md Edit}
    */
    fill: TextFill
    
    /**
    * Controls how far in each direction the background should extend away from the text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BackgroundSettings/properties/BackgroundSettings-margins.md Edit}
    */
    margins: Rect
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Base64/Base64-description.md Edit}

* @private
*/
interface Base64 {
}
declare namespace Base64 {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Base64/methods/Base64-decode.md Edit}
    
    * @private
    */
    export function decode(value: string): Uint8Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Base64/methods/Base64-decodeTextureAsync.md Edit}
    
    * @private
    */
    export function decodeTextureAsync(value: string, onSuccess: (decodedTexture: Texture) => void, onFailure: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Base64/methods/Base64-encode.md Edit}
    
    * @private
    */
    export function encode(data: Uint8Array): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Base64/methods/Base64-encodeTextureAsync.md Edit}
    
    * @private
    */
    export function encodeTextureAsync(texture: Texture, onSuccess: (encodedTexture: string) => void, onFailure: () => void, compressionQuality: CompressionQuality, encodingType: EncodingType): void
    

}

/**
* The base class for all mesh rendering components.
* Comparable to the former class "MeshVisual", which was split into the classes:
* [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual),
* [MaterialMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MaterialMeshVisual),
* and [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/BaseMeshVisual-description.md Edit}
*/
interface BaseMeshVisual extends Visual {
    /**
    * Range maximum of the local-space axis-aligned bounding box (AABB) of the visual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/methods/BaseMeshVisual-localAabbMax.md Edit}
    */
    localAabbMax(): vec3
    
    /**
    * Range minimum of the local-space axis-aligned bounding box (AABB) of the visual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/methods/BaseMeshVisual-localAabbMin.md Edit}
    */
    localAabbMin(): vec3
    
    /**
    * Projects screen positions from `camera`'s view onto the mesh's UVs.
    * If the MeshVisual's material uses the same texture as the camera input, the MeshVisual will look identical to the part of the screen it covers.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/methods/BaseMeshVisual-snap.md Edit}
    */
    snap(camera: Camera): void
    
    /**
    * Range maximum of the world-space axis-aligned bounding box (AABB) of the visual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/methods/BaseMeshVisual-worldAabbMax.md Edit}
    */
    worldAabbMax(): vec3
    
    /**
    * Range minimum of the world-space axis-aligned bounding box (AABB) of the visual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/methods/BaseMeshVisual-worldAabbMin.md Edit}
    */
    worldAabbMin(): vec3
    
    /**
    * When a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) is present on this SceneObject,
    * and `extentsTarget` is a child of this SceneObject, `extentsTarget` will be repositioned to match the exact
    * area this MeshVisual is being rendered. Very useful for [Image](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Image) and [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) components.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/properties/BaseMeshVisual-extentsTarget.md Edit}
    */
    extentsTarget: ScreenTransform
    
    /**
    * When a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) is attached to the same SceneObject, this controls how the mesh will be positioned horizontally depending on `stretchMode`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/properties/BaseMeshVisual-horizontalAlignment.md Edit}
    */
    horizontalAlignment: HorizontalAlignment
    
    /**
    * None = 0, Caster = 1, Receiver = 2
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/properties/BaseMeshVisual-meshShadowMode.md Edit}
    */
    meshShadowMode: MeshShadowMode
    
    /**
    * Affects the color of shadows being cast by this MeshVisual. The color of the cast shadow is a mix between shadowColor and the material's base texture color. The alpha value of shadowColor controls the mixing of these two colors, with 0 = shadowColor and 1 = shadowColor * textureColor.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/properties/BaseMeshVisual-shadowColor.md Edit}
    */
    shadowColor: vec4
    
    /**
    * Density of shadows cast by this MeshVisual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/properties/BaseMeshVisual-shadowDensity.md Edit}
    */
    shadowDensity: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/properties/BaseMeshVisual-ssaoMode.md Edit}
    
    * @private
    */
    ssaoMode: SSAO.MeshMode
    
    /**
    * When a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) is attached to the same SceneObject, this controls how the mesh will be stretched relative to the ScreenTransform's boundaries.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/properties/BaseMeshVisual-stretchMode.md Edit}
    */
    stretchMode: StretchMode
    
    /**
    * When a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) is attached to the same SceneObject, this controls how the mesh will be positioned vertically depending on `stretchMode`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMeshVisual/properties/BaseMeshVisual-verticalAlignment.md Edit}
    */
    verticalAlignment: VerticalAlignment
    
}

/**
* Base class for MultiplayerSession options. This class is not used directly - use ConnectedLensSessionOptions instead.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/BaseMultiplayerSessionOptions-description.md Edit}
*/
interface BaseMultiplayerSessionOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-experienceId.md Edit}
    
    * @private
    */
    experienceId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-host.md Edit}
    
    * @private
    */
    host: string
    
    /**
    * Provides a single host for every session. Useful when an experience has a single authority. This should not be used in latency sensitive situations. The creator of the session will by default be the host. If the host leaves, thee server will determine a new host and transfer all ownership of entities owned by the original host. Use with `onHostUpdated` API to get a callback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-hostManagementEnabled.md Edit}
    */
    hostManagementEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-isRealtime.md Edit}
    
    * @private
    */
    isRealtime: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-managedByHost.md Edit}
    
    * @deprecated
    
    * @private
    */
    managedByHost: boolean
    
    /**
    * Function to be called when a connection to the realtime backend is established. All realtime requests can be called after this callback. When you invite others to join, a new session will be created, hence you should update your session handler with the argument passed in this callback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onConnected.md Edit}
    */
    onConnected: (session: MultiplayerSession, connectionInfo: ConnectedLensModule.ConnectionInfo) => void
    
    /**
    * Function to be called when the connection to the realtime backend is lost, either via successful disconnect or passive disconnect due to error.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onDisconnected.md Edit}
    */
    onDisconnected: (session: MultiplayerSession, disconnectInfo: string) => void
    
    /**
    * Function to be called when an error occurs in the session life cycle.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onError.md Edit}
    */
    onError: (session: MultiplayerSession, code: string, description: string) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onHostUpdated.md Edit}
    */
    onHostUpdated: (session: MultiplayerSession, removalInfo: ConnectedLensModule.HostUpdateInfo) => void
    
    /**
    * Function to be called when a string-based message sent by sendMessage() is received from another user via the realtime backend.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onMessageReceived.md Edit}
    */
    onMessageReceived: (session: MultiplayerSession, userId: string, message: string, senderInfo: ConnectedLensModule.UserInfo) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onMessageReceivedBytes.md Edit}
    
    * @private
    */
    onMessageReceivedBytes: (session: MultiplayerSession, userId: string, message: number[], senderInfo: ConnectedLensModule.UserInfo) => void
    
    /**
    * Callback function that will be executed when a realtime store is created.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onRealtimeStoreCreated.md Edit}
    */
    onRealtimeStoreCreated: (session: MultiplayerSession, store: GeneralDataStore, ownerInfo: ConnectedLensModule.UserInfo, creationInfo: ConnectedLensModule.RealtimeStoreCreationInfo) => void
    
    /**
    * Callback function that will be executed when a realtime store is deleted.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onRealtimeStoreDeleted.md Edit}
    */
    onRealtimeStoreDeleted: (session: MultiplayerSession, store: GeneralDataStore, deleteInfo: ConnectedLensModule.RealtimeStoreDeleteInfo) => void
    
    /**
    * Function to be called when a key is removed from a RealtimeStore.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onRealtimeStoreKeyRemoved.md Edit}
    */
    onRealtimeStoreKeyRemoved: (session: MultiplayerSession, removalInfo: ConnectedLensModule.RealtimeStoreKeyRemovalInfo) => void
    
    /**
    * Callback function that will be executed when ownership of a realtime store is updated.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onRealtimeStoreOwnershipUpdated.md Edit}
    */
    onRealtimeStoreOwnershipUpdated: (session: MultiplayerSession, store: GeneralDataStore, ownerInfo: ConnectedLensModule.UserInfo, ownershipUpdateInfo: ConnectedLensModule.RealtimeStoreOwnershipUpdateInfo) => void
    
    /**
    * Callback function that will be executed when a realtime store is updated.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onRealtimeStoreUpdated.md Edit}
    */
    onRealtimeStoreUpdated: (session: MultiplayerSession, store: GeneralDataStore, key: string, updateInfo: ConnectedLensModule.RealtimeStoreUpdateInfo) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onStartedStreamingVideo.md Edit}
    
    * @private
    */
    onStartedStreamingVideo: (session: MultiplayerSession) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onStoppedStreamingVideo.md Edit}
    
    * @private
    */
    onStoppedStreamingVideo: (session: MultiplayerSession) => void
    
    /**
    * Function to be called when another user joins the session. When joining a session, the current user will get a callback for each of the existing active users in the current session. This way you can build a list of existing players in game.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onUserJoinedSession.md Edit}
    */
    onUserJoinedSession: (session: MultiplayerSession, userInfo: ConnectedLensModule.UserInfo) => void
    
    /**
    * Function to be called when another user leaves the session, either deliberately or via passive disconnect due to error.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onUserLeftSession.md Edit}
    */
    onUserLeftSession: (session: MultiplayerSession, userInfo: ConnectedLensModule.UserInfo) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onUserStartedStreamingVideo.md Edit}
    
    * @private
    */
    onUserStartedStreamingVideo: (session: MultiplayerSession, userInfo: ConnectedLensModule.UserInfo, texture: Texture) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseMultiplayerSessionOptions/properties/BaseMultiplayerSessionOptions-onUserStoppedStreamingVideo.md Edit}
    
    * @private
    */
    onUserStoppedStreamingVideo: (session: MultiplayerSession, userInfo: ConnectedLensModule.UserInfo) => void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseNeuralFaceEffectTextureProvider/BaseNeuralFaceEffectTextureProvider-description.md Edit}

* @private
*/
interface BaseNeuralFaceEffectTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseNeuralFaceEffectTextureProvider/methods/BaseNeuralFaceEffectTextureProvider-setLoadingFinishedCallback.md Edit}
    
    * @private
    */
    setLoadingFinishedCallback(callback: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseNeuralFaceEffectTextureProvider/methods/BaseNeuralFaceEffectTextureProvider-setTexture.md Edit}
    
    * @private
    */
    setTexture(name: string, feature: Texture): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseNeuralFaceEffectTextureProvider/methods/BaseNeuralFaceEffectTextureProvider-setTypedArray.md Edit}
    
    * @private
    */
    setTypedArray(name: string, feature: Float32Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseNeuralFaceEffectTextureProvider/properties/BaseNeuralFaceEffectTextureProvider-asyncLoad.md Edit}
    
    * @private
    */
    asyncLoad: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseNeuralFaceEffectTextureProvider/properties/BaseNeuralFaceEffectTextureProvider-input.md Edit}
    
    * @private
    */
    input: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseNeuralFaceEffectTextureProvider/properties/BaseNeuralFaceEffectTextureProvider-model.md Edit}
    
    * @private
    */
    model: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BaseNeuralFaceEffectTextureProvider/properties/BaseNeuralFaceEffectTextureProvider-paused.md Edit}
    
    * @private
    */
    paused: boolean
    
}

/**
* Base class for Input and Output Placeholders used by MLComponent.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasePlaceholder/BasePlaceholder-description.md Edit}
*/
interface BasePlaceholder extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasePlaceholder/properties/BasePlaceholder-dataLayout.md Edit}
    
    * @private
    */
    dataLayout: MachineLearning.DataLayout
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasePlaceholder/properties/BasePlaceholder-internalDataLayout.md Edit}
    
    * @readonly
    
    * @private
    */
    internalDataLayout: MachineLearning.DataLayout
    
    /**
    * The name of the Placeholder.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasePlaceholder/properties/BasePlaceholder-name.md Edit}
    
    * @readonly
    */
    name: string
    
    /**
    * The shape of the Placeholder's data.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasePlaceholder/properties/BasePlaceholder-shape.md Edit}
    
    * @readonly
    */
    shape: vec3
    
    /**
    * Transformer object for applying transformations on the PlaceHolder's data.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasePlaceholder/properties/BasePlaceholder-transformer.md Edit}
    
    * @readonly
    */
    transformer: Transformer
    
}

/**
* Provides basic information about a transformation.
* See also: [DeviceTracking](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking)

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasicTransform/BasicTransform-description.md Edit}
*/
interface BasicTransform extends ScriptObject {
    /**
    * Returns the inverted world matrix of the BasicTransform.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasicTransform/methods/BasicTransform-getInvertedMatrix.md Edit}
    */
    getInvertedMatrix(): mat4
    
    /**
    * Returns the world matrix of the BasicTransform.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasicTransform/methods/BasicTransform-getMatrix.md Edit}
    */
    getMatrix(): mat4
    
    /**
    * Returns the world position of the BasicTransform.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasicTransform/methods/BasicTransform-getPosition.md Edit}
    */
    getPosition(): vec3
    
    /**
    * Returns the world rotation of the BasicTransform.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasicTransform/methods/BasicTransform-getRotation.md Edit}
    */
    getRotation(): quat
    
    /**
    * Returns the world scale of the BasicTransform.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BasicTransform/methods/BasicTransform-getScale.md Edit}
    */
    getScale(): vec3
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BillboardVisual/BillboardVisual-description.md Edit}

* @deprecated

* @private
*/
interface BillboardVisual extends MaterialMeshVisual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BillboardVisual/properties/BillboardVisual-fillMode.md Edit}
    
    * @private
    */
    fillMode: TextureStretchMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BillboardVisual/properties/BillboardVisual-flipX.md Edit}
    
    * @private
    */
    flipX: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BillboardVisual/properties/BillboardVisual-flipY.md Edit}
    
    * @private
    */
    flipY: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BillboardVisual/properties/BillboardVisual-pivot.md Edit}
    
    * @private
    */
    pivot: vec2
    
}

/**
* File based asset.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BinAsset/BinAsset-description.md Edit}
*/
interface BinAsset extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BinAsset/methods/BinAsset-readText.md Edit}
    
    * @private
    */
    readText(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BinAsset/properties/BinAsset-control.md Edit}
    
    * @private
    */
    control: BinFileProvider
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BinFileProvider/BinFileProvider-description.md Edit}

* @unreleased
*/
interface BinFileProvider extends Provider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmapGlyph/BitmapGlyph-description.md Edit}

* @private
*/
interface BitmapGlyph extends Glyph {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmapGlyph/methods/BitmapGlyph-createTexture.md Edit}
    
    * @private
    */
    createTexture(): Texture
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji2DOptions/Bitmoji2DOptions-description.md Edit}
*/
interface Bitmoji2DOptions extends ScriptObject {
    /**
    * The pose id for the 2D Bitmoji.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji2DOptions/properties/Bitmoji2DOptions-poseId.md Edit}
    */
    poseId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji2DOptions/properties/Bitmoji2DOptions-user.md Edit}
    */
    user: SnapchatUser
    
}
declare namespace Bitmoji2DOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji2DOptions/methods/Bitmoji2DOptions-create.md Edit}
    */
    export function create(): Bitmoji2DOptions
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji2DResource/Bitmoji2DResource-description.md Edit}
*/
interface Bitmoji2DResource extends DynamicResource {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji3DOptions/Bitmoji3DOptions-description.md Edit}
*/
interface Bitmoji3DOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji3DOptions/properties/Bitmoji3DOptions-parameters.md Edit}
    
    * @private
    */
    parameters: object
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji3DOptions/properties/Bitmoji3DOptions-user.md Edit}
    */
    user: SnapchatUser
    
}
declare namespace Bitmoji3DOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji3DOptions/methods/Bitmoji3DOptions-create.md Edit}
    */
    export function create(): Bitmoji3DOptions
    

}

/**
* Provides information about the current user's 3D Bitmoji avatar to be downloaded via the RemoteMediaModule.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji3DResource/Bitmoji3DResource-description.md Edit}
*/
interface Bitmoji3DResource extends DynamicResource {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji3DResource/properties/Bitmoji3DResource-assetId.md Edit}
    
    * @readonly
    
    * @private
    */
    assetId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Bitmoji3DResource/properties/Bitmoji3DResource-parameters.md Edit}
    
    * @readonly
    
    * @private
    */
    parameters: object
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiAliasIds/BitmojiAliasIds-description.md Edit}

* @private
*/
interface BitmojiAliasIds {
}
declare namespace BitmojiAliasIds {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiAliasIds/properties/BitmojiAliasIds-CurrentUserAvatarId.md Edit}
    
    * @deprecated
    
    * @private
    */
    let CurrentUserAvatarId: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiAliasIds/properties/BitmojiAliasIds-DefaultFriendAvatarId.md Edit}
    
    * @deprecated
    
    * @private
    */
    let DefaultFriendAvatarId: number
    

}

/**
* Provides access to getting information about the current user's Bitmoji.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiModule/BitmojiModule-description.md Edit}
*/
interface BitmojiModule extends Asset {
    /**
    * Retrieve a handle representing the Bitmoji model for the given user. This can be passed to `RemoteMediaModule` for download.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiModule/methods/BitmojiModule-createBitmoji3DResourceForUser.md Edit}
    
    * @private
    */
    createBitmoji3DResourceForUser(user: SnapchatUser): Bitmoji3DResource
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiModule/methods/BitmojiModule-createBitmoji3DResourceForUserWithParams.md Edit}
    
    * @private
    */
    createBitmoji3DResourceForUserWithParams(user: SnapchatUser, params: object): Bitmoji3DResource
    
    /**
    * Returns a `DynamicResource` via the provided `callback`, which can be resolved into a texture using `RemoteMediaModule`. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiModule/methods/BitmojiModule-requestBitmoji2DResource.md Edit}
    */
    requestBitmoji2DResource(options: Bitmoji2DOptions, callback: (resource: Bitmoji2DResource) => void): void
    
    /**
    * Request the current user's 3D Bitmoji avatar.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiModule/methods/BitmojiModule-requestBitmoji3DResource.md Edit}
    */
    requestBitmoji3DResource(callback: (resource: Bitmoji3DResource) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiModule/methods/BitmojiModule-requestBitmoji3DResourceWithOptions.md Edit}
    */
    requestBitmoji3DResourceWithOptions(options: Bitmoji3DOptions, callback: (resource: Bitmoji3DResource) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiModule/methods/BitmojiModule-requestBitmoji3DResourceWithParams.md Edit}
    
    * @private
    */
    requestBitmoji3DResourceWithParams(params: object, callback: (resource: Bitmoji3DResource) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiModule/properties/BitmojiModule-fallbackAvatarId.md Edit}
    
    * @private
    */
    fallbackAvatarId: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiStickerType/BitmojiStickerType-description.md Edit}

* @private
*/
declare enum BitmojiStickerType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiStickerType/properties/BitmojiStickerType-Bitmoji.md Edit}
    
    * @private
    */
    Bitmoji,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiStickerType/properties/BitmojiStickerType-FriendMoji.md Edit}
    
    * @private
    */
    FriendMoji
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiSystem/BitmojiSystem-description.md Edit}

* @deprecated

* @private
*/
interface BitmojiSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiSystem/methods/BitmojiSystem-getSelfieId.md Edit}
    
    * @deprecated
    
    * @private
    */
    getSelfieId(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiSystem/methods/BitmojiSystem-initialize.md Edit}
    
    * @deprecated
    
    * @private
    */
    initialize(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiSystem/methods/BitmojiSystem-isBitmojiAvailable.md Edit}
    
    * @deprecated
    
    * @private
    */
    isBitmojiAvailable(bitmojiAliasId: number): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiSystem/methods/BitmojiSystem-loadBitmoji.md Edit}
    
    * @deprecated
    
    * @private
    */
    loadBitmoji(bitmojiId: string, bitmojiAliasId: number, callback: (texture: Texture) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiSystem/methods/BitmojiSystem-loadBitmojiSelfieForUser.md Edit}
    
    * @deprecated
    
    * @private
    */
    loadBitmojiSelfieForUser(user: SnapchatUser, onLoaded: (texture: Texture) => void, onFailure: (error: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiSystem/methods/BitmojiSystem-loadFriendmoji.md Edit}
    
    * @deprecated
    
    * @private
    */
    loadFriendmoji(bitmojiId: string, friendAliasId: number, callback: (texture: Texture) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiSystem/properties/BitmojiSystem-redirectToBitmojiApp.md Edit}
    
    * @deprecated
    
    * @private
    */
    redirectToBitmojiApp: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiTextureProvider/BitmojiTextureProvider-description.md Edit}

* @private
*/
interface BitmojiTextureProvider extends TextureProvider {
    /**
    * Configures which user object is associated with the Bitmoji resource.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiTextureProvider/methods/BitmojiTextureProvider-setUser.md Edit}
    
    * @private
    */
    setUser(user: SnapchatUser): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiTextureProvider/properties/BitmojiTextureProvider-defaultTexture.md Edit}
    
    * @private
    */
    defaultTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiTextureProvider/properties/BitmojiTextureProvider-friendAliasId.md Edit}
    
    * @private
    */
    friendAliasId: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiTextureProvider/properties/BitmojiTextureProvider-stickerId.md Edit}
    
    * @private
    */
    stickerId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiTextureProvider/properties/BitmojiTextureProvider-stickerType.md Edit}
    
    * @private
    */
    stickerType: BitmojiStickerType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BitmojiTextureProvider/properties/BitmojiTextureProvider-userAliasId.md Edit}
    
    * @private
    */
    userAliasId: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/BlendFactor-description.md Edit}

* @private
*/
declare enum BlendFactor {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-Zero.md Edit}
    
    * @private
    */
    Zero,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-One.md Edit}
    
    * @private
    */
    One,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-SourceColor.md Edit}
    
    * @private
    */
    SourceColor,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-OneMinusSourceColor.md Edit}
    
    * @private
    */
    OneMinusSourceColor,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-DestinationColor.md Edit}
    
    * @private
    */
    DestinationColor,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-OneMinusDestinationColor.md Edit}
    
    * @private
    */
    OneMinusDestinationColor,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-SourceAlpha.md Edit}
    
    * @private
    */
    SourceAlpha,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-OneMinusSourceAlpha.md Edit}
    
    * @private
    */
    OneMinusSourceAlpha,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-DestinationAlpha.md Edit}
    
    * @private
    */
    DestinationAlpha,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-OneMinusDestinationAlpha.md Edit}
    
    * @private
    */
    OneMinusDestinationAlpha,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-ConstantColor.md Edit}
    
    * @private
    */
    ConstantColor,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-OneMinusConstantColor.md Edit}
    
    * @private
    */
    OneMinusConstantColor,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-ConstantAlpha.md Edit}
    
    * @private
    */
    ConstantAlpha,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-OneMinusConstantAlpha.md Edit}
    
    * @private
    */
    OneMinusConstantAlpha,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendFactor/properties/BlendFactor-SourceAlphaSaturated.md Edit}
    
    * @private
    */
    SourceAlphaSaturated
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/BlendMode-description.md Edit}
*/
declare enum BlendMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Normal.md Edit}
    */
    Normal,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-MultiplyLegacy.md Edit}
    
    * @deprecated
    */
    MultiplyLegacy,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-AddLegacy.md Edit}
    
    * @deprecated
    */
    AddLegacy,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Screen.md Edit}
    */
    Screen,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-PremultipliedAlpha.md Edit}
    */
    PremultipliedAlpha,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-AlphaToCoverage.md Edit}
    */
    AlphaToCoverage,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Disabled.md Edit}
    */
    Disabled,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Add.md Edit}
    */
    Add,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-AlphaTest.md Edit}
    */
    AlphaTest,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-ColoredGlass.md Edit}
    */
    ColoredGlass,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Multiply.md Edit}
    */
    Multiply,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Min.md Edit}
    */
    Min,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Max.md Edit}
    */
    Max,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Software.md Edit}
    */
    Software,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-PremultipliedAlphaHardware.md Edit}
    */
    PremultipliedAlphaHardware,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-Hardware.md Edit}
    */
    Hardware,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendMode/properties/BlendMode-PremultipliedAlphaAuto.md Edit}
    */
    PremultipliedAlphaAuto
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendOperation/BlendOperation-description.md Edit}

* @private
*/
declare enum BlendOperation {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendOperation/properties/BlendOperation-Add.md Edit}
    
    * @private
    */
    Add,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendOperation/properties/BlendOperation-Subtract.md Edit}
    
    * @private
    */
    Subtract,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendOperation/properties/BlendOperation-ReverseSubtract.md Edit}
    
    * @private
    */
    ReverseSubtract,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendOperation/properties/BlendOperation-Min.md Edit}
    
    * @private
    */
    Min,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendOperation/properties/BlendOperation-Max.md Edit}
    
    * @private
    */
    Max
}

/**
* Controls blend shapes connected to imported animation content.

* Note: this class has been deprecated. Please use the blend shapes functions in [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendShapes/BlendShapes-description.md Edit}

* @deprecated
*/
interface BlendShapes extends Component {
    /**
    * Removes all blend shapes from the BlendShapesVisual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendShapes/methods/BlendShapes-clearBlendShapes.md Edit}
    */
    clearBlendShapes(): void
    
    /**
    * Returns the weight of blend shape `name`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendShapes/methods/BlendShapes-getBlendShape.md Edit}
    */
    getBlendShape(name: string): number
    
    /**
    * Returns whether this BlendShapesVisual has a blend shape named `name`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendShapes/methods/BlendShapes-hasBlendShape.md Edit}
    */
    hasBlendShape(name: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendShapes/methods/BlendShapes-isNormalBlended.md Edit}
    
    * @private
    */
    isNormalBlended(): boolean
    
    /**
    * Sets the weight of blend shape `name`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendShapes/methods/BlendShapes-setBlendShape.md Edit}
    */
    setBlendShape(name: string, weight: number): void
    
    /**
    * Clears the blendshape with the matching name from the BlendShapes component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendShapes/methods/BlendShapes-unsetBlendShape.md Edit}
    */
    unsetBlendShape(name: string): void
    
    /**
    * If enabled, normal directions are also blended by blend shapes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendShapes/properties/BlendShapes-blendNormals.md Edit}
    */
    blendNormals: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/BlendState-description.md Edit}

* @private
*/
interface BlendState extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-getAlphaOperation.md Edit}
    
    * @private
    */
    getAlphaOperation(colorAttachmentIndex: number): BlendOperation
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-getDestinationAlphaFactor.md Edit}
    
    * @private
    */
    getDestinationAlphaFactor(colorAttachmentIndex: number): BlendFactor
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-getDestinationRgbFactor.md Edit}
    
    * @private
    */
    getDestinationRgbFactor(colorAttachmentIndex: number): BlendFactor
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-getEnabled.md Edit}
    
    * @private
    */
    getEnabled(colorAttachmentIndex: number): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-getRgbOperation.md Edit}
    
    * @private
    */
    getRgbOperation(colorAttachmentIndex: number): BlendOperation
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-getSourceAlphaFactor.md Edit}
    
    * @private
    */
    getSourceAlphaFactor(colorAttachmentIndex: number): BlendFactor
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-getSourceRgbFactor.md Edit}
    
    * @private
    */
    getSourceRgbFactor(colorAttachmentIndex: number): BlendFactor
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-setAlphaOperation.md Edit}
    
    * @private
    */
    setAlphaOperation(colorAttachmentIndex: number, value: BlendOperation): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-setDestinationAlphaFactor.md Edit}
    
    * @private
    */
    setDestinationAlphaFactor(colorAttachmentIndex: number, value: BlendFactor): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-setDestinationRgbFactor.md Edit}
    
    * @private
    */
    setDestinationRgbFactor(colorAttachmentIndex: number, value: BlendFactor): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-setEnabled.md Edit}
    
    * @private
    */
    setEnabled(colorAttachmentIndex: number, value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-setRgbOperation.md Edit}
    
    * @private
    */
    setRgbOperation(colorAttachmentIndex: number, value: BlendOperation): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-setSourceAlphaFactor.md Edit}
    
    * @private
    */
    setSourceAlphaFactor(colorAttachmentIndex: number, value: BlendFactor): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/methods/BlendState-setSourceRgbFactor.md Edit}
    
    * @private
    */
    setSourceRgbFactor(colorAttachmentIndex: number, value: BlendFactor): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-alphaOperation.md Edit}
    
    * @private
    */
    alphaOperation: BlendOperation
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-alphaToCoverageEnabled.md Edit}
    
    * @private
    */
    alphaToCoverageEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-blendMode.md Edit}
    
    * @private
    */
    blendMode: BlendMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-colorAttachmentCount.md Edit}
    
    * @readonly
    
    * @private
    */
    colorAttachmentCount: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-constantColor.md Edit}
    
    * @private
    */
    constantColor: vec4
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-destinationAlphaFactor.md Edit}
    
    * @private
    */
    destinationAlphaFactor: BlendFactor
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-destinationRgbFactor.md Edit}
    
    * @private
    */
    destinationRgbFactor: BlendFactor
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-enabled.md Edit}
    
    * @private
    */
    enabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-indexedBlendingEnabled.md Edit}
    
    * @private
    */
    indexedBlendingEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-indexedBlendingSupported.md Edit}
    
    * @readonly
    
    * @private
    */
    indexedBlendingSupported: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-rgbOperation.md Edit}
    
    * @private
    */
    rgbOperation: BlendOperation
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-sourceAlphaFactor.md Edit}
    
    * @private
    */
    sourceAlphaFactor: BlendFactor
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlendState/properties/BlendState-sourceRgbFactor.md Edit}
    
    * @private
    */
    sourceRgbFactor: BlendFactor
    
}

/**
* Used to analyze the camera input and apply similar image artifacts to your AR objects in order to allow it to blend and match the real world better.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BlurNoiseEstimation/BlurNoiseEstimation-description.md Edit}
*/
interface BlurNoiseEstimation extends Component {
}

/**
* Derived from ColliderComponent, attaching this to a SceneObject turns it into a dynamic rigid-body that is automatically moved by the physics simulation in response to gravity, collisions, and other forces.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/BodyComponent-description.md Edit}
*/
interface BodyComponent extends ColliderComponent {
    /**
    * Apply linear force at the object's center-of-mass.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/methods/BodyComponent-addForce.md Edit}
    */
    addForce(force: vec3, mode: Physics.ForceMode): void
    
    /**
    * Apply force at a point offset from the object's origin, effectively generating torque.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/methods/BodyComponent-addForceAt.md Edit}
    */
    addForceAt(force: vec3, offset: vec3, mode: Physics.ForceMode): void
    
    /**
    * Add a point constraint between this body and the given collider, at the given position. `target` is optional. If null, it is statically constrained to the world.   This is a convenience function that creates a child SceneObject with a ConstraintComponent, and sets its type, target, and constraint parameters. To fully remove the constraint, its SceneObject must be removed - not the component. Call `removeConstraint()` to do this.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/methods/BodyComponent-addPointConstraint.md Edit}
    */
    addPointConstraint(target: ColliderComponent, position: vec3): ConstraintComponent
    
    /**
    * Relative to local rotation, apply linear force at the object's center-of-mass.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/methods/BodyComponent-addRelativeForce.md Edit}
    */
    addRelativeForce(force: vec3, mode: Physics.ForceMode): void
    
    /**
    * Relative to local rotation, apply force at a point offset from the object's origin, effectively generating torque.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/methods/BodyComponent-addRelativeForceAt.md Edit}
    */
    addRelativeForceAt(force: vec3, position: vec3, mode: Physics.ForceMode): void
    
    /**
    * Relative to local rotation, apply torque (angular force).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/methods/BodyComponent-addRelativeTorque.md Edit}
    */
    addRelativeTorque(torque: vec3, mode: Physics.ForceMode): void
    
    /**
    * Apply torque (angular force).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/methods/BodyComponent-addTorque.md Edit}
    */
    addTorque(torque: vec3, mode: Physics.ForceMode): void
    
    /**
    * Removes a constraint that was added with one of the `add*Constraint()` functions.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/methods/BodyComponent-removeConstraint.md Edit}
    */
    removeConstraint(constraint: ConstraintComponent): void
    
    /**
    * Damping applied to angular velocity, in the range 0.0 (no damping) to 1.0 (maximum damping).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/properties/BodyComponent-angularDamping.md Edit}
    */
    angularDamping: number
    
    /**
    * Damping applied to linear velocity, in the range 0.0 (no damping) to 1.0 (maximum damping). This produces an effect similar to drag in that it causes the object to slow down over time. It is not however physically accurate, and it doesn't take into account surface area or mass.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/properties/BodyComponent-damping.md Edit}
    */
    damping: number
    
    /**
    * Density (kg/L) of the object, used to derive mass from volume. If modified, mass changes according to shape and scale.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/properties/BodyComponent-density.md Edit}
    */
    density: number
    
    /**
    * If enabled, the body is dynamically simulated, such that it responds to forces and collisions. Otherwise, it acts as a static collider, functionally equivalent to Physics.ColliderComponent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/properties/BodyComponent-dynamic.md Edit}
    */
    dynamic: boolean
    
    /**
    * Mass (kg) of the object. If modified from this field, mass is constant irrespective of shape and scale.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyComponent/properties/BodyComponent-mass.md Edit}
    */
    mass: number
    
}

/**
* Provides depth values of the tracked body encoded as D24_UNORM_S8_UINT in screen resolution. Depth is normalized between 0-1, and the stencil component is ignored. The values may be remapped from normalized units (0 to 1) to negative centimeters from the camera (-near in cm to -far in cm) using the `Depth Map` mode of the `Texture 2D Sample` node in Material Editor.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyDepthTextureProvider/BodyDepthTextureProvider-description.md Edit}
*/
interface BodyDepthTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyDepthTextureProvider/properties/BodyDepthTextureProvider-annotatorOptionsAsset.md Edit}
    
    * @private
    */
    annotatorOptionsAsset: BinAsset
    
    /**
    * The index of the body to track. The first body detected is `0`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyDepthTextureProvider/properties/BodyDepthTextureProvider-bodyIndex.md Edit}
    */
    bodyIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyDepthTextureProvider/properties/BodyDepthTextureProvider-bodyModel.md Edit}
    
    * @private
    */
    bodyModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyDepthTextureProvider/properties/BodyDepthTextureProvider-depthNormalsUVModel.md Edit}
    
    * @private
    */
    depthNormalsUVModel: BinAsset
    
    /**
    * A background depth (where confidence < `minimumConfidence`) is represented by 1.0 (zFar). A value from 0.0 to 1.0 (default value 0.5). 
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyDepthTextureProvider/properties/BodyDepthTextureProvider-minimumConfidence.md Edit}
    */
    minimumConfidence: number
    
    /**
    * Far plane value in cm, Read only, always outputs 1000.0.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyDepthTextureProvider/properties/BodyDepthTextureProvider-zFar.md Edit}
    
    * @readonly
    */
    zFar: number
    
    /**
    * Near plane value in cm, Read only, always outputs 1.0.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyDepthTextureProvider/properties/BodyDepthTextureProvider-zNear.md Edit}
    
    * @readonly
    */
    zNear: number
    
}

/**
* Provides surface normal values of the tracked body encoded as RGBA (x, y, z, confidence) in `R8G8B8A8_UNORM` format in screen resolution. The XYZ values may need to be remapped from [0 -> 1] to [-1 -> 1] using the "Normal Map" mode of the `Texture 2D Sample` node in Material Editor.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyNormalsTextureProvider/BodyNormalsTextureProvider-description.md Edit}
*/
interface BodyNormalsTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyNormalsTextureProvider/properties/BodyNormalsTextureProvider-annotatorOptionsAsset.md Edit}
    
    * @private
    */
    annotatorOptionsAsset: BinAsset
    
    /**
    * The index of the body to track. The first body detected is `0`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyNormalsTextureProvider/properties/BodyNormalsTextureProvider-bodyIndex.md Edit}
    */
    bodyIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyNormalsTextureProvider/properties/BodyNormalsTextureProvider-bodyModel.md Edit}
    
    * @private
    */
    bodyModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyNormalsTextureProvider/properties/BodyNormalsTextureProvider-depthNormalsUVModel.md Edit}
    
    * @private
    */
    depthNormalsUVModel: BinAsset
    
}

/**
* Provider for full Body Mesh render object.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/BodyRenderObjectProvider-description.md Edit}
*/
interface BodyRenderObjectProvider extends RenderObjectProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/methods/BodyRenderObjectProvider-getAnnotationBytes.md Edit}
    
    * @private
    */
    getAnnotationBytes(): Uint8Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/methods/BodyRenderObjectProvider-getAnnotationDescriptorBytes.md Edit}
    
    * @private
    */
    getAnnotationDescriptorBytes(): Uint8Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/methods/BodyRenderObjectProvider-getBlendShapeWeights.md Edit}
    
    * @deprecated
    
    * @private
    */
    getBlendShapeWeights(): Float32Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-annotatorOptionsAsset.md Edit}
    
    * @private
    */
    annotatorOptionsAsset: BinAsset
    
    /**
    * Enable main Body Mesh geometry.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-bodyGeometryEnabled.md Edit}
    */
    bodyGeometryEnabled: boolean
    
    /**
    * Index of body in scene to track.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-bodyIndex.md Edit}
    */
    bodyIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-bodyModel.md Edit}
    
    * @private
    */
    bodyModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-handModel.md Edit}
    
    * @private
    */
    handModel: BinAsset
    
    /**
    * Enable head mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-headGeometryEnabled.md Edit}
    */
    headGeometryEnabled: boolean
    
    /**
    * Enable left hand mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-leftHandGeometryEnabled.md Edit}
    */
    leftHandGeometryEnabled: boolean
    
    /**
    * Enable right hand mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-rightHandGeometryEnabled.md Edit}
    */
    rightHandGeometryEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyRenderObjectProvider/properties/BodyRenderObjectProvider-useAccurateDepth.md Edit}
    
    * @private
    */
    useAccurateDepth: boolean
    
}

/**
* Asset used to configure Body Tracking for the [ObjectTracking3D](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ObjectTracking3D) component.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/BodyTrackingAsset-description.md Edit}
*/
interface BodyTrackingAsset extends Object3DAsset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-annotatorOptionsAsset.md Edit}
    
    * @private
    */
    annotatorOptionsAsset: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-bodyModel.md Edit}
    
    * @private
    */
    bodyModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-handModel.md Edit}
    
    * @private
    */
    handModel: BinAsset
    
    /**
    * When true, hand tracking will be enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-handTrackingEnabled.md Edit}
    */
    handTrackingEnabled: boolean
    
}
declare namespace BodyTrackingAsset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/methods/BodyTrackingAsset-create.md Edit}
    
    * @deprecated
    
    * @private
    */
    export function create(options: BodyTrackingAssetOptions): BodyTrackingAsset
    
    /**
    * Key for Head attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-Head.md Edit}
    */
    let Head: string
    
    /**
    * Key for Hips attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-Hips.md Edit}
    */
    let Hips: string
    
    /**
    * Key for Left Arm attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftArm.md Edit}
    */
    let LeftArm: string
    
    /**
    * Key for Left Foot attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftFoot.md Edit}
    */
    let LeftFoot: string
    
    /**
    * Key for Left Forearm attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftForeArm.md Edit}
    */
    let LeftForeArm: string
    
    /**
    * Key for Left Hand attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHand.md Edit}
    */
    let LeftHand: string
    
    /**
    * Key for Left Hand Index 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandIndex1.md Edit}
    */
    let LeftHandIndex1: string
    
    /**
    * Key for Left Hand Index 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandIndex2.md Edit}
    */
    let LeftHandIndex2: string
    
    /**
    * Key for Left Hand Index 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandIndex3.md Edit}
    */
    let LeftHandIndex3: string
    
    /**
    * Key for Left Hand Middle 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandMiddle1.md Edit}
    */
    let LeftHandMiddle1: string
    
    /**
    * Key for Left Hand Middle 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandMiddle2.md Edit}
    */
    let LeftHandMiddle2: string
    
    /**
    * Key for Left Hand Middle 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandMiddle3.md Edit}
    */
    let LeftHandMiddle3: string
    
    /**
    * Key for Left Hand Pinky 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandPinky1.md Edit}
    */
    let LeftHandPinky1: string
    
    /**
    * Key for Left Hand Pinky 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandPinky2.md Edit}
    */
    let LeftHandPinky2: string
    
    /**
    * Key for Left Hand Pinky 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandPinky3.md Edit}
    */
    let LeftHandPinky3: string
    
    /**
    * Key for Left Hand Ring 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandRing1.md Edit}
    */
    let LeftHandRing1: string
    
    /**
    * Key for Left Hand Ring 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandRing2.md Edit}
    */
    let LeftHandRing2: string
    
    /**
    * Key for Left Hand Ring 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandRing3.md Edit}
    */
    let LeftHandRing3: string
    
    /**
    * Key for Left Hand Thumb 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandThumb1.md Edit}
    */
    let LeftHandThumb1: string
    
    /**
    * Key for Left Hand Thumb 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandThumb2.md Edit}
    */
    let LeftHandThumb2: string
    
    /**
    * Key for Left Hand Thumb 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftHandThumb3.md Edit}
    */
    let LeftHandThumb3: string
    
    /**
    * Key for Left Leg attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftLeg.md Edit}
    */
    let LeftLeg: string
    
    /**
    * Key for Left Shoulder attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftShoulder.md Edit}
    */
    let LeftShoulder: string
    
    /**
    * Key for Left Toe Base attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftToeBase.md Edit}
    */
    let LeftToeBase: string
    
    /**
    * Key for Upper Left Leg attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-LeftUpLeg.md Edit}
    */
    let LeftUpLeg: string
    
    /**
    * Key for Neck attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-Neck.md Edit}
    */
    let Neck: string
    
    /**
    * Key for Right Arm attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightArm.md Edit}
    */
    let RightArm: string
    
    /**
    * Key for Right Foot attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightFoot.md Edit}
    */
    let RightFoot: string
    
    /**
    * Key for Right Forearm attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightForeArm.md Edit}
    */
    let RightForeArm: string
    
    /**
    * Key for Right Hand attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHand.md Edit}
    */
    let RightHand: string
    
    /**
    * Key for Right Hand Index 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandIndex1.md Edit}
    */
    let RightHandIndex1: string
    
    /**
    * Key for Right Hand Index 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandIndex2.md Edit}
    */
    let RightHandIndex2: string
    
    /**
    * Key for Right Hand Index 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandIndex3.md Edit}
    */
    let RightHandIndex3: string
    
    /**
    * Key for Right Hand Middle 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandMiddle1.md Edit}
    */
    let RightHandMiddle1: string
    
    /**
    * Key for Right Hand Middle 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandMiddle2.md Edit}
    */
    let RightHandMiddle2: string
    
    /**
    * Key for Right Hand Middle 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandMiddle3.md Edit}
    */
    let RightHandMiddle3: string
    
    /**
    * Key for Right Hand Pinky 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandPinky1.md Edit}
    */
    let RightHandPinky1: string
    
    /**
    * Key for Right Hand Pinky 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandPinky2.md Edit}
    */
    let RightHandPinky2: string
    
    /**
    * Key for Right Hand Pinky 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandPinky3.md Edit}
    */
    let RightHandPinky3: string
    
    /**
    * Key for Right Hand Ring 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandRing1.md Edit}
    */
    let RightHandRing1: string
    
    /**
    * Key for Right Hand Ring 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandRing2.md Edit}
    */
    let RightHandRing2: string
    
    /**
    * Key for Right Hand Ring 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandRing3.md Edit}
    */
    let RightHandRing3: string
    
    /**
    * Key for Right Hand Thumb 1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandThumb1.md Edit}
    */
    let RightHandThumb1: string
    
    /**
    * Key for Right Hand Thumb 2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandThumb2.md Edit}
    */
    let RightHandThumb2: string
    
    /**
    * Key for Right Hand Thumb 3 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightHandThumb3.md Edit}
    */
    let RightHandThumb3: string
    
    /**
    * Key for Right Leg attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightLeg.md Edit}
    */
    let RightLeg: string
    
    /**
    * Key for Right Shoulder attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightShoulder.md Edit}
    */
    let RightShoulder: string
    
    /**
    * Key for Right Toe Base attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightToeBase.md Edit}
    */
    let RightToeBase: string
    
    /**
    * Key for Upper Right Leg attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-RightUpLeg.md Edit}
    */
    let RightUpLeg: string
    
    /**
    * Key for Spine attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-Spine.md Edit}
    */
    let Spine: string
    
    /**
    * Key for Spine1 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-Spine1.md Edit}
    */
    let Spine1: string
    
    /**
    * Key for Spine2 attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAsset/properties/BodyTrackingAsset-Spine2.md Edit}
    */
    let Spine2: string
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAssetOptions/BodyTrackingAssetOptions-description.md Edit}

* @private
*/
interface BodyTrackingAssetOptions extends ScriptObject {
}
declare namespace BodyTrackingAssetOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BodyTrackingAssetOptions/methods/BodyTrackingAssetOptions-create.md Edit}
    
    * @deprecated
    
    * @private
    */
    export function create(): BodyTrackingAssetOptions
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/BoundedVideoTextureProvider-description.md Edit}

* @private
*/
interface BoundedVideoTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/methods/BoundedVideoTextureProvider-loop.md Edit}
    
    * @private
    */
    loop(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/methods/BoundedVideoTextureProvider-pause.md Edit}
    
    * @private
    */
    pause(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/methods/BoundedVideoTextureProvider-play.md Edit}
    
    * @private
    */
    play(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/methods/BoundedVideoTextureProvider-seekSeconds.md Edit}
    
    * @private
    */
    seekSeconds(value: number): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/methods/BoundedVideoTextureProvider-setOnPlaybackReady.md Edit}
    
    * @private
    */
    setOnPlaybackReady(value: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/methods/BoundedVideoTextureProvider-setOnTextureUpdated.md Edit}
    
    * @private
    */
    setOnTextureUpdated(value: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/methods/BoundedVideoTextureProvider-stop.md Edit}
    
    * @private
    */
    stop(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-currentTimeSec.md Edit}
    
    * @readonly
    
    * @private
    */
    currentTimeSec: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-durationSec.md Edit}
    
    * @readonly
    
    * @private
    */
    durationSec: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-isLooped.md Edit}
    
    * @readonly
    
    * @private
    */
    isLooped: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-isPlaybackReady.md Edit}
    
    * @readonly
    
    * @private
    */
    isPlaybackReady: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-isPlaying.md Edit}
    
    * @readonly
    
    * @private
    */
    isPlaying: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-isValid.md Edit}
    
    * @readonly
    
    * @private
    */
    isValid: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-lastTextureTimeSec.md Edit}
    
    * @readonly
    
    * @private
    */
    lastTextureTimeSec: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-playbackRelEnd.md Edit}
    
    * @private
    */
    playbackRelEnd: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-playbackRelStart.md Edit}
    
    * @private
    */
    playbackRelStart: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundedVideoTextureProvider/properties/BoundedVideoTextureProvider-volume.md Edit}
    
    * @private
    */
    volume: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundingBox/BoundingBox-description.md Edit}

* @private
*/
declare class BoundingBox {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundingBox/methods/BoundingBox-BoundingBox.md Edit}
    
    * @private
    */
    constructor(arg1: number, arg2: number, arg3: number, arg4: number)
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundingBox/methods/BoundingBox-getSize.md Edit}
    
    * @private
    */
    getSize(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundingBox/properties/BoundingBox-xMax.md Edit}
    
    * @private
    */
    xMax: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundingBox/properties/BoundingBox-xMin.md Edit}
    
    * @private
    */
    xMin: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundingBox/properties/BoundingBox-yMax.md Edit}
    
    * @private
    */
    yMax: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoundingBox/properties/BoundingBox-yMin.md Edit}
    
    * @private
    */
    yMin: number
    
}

/**
* A box collision shape.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoxShape/BoxShape-description.md Edit}
*/
interface BoxShape extends Shape {
    /**
    * The size of the box on each local axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BoxShape/properties/BoxShape-size.md Edit}
    */
    size: vec3
    
}

/**
* Triggered when eyebrows are lowered on the tracked face.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BrowsLoweredEvent/BrowsLoweredEvent-description.md Edit}
*/
interface BrowsLoweredEvent extends FaceTrackingEvent {
}

/**
* Triggered when eyebrows are raised on the tracked face.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BrowsRaisedEvent/BrowsRaisedEvent-description.md Edit}
*/
interface BrowsRaisedEvent extends FaceTrackingEvent {
}

/**
* Triggered when eyebrows are returned to normal on the tracked face.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/BrowsReturnedToNormalEvent/BrowsReturnedToNormalEvent-description.md Edit}
*/
interface BrowsReturnedToNormalEvent extends FaceTrackingEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameoAsset/CameoAsset-description.md Edit}
*/
interface CameoAsset extends BinAsset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameosPerformanceMode/CameosPerformanceMode-description.md Edit}

* @private
*/
declare enum CameosPerformanceMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameosPerformanceMode/properties/CameosPerformanceMode-None.md Edit}
    
    * @private
    */
    None,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameosPerformanceMode/properties/CameosPerformanceMode-Low.md Edit}
    
    * @private
    */
    Low,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameosPerformanceMode/properties/CameosPerformanceMode-High.md Edit}
    
    * @private
    */
    High
}

/**
* Renders the scene to a Render Target texture.
* A Camera will only render a SceneObject if the SceneObject's render layer is enabled on the Camera.
* For more information, see the [Camera and Layers](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/camera) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/Camera-description.md Edit}
*/
interface Camera extends Component {
    /**
    * Adds layer `id` to the list of layers the Camera will render.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-addRenderLayer.md Edit}
    
    * @deprecated
    */
    addRenderLayer(id: number): void
    
    /**
    * Returns whether rendering layer `id` is enabled for the Camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-checkRenderLayer.md Edit}
    
    * @deprecated
    */
    checkRenderLayer(id: number): boolean
    
    /**
    * Returns a list of 32 numbers, one for every render layer. Values will either be 0 or 1, 0 meaning the Camera won't render the layer and 1 meaning it will.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-getAllRenderLayers.md Edit}
    
    * @deprecated
    */
    getAllRenderLayers(): number[]
    
    /**
    * For orthographic cameras, returns the camera size as (width, height).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-getOrthographicSize.md Edit}
    */
    getOrthographicSize(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-getViewProjectionMatrix.md Edit}
    
    * @private
    */
    getViewProjectionMatrix(): mat4
    
    /**
    * Returns true if a sphere with the specified world space center position and radius is visible within the camera frustum, false otherwise.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-isSphereVisible.md Edit}
    */
    isSphereVisible(center: vec3, radius: number): boolean
    
    /**
    * Converts a world space position to a raw screen space position.
    * The screen space position will be returned as a `vec3` with `x`,`y` representing normalized screen space,
    * and `z` representing a raw depth value not directly convertible to world units.
    * This returned value will mostly be useful for passing into `unproject()`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-project.md Edit}
    */
    project(worldSpacePoint: vec3): vec3
    
    /**
    * Removes layer `id` from the list of layers the Camera will render.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-removeRenderLayer.md Edit}
    
    * @deprecated
    */
    removeRenderLayer(id: number): void
    
    /**
    * Converts a screen space position to a world space position, given an absolute depth.
    * The screen space position should be provided as a `vec2` in the range ([0-1], [0-1]),
    * (0,0) being the top-left of the screen and (1,1) being the bottom-right.
    * The returned world space position will be the point `absoluteDepth` units away from the Camera's
    * `near` plane at the point specified in screen space.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-screenSpaceToWorldSpace.md Edit}
    */
    screenSpaceToWorldSpace(normalizedScreenSpacePoint: vec2, absoluteDepth: number): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-trackingCameraScreenSpaceToWorldSpace.md Edit}
    
    * @private
    */
    trackingCameraScreenSpaceToWorldSpace(normalizedScreenSpacePoint: vec2, absoluteDepth: number): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-trackingCameraSpaceToWorldSpace.md Edit}
    
    * @private
    */
    trackingCameraSpaceToWorldSpace(trackingCameraPoint: vec3): vec3
    
    /**
    * Converts a raw screen space position to a world space position.
    * `clipSpacePoint` should be a `vec3` returned from a previous `project()` call, since the
    * `z` value represents a raw depth value not directly convertible to world units.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-unproject.md Edit}
    */
    unproject(clipSpacePoint: vec3): vec3
    
    /**
    * Converts the world space position `worldSpacePoint` to a screen space position.
    * Screen positions are represented in the range ([0-1], [0-1]), (0,0) being the top-left of the screen and (1,1) being the bottom-right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-worldSpaceToScreenSpace.md Edit}
    */
    worldSpaceToScreenSpace(worldSpacePoint: vec3): vec2
    
    /**
    * The aspect ratio of the camera (width/height).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-aspect.md Edit}
    */
    aspect: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-cameraMaskChannel.md Edit}
    
    * @private
    */
    cameraMaskChannel: Camera.CameraMaskChannel
    
    /**
    * When `enableClearColor` is true and `inputTexture` is null, this color is used to clear this Camera's `renderTarget` before drawing to it.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-clearColor.md Edit}
    */
    clearColor: vec4
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-clearColorOption.md Edit}
    
    * @deprecated
    
    * @private
    */
    clearColorOption: ClearColorOption
    
    /**
    * Returns an array of Color Render Targets. The first color render target is always available.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-colorRenderTargets.md Edit}
    */
    colorRenderTargets: Camera.ColorRenderTarget[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-debugRender.md Edit}
    
    * @readonly
    
    * @private
    */
    debugRender: DebugRender
    
    /**
    * Determines the way depth is handled on this Camera. Changing this can help sort objects at different distance ranges.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-depthBufferMode.md Edit}
    */
    depthBufferMode: Camera.DepthBufferMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-depthClearOption.md Edit}
    
    * @deprecated
    
    * @private
    */
    depthClearOption: DepthClearOption
    
    /**
    * Descriptor of depth/stencil textures and clear options.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-depthStencilRenderTarget.md Edit}
    */
    depthStencilRenderTarget: Camera.DepthStencilRenderTarget
    
    /**
    * Controls which Camera settings will be overridden by physical device properties.
    * For example, this can be used to override the `fov` property to match the device camera's actual field of view.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-devicePropertyUsage.md Edit}
    */
    devicePropertyUsage: Camera.DeviceProperty
    
    /**
    * If enabled, this Camera will clear the color on its `renderTarget` before drawing to it.
    * `inputTexture` will be used to clear it unless it is null, in which case `clearColor` is used instead.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-enableClearColor.md Edit}
    */
    enableClearColor: boolean
    
    /**
    * If enabled, this Camera will clear the depth buffer on its `renderTarget` before drawing to it.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-enableClearDepth.md Edit}
    */
    enableClearDepth: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-extents.md Edit}
    
    * @private
    */
    extents: Rect
    
    /**
    * The distance of the far clipping plane.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-far.md Edit}
    */
    far: number
    
    /**
    * The Camera's field of view in radians.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-fov.md Edit}
    */
    fov: number
    
    /**
    * When `enableClearColor` is true, this texture is used to clear this Camera's `renderTarget` before drawing.
    * If this texture is null, `clearColor` will be used instead.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-inputTexture.md Edit}
    */
    inputTexture: Texture
    
    /**
    * If true, the camera FOV will be overridden to match the device's physical camera FOV.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-isPhysical.md Edit}
    
    * @deprecated
    */
    isPhysical: boolean
    
    /**
    * A texture controlling which parts of the output texture the camera will draw to.
    * The "red" value of each pixel determines how strongly the camera will draw to that part of the image.
    * For example, a completely black section will cause the camera to not draw there at all. A completely
    * white (or red) section will cause the camera to draw normally. Colors in between, like gray, will be semitransparent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-maskTexture.md Edit}
    */
    maskTexture: Texture
    
    /**
    * The distance of the near clipping plane.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-near.md Edit}
    */
    near: number
    
    /**
    * Toggles ray tracing for the camera. When true, ray tracing is enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-rayTracing.md Edit}
    */
    rayTracing: boolean
    
    /**
    * Controls the set of layers this Camera will render.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-renderLayer.md Edit}
    */
    renderLayer: LayerSet
    
    /**
    * The sorting order the Camera renders in. Every frame, Cameras render in ascending order determined by their `renderOrder` properties.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-renderOrder.md Edit}
    */
    renderOrder: number
    
    /**
    * The RenderTarget this Camera will draw to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-renderTarget.md Edit}
    */
    renderTarget: Texture
    
    /**
    * Sets which face of the cubemap this camera will render to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-renderTargetCubemapFace.md Edit}
    */
    renderTargetCubemapFace: Camera.CubemapFace
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-renderTargetMipmapLevel.md Edit}
    
    * @private
    */
    renderTargetMipmapLevel: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-renderTargetSlice.md Edit}
    
    * @private
    */
    renderTargetSlice: number
    
    /**
    * The orthographic size of the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-size.md Edit}
    */
    size: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-ssao.md Edit}
    
    * @private
    */
    ssao: SSAO.Settings
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-stencilClearOption.md Edit}
    
    * @deprecated
    
    * @private
    */
    stencilClearOption: StencilClearOption
    
    /**
    * Returns a number of hardware supported render targets. The max number is 4. If the device doesnt support Multiple Render Targets this property equals 1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-supportedColorRenderTargetCount.md Edit}
    
    * @deprecated
    
    * @readonly
    */
    supportedColorRenderTargetCount: number
    
    /**
    * Controls which type of rendering the camera uses.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/properties/Camera-type.md Edit}
    */
    type: Camera.Type
    
}
declare namespace Camera {
    /**
    * Creates and returns a new Color Render Target.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-createColorRenderTarget.md Edit}
    */
    export function createColorRenderTarget(): Camera.ColorRenderTarget
    
    /**
    * Create a depth/stencil render target descriptor for the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-createDepthStencilRenderTarget.md Edit}
    */
    export function createDepthStencilRenderTarget(): Camera.DepthStencilRenderTarget
    
    /**
    * Return true if the device supports stencil operations and render to depth texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-depthStencilRenderTargetSupported.md Edit}
    */
    export function depthStencilRenderTargetSupported(): boolean
    
    /**
    * Returns the number of possible render target bindings to the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera/methods/Camera-getSupportedColorRenderTargetCount.md Edit}
    */
    export function getSupportedColorRenderTargetCount(): number
    

}

declare namespace Camera {
    /**
    * The base class from which ColorRenderTarget and DepthStencilRenderTarget are derived from
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.BaseRenderTarget/Camera.BaseRenderTarget-description.md Edit}
    */
    interface BaseRenderTarget extends ScriptObject {
        /**
        * Color texture used in clear color operation in "CustomTexture" mode.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.BaseRenderTarget/properties/Camera.BaseRenderTarget-inputTexture.md Edit}
        */
        inputTexture: Texture
        
        /**
        * Texture used like a color mask for target texture.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.BaseRenderTarget/properties/Camera.BaseRenderTarget-maskTexture.md Edit}
        */
        maskTexture: Texture
        
        /**
        * Render target texture. Camera will render scene color values to this texture.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.BaseRenderTarget/properties/Camera.BaseRenderTarget-targetTexture.md Edit}
        */
        targetTexture: Texture
        
    }

}

declare namespace Camera {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CameraMaskChannel/Camera.CameraMaskChannel-description.md Edit}
    
    * @private
    */
    enum CameraMaskChannel {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CameraMaskChannel/properties/Camera.CameraMaskChannel-UseR.md Edit}
        
        * @private
        */
        UseR,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CameraMaskChannel/properties/Camera.CameraMaskChannel-UseRGBA.md Edit}
        
        * @private
        */
        UseRGBA,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CameraMaskChannel/properties/Camera.CameraMaskChannel-UseA.md Edit}
        
        * @private
        */
        UseA
    }

}

declare namespace Camera {
    /**
    * Color based RenderTarget.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.ColorRenderTarget/Camera.ColorRenderTarget-description.md Edit}
    */
    interface ColorRenderTarget extends Camera.BaseRenderTarget {
        /**
        * Sets the clear color of the camera when its `clearColorOption` is set to `ClearColorOption.CustomColor`
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.ColorRenderTarget/properties/Camera.ColorRenderTarget-clearColor.md Edit}
        */
        clearColor: vec4
        
        /**
        * Sets how the RenderTarget's color will be cleared before rendering during each frame.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.ColorRenderTarget/properties/Camera.ColorRenderTarget-clearColorOption.md Edit}
        */
        clearColorOption: ClearColorOption
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.ColorRenderTarget/properties/Camera.ColorRenderTarget-maskChannel.md Edit}
        
        * @private
        */
        maskChannel: Camera.CameraMaskChannel
        
    }

}

declare namespace Camera {
    /**
    * Different faces of the cubemap that a camera can render into.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/Camera.CubemapFace-description.md Edit}
    */
    enum CubemapFace {
        /**
        * The positive X cubemap face.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-PositiveX.md Edit}
        */
        PositiveX,
        /**
        * The negative X cubemap face.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-NegativeX.md Edit}
        */
        NegativeX,
        /**
        * The positive Y cubemap face.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-PositiveY.md Edit}
        */
        PositiveY,
        /**
        * The negative Y cubemap face.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-NegativeY.md Edit}
        */
        NegativeY,
        /**
        * The positive Z cubemap face.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-PositiveZ.md Edit}
        */
        PositiveZ,
        /**
        * The negative Z cubemap face.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-NegativeZ.md Edit}
        */
        NegativeZ,
        /**
        * The left cubemap face, same as NegativeX.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-Left.md Edit}
        */
        Left,
        /**
        * The right cubemap face, same as PositiveX.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-Right.md Edit}
        */
        Right,
        /**
        * The top cubemap face, same as PositiveY.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-Top.md Edit}
        */
        Top,
        /**
        * The bottom cubemap face, same as NegativeY.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-Bottom.md Edit}
        */
        Bottom,
        /**
        * The front cubemap face, same as PositiveZ.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-Front.md Edit}
        */
        Front,
        /**
        * The back cubemap face, same as NegativeZ.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.CubemapFace/properties/Camera.CubemapFace-Back.md Edit}
        */
        Back
    }

}

declare namespace Camera {
    /**
    * Used in [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `depthBufferMode` property.
    * Each mode is suited for handling objects at a certain distance range.
    * For more information on depth modes, see the [Camera and Layers](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/camera) guide.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthBufferMode/Camera.DepthBufferMode-description.md Edit}
    */
    enum DepthBufferMode {
        /**
        * Gives higher depth precision on nearby objects, so is better suited for scenes near to the camera.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthBufferMode/properties/Camera.DepthBufferMode-Regular.md Edit}
        */
        Regular,
        /**
        * Gives higher depth precision on far away objects, so is better suited for scenes far away from the camera.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthBufferMode/properties/Camera.DepthBufferMode-Logarithmic.md Edit}
        */
        Logarithmic
    }

}

declare namespace Camera {
    /**
    * This class inherits from the BaseRenderTarget class. BaseRenderTarget class is not available for creation and is used like the base class for DepthStencilRenderTarget class to provide access to targetTexture, inputTexture and maskTexture properties.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthStencilRenderTarget/Camera.DepthStencilRenderTarget-description.md Edit}
    */
    interface DepthStencilRenderTarget extends Camera.BaseRenderTarget {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthStencilRenderTarget/properties/Camera.DepthStencilRenderTarget-clearDepth.md Edit}
        
        * @deprecated
        
        * @private
        */
        clearDepth: number
        
        /**
        * Float value in range [0.0..1.0] used in depth buffer clear operation in "CustomValue" mode. The initial value is 1.0.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthStencilRenderTarget/properties/Camera.DepthStencilRenderTarget-clearDepthValue.md Edit}
        */
        clearDepthValue: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthStencilRenderTarget/properties/Camera.DepthStencilRenderTarget-clearStencil.md Edit}
        
        * @deprecated
        
        * @private
        */
        clearStencil: number
        
        /**
        * Unsigned int value in range [0..0xFF] used in stencil buffer clear operation in "CustomValue" mode. The initial value is 0.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthStencilRenderTarget/properties/Camera.DepthStencilRenderTarget-clearStencilValue.md Edit}
        */
        clearStencilValue: number
        
        /**
        * The same as "depthClearOption" property of DepthStencilRenderTargetProvider. But if Camera's depth clear option property is set to "CustomValue" or "CustomTexture" then this has priority over depth/stencil provider settings.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthStencilRenderTarget/properties/Camera.DepthStencilRenderTarget-depthClearOption.md Edit}
        */
        depthClearOption: DepthClearOption
        
        /**
        * The same as "stencilClearOption" property of DepthStencilRenderTargetProvider. But if Camera's stencil clear option property is set to "CustomValue" or "CustomTexture" then this has priority over depth/stencil provider settings.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DepthStencilRenderTarget/properties/Camera.DepthStencilRenderTarget-stencilClearOption.md Edit}
        */
        stencilClearOption: StencilClearOption
        
    }

}

declare namespace Camera {
    /**
    * Used in [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `devicePropertyUsage` property.
    * Specifies which camera properties should be overridden by device properties.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DeviceProperty/Camera.DeviceProperty-description.md Edit}
    */
    enum DeviceProperty {
        /**
        * No Camera properties are overridden with device properties.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DeviceProperty/properties/Camera.DeviceProperty-None.md Edit}
        */
        None,
        /**
        * Overrides the Camera's `aspect` property to use the device's aspect ratio instead.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DeviceProperty/properties/Camera.DeviceProperty-Aspect.md Edit}
        */
        Aspect,
        /**
        * Overrides the Camera's `fov` property to use the device's field of view instead.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DeviceProperty/properties/Camera.DeviceProperty-Fov.md Edit}
        */
        Fov,
        /**
        * Overrides both `aspect` and `fov` with the device's properties.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.DeviceProperty/properties/Camera.DeviceProperty-All.md Edit}
        */
        All
    }

}

declare namespace Camera {
    /**
    * Returned from [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `type` property.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.Type/Camera.Type-description.md Edit}
    */
    enum Type {
        /**
        * Simulates how perspective and depth perception work in the real world. Useful for rendering objects in 3D space.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.Type/properties/Camera.Type-Perspective.md Edit}
        */
        Perspective,
        /**
        * Does not simulate perspective distortion. Useful for 2D effects like Images and Text.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Camera.Type/properties/Camera.Type-Orthographic.md Edit}
        */
        Orthographic
    }

}

/**
* Triggered when the device's back facing camera becomes active.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraBackEvent/CameraBackEvent-description.md Edit}
*/
interface CameraBackEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraFrame/CameraFrame-description.md Edit}

* @experimental

* @exposesUserData

* @snapOsOnly
*/
interface CameraFrame extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraFrame/properties/CameraFrame-timestampMillis.md Edit}
    
    * @readonly
    */
    timestampMillis: number
    
}

/**
* Triggered when the device's front facing camera becomes active.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraFrontEvent/CameraFrontEvent-description.md Edit}
*/
interface CameraFrontEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule/CameraModule-description.md Edit}

* @experimental

* @exposesUserData

* @snapOsOnly
*/
interface CameraModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule/methods/CameraModule-requestCamera.md Edit}
    */
    requestCamera(request: CameraModule.CameraRequest): Texture
    
}
declare namespace CameraModule {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule/methods/CameraModule-createCameraRequest.md Edit}
    
    * @experimental
    
    * @exposesUserData
    
    * @snapOsOnly
    */
    export function createCameraRequest(): CameraModule.CameraRequest
    

}

declare namespace CameraModule {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule.CameraId/CameraModule.CameraId-description.md Edit}
    
    * @experimental
    
    * @exposesUserData
    
    * @snapOsOnly
    */
    enum CameraId {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule.CameraId/properties/CameraModule.CameraId-Default_Color.md Edit}
        */
        Default_Color,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule.CameraId/properties/CameraModule.CameraId-Left_Color.md Edit}
        */
        Left_Color,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule.CameraId/properties/CameraModule.CameraId-Right_Color.md Edit}
        */
        Right_Color
    }

}

declare namespace CameraModule {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule.CameraRequest/CameraModule.CameraRequest-description.md Edit}
    
    * @experimental
    
    * @exposesUserData
    
    * @snapOsOnly
    */
    interface CameraRequest extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule.CameraRequest/properties/CameraModule.CameraRequest-cameraId.md Edit}
        */
        cameraId: CameraModule.CameraId
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraModule.CameraRequest/properties/CameraModule.CameraRequest-imageSmallerDimension.md Edit}
        */
        imageSmallerDimension?: number
        
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraRawModule/CameraRawModule-description.md Edit}

* @private
*/
interface CameraRawModule extends Asset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraTextureProvider/CameraTextureProvider-description.md Edit}
*/
interface CameraTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraTextureProvider/properties/CameraTextureProvider-onNewFrame.md Edit}
    
    * @readonly
    
    * @experimental
    
    * @exposesUserData
    
    * @snapOsOnly
    */
    onNewFrame: event1<CameraFrame, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CameraTextureProvider/properties/CameraTextureProvider-timestampSeconds.md Edit}
    
    * @readonly
    
    * @private
    */
    timestampSeconds: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CandideUpdatedEvent/CandideUpdatedEvent-description.md Edit}

* @unreleased
*/
interface CandideUpdatedEvent extends FaceTrackingEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CandideUpdatedEvent/properties/CandideUpdatedEvent-points2d.md Edit}
    
    * @unreleased
    
    * @readonly
    */
    points2d: vec2[]
    
}

/**
* A 2D canvas anchored in 3D space that acts as the root of the ScreenTransform hierarchy. ScreenTransform SceneObjects can be placed on the Canvas, and the Canvas can be sized and placed anywhere in 3D space. It is like a painter’s canvas for ScreenTransforms.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas/Canvas-description.md Edit}
*/
interface Canvas extends Component {
    /**
    * Get size of rectangle as (width, height)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas/methods/Canvas-getSize.md Edit}
    */
    getSize(): vec2
    
    /**
    * Set size of rectangle as (width, height)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas/methods/Canvas-setSize.md Edit}
    */
    setSize(value: vec2): void
    
    /**
    * The point about which the Canvas Rectangle will rotate. Defined as fractional coordinates of the Canvas's dimensions. e.g. (1 , 1) brings the pivot to the top right corner of the canvas. Or (0.5, 0) moves the pivot to the right by half the canvas width.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas/properties/Canvas-pivot.md Edit}
    */
    pivot: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas/properties/Canvas-sortingType.md Edit}
    */
    sortingType: Canvas.SortingType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas/properties/Canvas-unitType.md Edit}
    */
    unitType: Canvas.UnitType
    
    /**
    * World Space Rectangle that defines the Canvas as offsets in world units from the SceneObject's position
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas/properties/Canvas-worldSpaceRect.md Edit}
    */
    worldSpaceRect: Rect
    
}

declare namespace Canvas {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas.SortingType/Canvas.SortingType-description.md Edit}
    */
    enum SortingType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas.SortingType/properties/Canvas.SortingType-Hierarchy.md Edit}
        */
        Hierarchy,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas.SortingType/properties/Canvas.SortingType-Depth.md Edit}
        */
        Depth
    }

}

declare namespace Canvas {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas.UnitType/Canvas.UnitType-description.md Edit}
    */
    enum UnitType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas.UnitType/properties/Canvas.UnitType-World.md Edit}
        */
        World,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas.UnitType/properties/Canvas.UnitType-Pixels.md Edit}
        */
        Pixels,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Canvas.UnitType/properties/Canvas.UnitType-Points.md Edit}
        */
        Points
    }

}

/**
* Changes the capitalization of the text component. Useful when using dynamic texts.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CapitilizationOverride/CapitilizationOverride-description.md Edit}
*/
declare enum CapitilizationOverride {
    /**
    * Display the capitalization of the displayed text as provided.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CapitilizationOverride/properties/CapitilizationOverride-None.md Edit}
    */
    None,
    /**
    * Sets the capitalization of the displayed text to lowercase.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CapitilizationOverride/properties/CapitilizationOverride-AllLower.md Edit}
    */
    AllLower,
    /**
    * Sets the capitalization of the displayed text to uppercase.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CapitilizationOverride/properties/CapitilizationOverride-AllUpper.md Edit}
    */
    AllUpper
}

/**
* A capsule collision shape. Also known as a capped cylinder.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CapsuleShape/CapsuleShape-description.md Edit}
*/
interface CapsuleShape extends Shape {
    /**
    * Lengthwise local axis along which the capsule is oriented.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CapsuleShape/properties/CapsuleShape-axis.md Edit}
    */
    axis: Axis
    
    /**
    * Length of the capsule along its local axis. This is the distance between the two end-cap centers.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CapsuleShape/properties/CapsuleShape-length.md Edit}
    */
    length: number
    
    /**
    * Radius of the capsule cylinder, and its end-cap spheres.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CapsuleShape/properties/CapsuleShape-radius.md Edit}
    */
    radius: number
    
}

/**
* Settings for how color will be cleared before rendering.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearColorOption/ClearColorOption-description.md Edit}
*/
declare enum ClearColorOption {
    /**
    * The frame will not be cleared before being rendered to (draws over the previous frame).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearColorOption/properties/ClearColorOption-None.md Edit}
    */
    None,
    /**
    * Use the Device Texture for the color color
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearColorOption/properties/ClearColorOption-Background.md Edit}
    */
    Background,
    /**
    * The frame will be cleared with a color before being rendered to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearColorOption/properties/ClearColorOption-CustomColor.md Edit}
    */
    CustomColor,
    /**
    * The frame will be cleared with a texture before being rendered to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearColorOption/properties/ClearColorOption-CustomTexture.md Edit}
    */
    CustomTexture
}

/**
* Clears depth in the drawing order.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearScreen/ClearScreen-description.md Edit}
*/
interface ClearDepth extends Visual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearScreen/properties/ClearScreen-clearColor.md Edit}
    
    * @private
    */
    clearColor: vec4
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearScreen/properties/ClearScreen-clearDepth.md Edit}
    
    * @private
    */
    clearDepth: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearScreen/properties/ClearScreen-clearStencil.md Edit}
    
    * @private
    */
    clearStencil: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearScreen/properties/ClearScreen-colorMask.md Edit}
    
    * @private
    */
    colorMask: vec4b
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearScreen/properties/ClearScreen-depthMask.md Edit}
    
    * @private
    */
    depthMask: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClearScreen/properties/ClearScreen-stencilMask.md Edit}
    
    * @private
    */
    stencilMask: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceAction/ClientInterfaceAction-description.md Edit}

* @private
*/
declare enum ClientInterfaceAction {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceAction/properties/ClientInterfaceAction-EnableHighlight.md Edit}
    
    * @private
    */
    EnableHighlight,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceAction/properties/ClientInterfaceAction-DisableHighlight.md Edit}
    
    * @private
    */
    DisableHighlight,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceAction/properties/ClientInterfaceAction-Trigger.md Edit}
    
    * @private
    */
    Trigger,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceAction/properties/ClientInterfaceAction-Hide.md Edit}
    
    * @private
    */
    Hide,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceAction/properties/ClientInterfaceAction-Show.md Edit}
    
    * @private
    */
    Show
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceActionTakenEvent/ClientInterfaceActionTakenEvent-description.md Edit}

* @private
*/
interface ClientInterfaceActionTakenEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceComponent/ClientInterfaceComponent-description.md Edit}

* @private
*/
interface ClientInterfaceComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceComponent/methods/ClientInterfaceComponent-hideClientInterface.md Edit}
    
    * @private
    */
    hideClientInterface(interfaceType: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceComponent/methods/ClientInterfaceComponent-isClientInterfaceActive.md Edit}
    
    * @private
    */
    isClientInterfaceActive(interfaceType: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceComponent/methods/ClientInterfaceComponent-performAction.md Edit}
    
    * @private
    */
    performAction(interfaceControl: string, action: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceComponent/methods/ClientInterfaceComponent-showClientInterface.md Edit}
    
    * @private
    */
    showClientInterface(interfaceControl: string, headerId: string, descriptionId: string): boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/ClientInterfaceElement-description.md Edit}

* @private
*/
declare enum ClientInterfaceElement {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-ToggleCameraButton.md Edit}
    
    * @private
    */
    ToggleCameraButton,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-ImagePicker.md Edit}
    
    * @private
    */
    ImagePicker,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-Modal.md Edit}
    
    * @private
    */
    Modal,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-Hint.md Edit}
    
    * @private
    */
    Hint,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-LinkBitmojiCallToAction.md Edit}
    
    * @private
    */
    LinkBitmojiCallToAction,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-SnapButton.md Edit}
    
    * @private
    */
    SnapButton,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-PlayButton.md Edit}
    
    * @private
    */
    PlayButton,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-All.md Edit}
    
    * @private
    */
    All,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-ExitFullScreenButton.md Edit}
    
    * @private
    */
    ExitFullScreenButton,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceElement/properties/ClientInterfaceElement-LensAttachmentButton.md Edit}
    
    * @private
    */
    LensAttachmentButton
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/ClientInterfaceSystem-description.md Edit}

* @private
*/
interface ClientInterfaceSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-enableExternalImageApi.md Edit}
    
    * @deprecated
    
    * @private
    */
    enableExternalImageApi(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-getSystemInterfaceElementSize.md Edit}
    
    * @private
    */
    getSystemInterfaceElementSize(interfaceElement: SystemInterfaceElement): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-hideInterfaceElement.md Edit}
    
    * @private
    */
    hideInterfaceElement(interfaceElement: DeviceUIElement): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-isInterfaceControlVisible.md Edit}
    
    * @deprecated
    
    * @private
    */
    isInterfaceControlVisible(interfaceControl: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-isInterfaceElementVisible.md Edit}
    
    * @private
    */
    isInterfaceElementVisible(interfaceElement: DeviceUIElement): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-perform.md Edit}
    
    * @private
    */
    perform(interfaceElement: DeviceUIElement, action: DeviceUIAction): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-performAction.md Edit}
    
    * @deprecated
    
    * @private
    */
    performAction(interfaceControl: string, action: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-saveTextureToGallery.md Edit}
    
    * @private
    */
    saveTextureToGallery(texture: Texture, galleryType: GalleryType, onSuccess: (response: string) => void, onFailure: (error: number, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-setMessageRecipients.md Edit}
    
    * @private
    */
    setMessageRecipients(users: SnapchatUser[], onSuccess: (response: string) => void, onFailure: (error: number, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-setScreenDimmingEnabled.md Edit}
    
    * @private
    */
    setScreenDimmingEnabled(enabled: boolean): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClientInterfaceSystem/methods/ClientInterfaceSystem-showInterfaceElementWithText.md Edit}
    
    * @private
    */
    showInterfaceElementWithText(interfaceElement: DeviceUIElement, headerId: string, descriptionId: string): boolean
    
}

/**
* Handles the mesh data of cloth and prepares it for cloth simulation. Also controls all the parameters of the cloth simulator and colliders.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/ClothVisual-description.md Edit}
*/
interface ClothVisual extends MaterialMeshVisual {
    /**
    * Adds a collider to the list of colliders.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-addCollider.md Edit}
    */
    addCollider(colliderComponent: ColliderComponent): void
    
    /**
    * Clears the colliders list.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-clearColliders.md Edit}
    */
    clearColliders(): void
    
    /**
    * Returns all available vertex colors on cloth mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-getAllColors.md Edit}
    */
    getAllColors(): vec4[]
    
    /**
    * Returns the vertex color by vertex index.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-getPointColorByIndex.md Edit}
    */
    getPointColorByIndex(index: number): vec4
    
    /**
    * Returns all the indices of vertices that are labeled by this color.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-getPointIndicesByColor.md Edit}
    */
    getPointIndicesByColor(color: vec4, colorMask: vec4b): number[]
    
    /**
    * Returns all the indices on the cloth mesh that are matching the color mask. Match means that the color has value on the channels which in colorMask is true.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-getPointIndicesByMask.md Edit}
    */
    getPointIndicesByMask(colorMask: vec4b): number[]
    
    /**
    * Gets binding SceneObject of the vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-getVertexBinding.md Edit}
    */
    getVertexBinding(index: number): SceneObject
    
    /**
    * Gets simulation settings of the vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-getVertexSettings.md Edit}
    */
    getVertexSettings(index: number): VertexSimulationSettings
    
    /**
    * Returns true if the Cloth Simulation feature is supported by the current device.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-isHardwareSupported.md Edit}
    */
    isHardwareSupported(): boolean
    
    /**
    * Returns true if the Cloth Simulation and resources are initialized. Always return false if device is not supported.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-isInitialized.md Edit}
    */
    isInitialized(): boolean
    
    /**
    * Removes collider by its index and returns the removed collider.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-removeColliderByIndex.md Edit}
    */
    removeColliderByIndex(index: number): ColliderComponent
    
    /**
    * Resets the cloth simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-resetSimulation.md Edit}
    */
    resetSimulation(): void
    
    /**
    * Sets the binding SceneObject for the vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-setVertexBinding.md Edit}
    */
    setVertexBinding(index: number, bindingObj: SceneObject): void
    
    /**
    * Sets simulation settings of the vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-setVertexSettings.md Edit}
    */
    setVertexSettings(index: number, vertexSettings: VertexSimulationSettings): void
    
    /**
    * Select bend mode to use (Isometric bending/Linear bending).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-bendMode.md Edit}
    */
    bendMode: ClothVisual.BendMode
    
    /**
    * BendStiffness value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-bendStiffness.md Edit}
    */
    bendStiffness: number
    
    /**
    * BendStiffness value weight on all the VertexSettings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-bendStiffnessVertexWeight.md Edit}
    */
    bendStiffnessVertexWeight: number
    
    /**
    * List of colliders assigned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-colliders.md Edit}
    */
    colliders: ColliderComponent[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-debugModeEnabled.md Edit}
    
    * @private
    */
    debugModeEnabled: boolean
    
    /**
    * The influence of the external body mesh acting on the cloth visual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-externalBodyMeshWeight.md Edit}
    */
    externalBodyMeshWeight: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-frameRate.md Edit}
    
    * @private
    */
    frameRate: number
    
    /**
    * Friction value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-friction.md Edit}
    */
    friction: number
    
    /**
    * Friction value weight on all the VertexSettings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-frictionVertexWeight.md Edit}
    */
    frictionVertexWeight: number
    
    /**
    * Gravity force vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-gravity.md Edit}
    */
    gravity: vec3
    
    /**
    * Number of simulation iterations to perform per each step. Higher number contributes to higher quality, but can be difficult for device performance.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-iterationsPerStep.md Edit}
    */
    iterationsPerStep: number
    
    /**
    * Mass value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-mass.md Edit}
    */
    mass: number
    
    /**
    * Mass value weight on all the VertexSettings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-massVertexWeight.md Edit}
    */
    massVertexWeight: number
    
    /**
    * Control for the acceleration on motion of vertices in cloth simulation, by default set to 2000.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-maxAcceleration.md Edit}
    */
    maxAcceleration: number
    
    /**
    * Whether to merge close vertices (Lens Studio might split vertices when loading FBX mesh). Changing this resets the simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-mergeCloseVerticesEnabled.md Edit}
    */
    mergeCloseVerticesEnabled: boolean
    
    /**
    * Threshold of close vertices. Changing this value resets the simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-mergeCloseVerticesThreshold.md Edit}
    */
    mergeCloseVerticesThreshold: number
    
    /**
    * Attached mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-mesh.md Edit}
    */
    mesh: RenderMesh
    
    /**
    * Function called when the ClothVisual is initialized.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-onInitialized.md Edit}
    */
    onInitialized: (clothVisual: ClothVisual) => void
    
    /**
    * Indicates whether we will enable collision repulsion with collider models.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-repulsionEnabled.md Edit}
    */
    repulsionEnabled: boolean
    
    /**
    * Collision friction to dampen relative motion.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-repulsionFriction.md Edit}
    */
    repulsionFriction: number
    
    /**
    * Indicates the offset we set when the cloth mesh is too close to the colliders.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-repulsionOffset.md Edit}
    */
    repulsionOffset: number
    
    /**
    * Indicates the stiffness of repulsion when collision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-repulsionStiffness.md Edit}
    */
    repulsionStiffness: number
    
    /**
    * Returns the modified simulated mesh which can be used in another [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual) if the same simulated mesh is needed. Useful when creating effects that might require the same mesh to be rendered twice, such as with a mirror effect. Prevents the need to run a simulation twice. 
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-simulatedMesh.md Edit}
    
    * @readonly
    */
    simulatedMesh: RenderMesh
    
    /**
    * StretchStiffness Value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-stretchStiffness.md Edit}
    */
    stretchStiffness: number
    
    /**
    * StretchStiffness Value weight on all the VertexSettings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-stretchStiffnessVertexWeight.md Edit}
    */
    stretchStiffnessVertexWeight: number
    
    /**
    * Whether to update normals for the cloth mesh each frame in order to get reflection update.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/properties/ClothVisual-updateNormalsEnabled.md Edit}
    */
    updateNormalsEnabled: boolean
    
}
declare namespace ClothVisual {
    /**
    * Creates a new instance of vertex simulation settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual/methods/ClothVisual-createVertexSettings.md Edit}
    */
    export function createVertexSettings(): VertexSimulationSettings
    

}

declare namespace ClothVisual {
    /**
    * Cloth bend mode to use for cloth simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual.BendMode/ClothVisual.BendMode-description.md Edit}
    */
    enum BendMode {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual.BendMode/properties/ClothVisual.BendMode-Isometric.md Edit}
        */
        Isometric,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ClothVisual.BendMode/properties/ClothVisual.BendMode-Linear.md Edit}
        */
        Linear
    }

}

/**
* Options associated with the listValues method call.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageListOptions/CloudStorageListOptions-description.md Edit}
*/
interface CloudStorageListOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageListOptions/properties/CloudStorageListOptions-collection.md Edit}
    
    * @private
    */
    collection: string
    
    /**
    * The position in the resulting list. Each time a list is requested, 10 entities are returned. If no cursor is provided, first 10 entities will be returned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageListOptions/properties/CloudStorageListOptions-cursor.md Edit}
    */
    cursor: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageListOptions/properties/CloudStorageListOptions-limit.md Edit}
    
    * @private
    */
    limit: number
    
    /**
    * The scope of the listValues request. Required
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageListOptions/properties/CloudStorageListOptions-scope.md Edit}
    */
    scope: StorageScope
    
}
declare namespace CloudStorageListOptions {
    /**
    * Creates the listValues options object for Cloud Storage
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageListOptions/methods/CloudStorageListOptions-create.md Edit}
    */
    export function create(): CloudStorageListOptions
    

}

/**
* Provides access to Cloud Storage.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageModule/CloudStorageModule-description.md Edit}
*/
interface CloudStorageModule extends Asset {
    /**
    * Get the Cloud Store. Future calls to this method will return the same cloud store, even if the options change.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageModule/methods/CloudStorageModule-getCloudStore.md Edit}
    */
    getCloudStore(options: CloudStorageOptions, onCloudStoreReady: (store: CloudStore) => void, onError: (code: string, description: string) => void): void
    
}

/**
* Used to configure `Cloud Storage Module` with various options. Note: if `session` scoped storage is required, this option must be provided.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageOptions/CloudStorageOptions-description.md Edit}
*/
interface CloudStorageOptions extends ScriptObject {
    /**
    * If session scoped storage is required, set this property with the session object from [Connected Lenses Module](https://lensstudio.snapchat.com/api/classes/ConnectedLensModule).
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageOptions/properties/CloudStorageOptions-session.md Edit}
    */
    session: MultiplayerSession
    
}
declare namespace CloudStorageOptions {
    /**
    * Create options for use with Cloud Storage.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageOptions/methods/CloudStorageOptions-create.md Edit}
    */
    export function create(): CloudStorageOptions
    

}

/**
* Options associated with the getValue/deleteValue methods for Cloud Storage.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageReadOptions/CloudStorageReadOptions-description.md Edit}
*/
interface CloudStorageReadOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageReadOptions/properties/CloudStorageReadOptions-collection.md Edit}
    
    * @private
    */
    collection: string
    
    /**
    * The scope of the request.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageReadOptions/properties/CloudStorageReadOptions-scope.md Edit}
    */
    scope: StorageScope
    
}
declare namespace CloudStorageReadOptions {
    /**
    * Options associated with the getValue/deleteValue methods for Cloud Storage.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageReadOptions/methods/CloudStorageReadOptions-create.md Edit}
    */
    export function create(): CloudStorageReadOptions
    

}

/**
* Options associated with the setValue method for Cloud Storage.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageWriteOptions/CloudStorageWriteOptions-description.md Edit}
*/
interface CloudStorageWriteOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageWriteOptions/properties/CloudStorageWriteOptions-collection.md Edit}
    
    * @private
    */
    collection: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageWriteOptions/properties/CloudStorageWriteOptions-dataPolicy.md Edit}
    
    * @private
    */
    dataPolicy: string
    
    /**
    * The scope of the write option.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageWriteOptions/properties/CloudStorageWriteOptions-scope.md Edit}
    */
    scope: StorageScope
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageWriteOptions/properties/CloudStorageWriteOptions-writePermissions.md Edit}
    
    * @private
    */
    writePermissions: WritePermissions
    
}
declare namespace CloudStorageWriteOptions {
    /**
    * Creates the setValue options object for Cloud Storage.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStorageWriteOptions/methods/CloudStorageWriteOptions-create.md Edit}
    */
    export function create(): CloudStorageWriteOptions
    

}

/**
* An instance of Cloud Storage that can store data in a multiplayer experience.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/CloudStore-description.md Edit}
*/
interface CloudStore extends ScriptObject {
    /**
    * Deletes a value from the persistence backend. Note that the scope must match that which was used when the value was originally saved.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-deleteValue.md Edit}
    */
    deleteValue(key: string, readOptions: CloudStorageReadOptions, onDeleted: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-deleteValueInternal.md Edit}
    
    * @private
    */
    deleteValueInternal(key: string, readOptions: CloudStorageReadOptions, onDeleted: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-getPersistedAsset.md Edit}
    
    * @private
    */
    getPersistedAsset(key: string, readOptions: CloudStorageReadOptions, onRetrieved: (collection: string, key: string, asset: Asset) => void, onError: (code: string, description: string) => void): void
    
    /**
    * Gets a value from the persistence backend. Note that scope must match that which was used when the value was originally saved.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-getValue.md Edit}
    */
    getValue(key: string, readOptions: CloudStorageReadOptions, onRetrieved: (key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)) => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-getValueInternal.md Edit}
    
    * @private
    */
    getValueInternal(key: string, readOptions: CloudStorageReadOptions, onRetrieved: (collection: string, key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)) => void, onError: (code: string, description: string) => void): void
    
    /**
    * Lists values from the persistence backend. Note that the scope must match that which was used when the values were originally saved.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-listValues.md Edit}
    */
    listValues(listOptions: CloudStorageListOptions, onRetrieved: (values: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)[][], cursor: string) => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-listValuesInternal.md Edit}
    
    * @private
    */
    listValuesInternal(listOptions: CloudStorageListOptions, onRetrieved: (collection: string, values: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)[][], cursor: string) => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-setPersistedAsset.md Edit}
    
    * @private
    */
    setPersistedAsset(key: string, writeOptions: CloudStorageWriteOptions, asset: Asset, onSaved: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * Sets a value in the persistence backend.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-setValue.md Edit}
    */
    setValue(key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string), writeOptions: CloudStorageWriteOptions, onSaved: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CloudStore/methods/CloudStore-setValueInternal.md Edit}
    
    * @private
    */
    setValueInternal(key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string), writeOptions: CloudStorageWriteOptions, onSaved: () => void, onError: (code: string, description: string) => void): void
    
}

/**
* Collider used by the [Hair Visual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#HairVisual) for its simulation.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/ColliderComponent-description.md Edit}
*/
interface ColliderComponent extends Component {
    /**
    * Clears all velocities and forces on a collider.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/methods/ColliderComponent-clearMotion.md Edit}
    */
    clearMotion(): void
    
    /**
    * Angular velocity, expressed as an axis of rotation scaled by angular speed (radians/s).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-angularVelocity.md Edit}
    */
    angularVelocity: vec3
    
    /**
    * Expects a LevelsetColliderAsset. Contains distance field data which describes a collider's shape. A selection of default Levelset assets can be found in Resource->Add->Hairstyle Colliders
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-asset.md Edit}
    
    * @deprecated
    */
    asset: LevelsetColliderAsset
    
    /**
    * Toggle collider wire rendering for visualizing collider geometry shape and where it is placed.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-debugDrawEnabled.md Edit}
    */
    debugDrawEnabled: boolean
    
    /**
    * Collision filter to use for this collider.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-filter.md Edit}
    */
    filter: Filter
    
    /**
    * If enabled, the collider shape extends to fit the visual mesh, if any. Only applicable for Box and Sphere shapes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-fitVisual.md Edit}
    */
    fitVisual: boolean
    
    /**
    * Nested collider/body components may be merged into compound shapes. By default, this occurs only for dynamic bodies and not for static colliders. If `forceCompound` is set, this occurs for static colliders as well.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-forceCompound.md Edit}
    */
    forceCompound: boolean
    
    /**
    * If enabled, the collider doesn't interact with the world but may still be detected with ray casts and intersection events.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-intangible.md Edit}
    */
    intangible: boolean
    
    /**
    * The matter used by the collider to define its physical substance, such as friction and bounciness.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-matter.md Edit}
    */
    matter: Matter
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-offset.md Edit}
    
    * @deprecated
    
    * @private
    */
    offset: vec3
    
    /**
    * Signals when objects initially collide.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-onCollisionEnter.md Edit}
    
    * @readonly
    */
    onCollisionEnter: event1<CollisionEnterEventArgs, void>
    
    /**
    * Signals when objects stop colliding.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-onCollisionExit.md Edit}
    
    * @readonly
    */
    onCollisionExit: event1<CollisionExitEventArgs, void>
    
    /**
    * Signals every frame while objects continue to collide.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-onCollisionStay.md Edit}
    
    * @readonly
    */
    onCollisionStay: event1<CollisionStayEventArgs, void>
    
    /**
    * Signals when colliders first overlap.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-onOverlapEnter.md Edit}
    
    * @readonly
    */
    onOverlapEnter: event1<OverlapEnterEventArgs, void>
    
    /**
    * Signals when colliders stop overlapping.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-onOverlapExit.md Edit}
    
    * @readonly
    */
    onOverlapExit: event1<OverlapExitEventArgs, void>
    
    /**
    * Signals every frame while colliders continue to overlap.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-onOverlapStay.md Edit}
    
    * @readonly
    */
    onOverlapStay: event1<OverlapStayEventArgs, void>
    
    /**
    * Collision filter used for overlap events.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-overlapFilter.md Edit}
    */
    overlapFilter: Filter
    
    /**
    * Smoothing spring factor, for rotation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-rotateSmoothFactor.md Edit}
    */
    rotateSmoothFactor: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-scale.md Edit}
    
    * @deprecated
    
    * @private
    */
    scale: vec3
    
    /**
    * The Shape object used for collision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-shape.md Edit}
    */
    shape: Shape
    
    /**
    * Smooth transform changes using a dampened spring. Useful to reduce motion noise. This only applies to the simulation and changes from outside the simulation. The scene object's transform is not affected. It has no effect for dynamic bodies. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-smooth.md Edit}
    */
    smooth: boolean
    
    /**
    * Smoothing spring factor, for translation. This controls the restitution strength of the spring, so low values are smoother but lag more.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-translateSmoothFactor.md Edit}
    */
    translateSmoothFactor: number
    
    /**
    * Linear velocity (cm/s).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-velocity.md Edit}
    */
    velocity: vec3
    
    /**
    * The WorldSettingsAsset used by the collider to define the physics simulation settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColliderComponent/properties/ColliderComponent-worldSettings.md Edit}
    */
    worldSettings: Physics.WorldSettingsAsset
    
}

/**
* A state generated for ColliderComponent collision events.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Collision/Collision-description.md Edit}
*/
interface Collision extends ScriptObject {
    /**
    * Primitive shapes that physics objects interact with, such as spheres, boxes, and meshes, or compound shapes formed from multiple shapes. Used with Physics, Hair Simulation and Cloth Simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Collision/properties/Collision-collider.md Edit}
    
    * @readonly
    */
    collider: ColliderComponent
    
    /**
    * The number of contact points in the collision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Collision/properties/Collision-contactCount.md Edit}
    
    * @readonly
    */
    contactCount: number
    
    /**
    * Array of contacts in the collision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Collision/properties/Collision-contacts.md Edit}
    
    * @readonly
    */
    contacts: Contact[]
    
    /**
    * ID of the collision, unique for this collider.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Collision/properties/Collision-id.md Edit}
    
    * @readonly
    */
    id: number
    
}

/**
* Args used for [ColliderComponent.onCollisionEnter](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered when a collision begins.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CollisionEnterEventArgs/CollisionEnterEventArgs-description.md Edit}
*/
interface CollisionEnterEventArgs extends ScriptObject {
    /**
    * Structure containing information about the current collision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CollisionEnterEventArgs/properties/CollisionEnterEventArgs-collision.md Edit}
    
    * @readonly
    */
    collision: Collision
    
}

/**
* Args used for [ColliderComponent.onCollisionExit](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered when a collision ends.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CollisionExitEventArgs/CollisionExitEventArgs-description.md Edit}
*/
interface CollisionExitEventArgs extends ScriptObject {
    /**
    * Structure containing information about the current collision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CollisionExitEventArgs/properties/CollisionExitEventArgs-collision.md Edit}
    
    * @readonly
    */
    collision: Collision
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CollisionMesh/CollisionMesh-description.md Edit}
*/
interface CollisionMesh extends Asset {
}

/**
* Args used for [ColliderComponent.onCollisionStay](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered every frame while a collision continues.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CollisionStayEventArgs/CollisionStayEventArgs-description.md Edit}
*/
interface CollisionStayEventArgs extends ScriptObject {
    /**
    * Structure containing information about the current collision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CollisionStayEventArgs/properties/CollisionStayEventArgs-collision.md Edit}
    
    * @readonly
    */
    collision: Collision
    
}

/**
* Not usable from JS. Accessed via the Colocated Landmarks 2D Mesh resource. Contains the 2D keypoints when creating a Colocated map. Expanded by the material provided with template.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedLandmarks2DRenderObjectProvider/ColocatedLandmarks2DRenderObjectProvider-description.md Edit}
*/
interface ColocatedLandmarks2DRenderObjectProvider extends ColocatedLandmarksRenderObjectProviderBase {
}

/**
* Not usable from JS. Accessed via the Colocated Landmarks 3D Mesh resource. Contains the 3D landmarks when creating a Colocated map. Expanded by the material provided with template.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedLandmarks3DRenderObjectProvider/ColocatedLandmarks3DRenderObjectProvider-description.md Edit}
*/
interface ColocatedLandmarks3DRenderObjectProvider extends ColocatedLandmarksRenderObjectProviderBase {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedLandmarksRenderObjectProviderBase/ColocatedLandmarksRenderObjectProviderBase-description.md Edit}
*/
interface ColocatedLandmarksRenderObjectProviderBase extends RenderObjectProvider {
}

/**
* Creates Colocated Connected Lenses experiences by enabling the creation and tracking of a shared space which can be used to place several users in the same coordinate frame. This shared space will be made available and can be tracked by any friend you invite to join your session via Snapcode. Users are expected to be located in the same room when using the colocated feature. This component needs to be attached to the camera. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/ColocatedTrackingComponent-description.md Edit}
*/
interface ColocatedTrackingComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/methods/ColocatedTrackingComponent-cancelBuilding.md Edit}
    
    * @private
    */
    cancelBuilding(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/methods/ColocatedTrackingComponent-finishBuilding.md Edit}
    
    * @private
    */
    finishBuilding(): void
    
    /**
    * Joins an existing session, retrieving the shared space that the colocated session initiator just created. Throws an exception if a join or build operation is in progress or if a shared space is already present.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/methods/ColocatedTrackingComponent-join.md Edit}
    */
    join(session: MultiplayerSession): void
    
    /**
    * Starts the shared space building process locally in the session initiator's device.
    
    * If a session is provided, the shared space is placed into the session after building has completed, which is required for Colocated experiences running on mobile devices. When running the experience in Lens Studio Preview or solo mode the session is not required.
    
    * Throws an exception if a join or build operation is in progress or if a map is already present.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/methods/ColocatedTrackingComponent-startBuilding.md Edit}
    */
    startBuilding(session: MultiplayerSession): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-buildingConfiguration.md Edit}
    
    * @private
    */
    buildingConfiguration: ColocatedTrackingComponent.BuildingConfiguration
    
    /**
    * Provides the shared space building progress expressed in values 0-1. These values can be used to populate a progress bar. Once this value has reached 1, the colocated tracking component attempts to share the space which the user created.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-buildingProgress.md Edit}
    
    * @readonly
    */
    buildingProgress: number
    
    /**
    * Indicates whether a shared space can be built on this device. Colocated Tracking is available on devices with ARKit/ARCore in the rear camera. This flag should be checked before attempting to build or join a session. If it is false, you should inform users: "Sorry, your device does not support shared AR experiences."
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-canBuild.md Edit}
    
    * @readonly
    */
    canBuild: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-canFinishBuilding.md Edit}
    
    * @readonly
    
    * @private
    */
    canFinishBuilding: boolean
    
    /**
    * Indicates whether a shared space is present and ready to be tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-canTrack.md Edit}
    
    * @readonly
    */
    canTrack: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-capacityUsed.md Edit}
    
    * @readonly
    
    * @private
    */
    capacityUsed: number
    
    /**
    * Indicates whether a shared space building operation is in progress. Once the flag is false, the shared space still needs to be shared. Use `onTrackingAvailable` to determine when your space has been shared.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-isBuilding.md Edit}
    
    * @readonly
    */
    isBuilding: boolean
    
    /**
    * Indicates whether a session joining operation is in progress.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-isJoining.md Edit}
    
    * @readonly
    */
    isJoining: boolean
    
    /**
    * Indicates whether a shared space is actively being tracked. This value will be true while tracking is active, either with or without the shared space in view. This property matches the equivalent one in `MarkerTrackingComponent`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-isTracking.md Edit}
    
    * @readonly
    */
    isTracking: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-maximumSize.md Edit}
    
    * @private
    */
    maximumSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-minimumSize.md Edit}
    
    * @private
    */
    minimumSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-model.md Edit}
    
    * @private
    */
    model: LocalizationModel
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-onBuildCancelled.md Edit}
    
    * @readonly
    
    * @private
    */
    onBuildCancelled: event0<void>
    
    /**
    * Event fired when the building operation fails (for example, sharing your space failed). Once `onTrackingAvailable` event is triggered, this event will not be triggered anymore. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-onBuildFailed.md Edit}
    
    * @readonly
    */
    onBuildFailed: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-onBuildFinished.md Edit}
    
    * @readonly
    
    * @private
    */
    onBuildFinished: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-onCanFinishBuilding.md Edit}
    
    * @readonly
    
    * @private
    */
    onCanFinishBuilding: event0<void>
    
    /**
    * Event fired when a shared space starts being actively tracked. This property is an analogue of the `onMarkerFound` property in `MarkerTrackingComponent`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-onFound.md Edit}
    
    * @readonly
    */
    onFound: event0<void>
    
    /**
    * Event fired when a join operation completes but no shared space was found in the session.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-onJoinFailed.md Edit}
    
    * @readonly
    */
    onJoinFailed: event0<void>
    
    /**
    * Event fired when a shared space stops being actively tracked. This property is an analogue of the `onMarkerLost` property in `MarkerTrackingComponent`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-onLost.md Edit}
    
    * @readonly
    */
    onLost: event0<void>
    
    /**
    * Event fired when a shared space has been shared or received and the device can attempt to start tracking.  If this event is not being triggered for a long period, the process will time out and `onBuildFailed` event will be triggered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-onTrackingAvailable.md Edit}
    
    * @readonly
    */
    onTrackingAvailable: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent/properties/ColocatedTrackingComponent-quality.md Edit}
    
    * @readonly
    
    * @private
    */
    quality: number
    
}

declare namespace ColocatedTrackingComponent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent.BuildingConfiguration/ColocatedTrackingComponent.BuildingConfiguration-description.md Edit}
    
    * @private
    */
    enum BuildingConfiguration {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent.BuildingConfiguration/properties/ColocatedTrackingComponent.BuildingConfiguration-Colocated.md Edit}
        
        * @private
        */
        Colocated,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ColocatedTrackingComponent.BuildingConfiguration/properties/ColocatedTrackingComponent.BuildingConfiguration-CustomLandmarker.md Edit}
        
        * @private
        */
        CustomLandmarker
    }

}

/**
* Data type used for color values.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/Colorspace-description.md Edit}
*/
declare enum Colorspace {
    /**
    * Color data has one value: Red
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-R.md Edit}
    */
    R,
    /**
    * Color data has 2 values: Red, Green
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-RG.md Edit}
    */
    RG,
    /**
    * Color data has 4 values: Red, Green, Blue, Alpha
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-RGBA.md Edit}
    */
    RGBA,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-RedFloat.md Edit}
    */
    RedFloat,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-RGFloat.md Edit}
    */
    RGFloat,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-RGBAFloat.md Edit}
    
    * @unreleased
    */
    RGBAFloat,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-RGBAFloat16.md Edit}
    
    * @unreleased
    */
    RGBAFloat16,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-RGFloat16.md Edit}
    
    * @unreleased
    */
    RGFloat16,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Colorspace/properties/Colorspace-Red.md Edit}
    
    * @deprecated
    */
    Red
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompassAccuracy/CompassAccuracy-description.md Edit}

* @private
*/
declare enum CompassAccuracy {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompassAccuracy/properties/CompassAccuracy-NoContact.md Edit}
    
    * @private
    */
    NoContact,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompassAccuracy/properties/CompassAccuracy-High.md Edit}
    
    * @private
    */
    High,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompassAccuracy/properties/CompassAccuracy-Medium.md Edit}
    
    * @private
    */
    Medium,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompassAccuracy/properties/CompassAccuracy-Low.md Edit}
    
    * @private
    */
    Low,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompassAccuracy/properties/CompassAccuracy-Unreliable.md Edit}
    
    * @private
    */
    Unreliable
}

/**
* The base class for all components.  Components are attached to [SceneObjects](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Component/Component-description.md Edit}
*/
interface Component extends SerializableWithUID {
    /**
    * Destroys the component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Component/methods/Component-destroy.md Edit}
    */
    destroy(): void
    
    /**
    * Returns the SceneObject the component is attached to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Component/methods/Component-getSceneObject.md Edit}
    */
    getSceneObject(): SceneObject
    
    /**
    * Returns the Transform this component is attached to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Component/methods/Component-getTransform.md Edit}
    */
    getTransform(): Transform
    
    /**
    * If disabled, the Component will stop enacting its behavior.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Component/properties/Component-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * The name of the Component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Component/properties/Component-name.md Edit}
    
    * @private
    */
    name: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Component/properties/Component-sceneObject.md Edit}
    
    * @readonly
    */
    sceneObject: SceneObject
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Component/properties/Component-updatePriority.md Edit}
    
    * @private
    */
    updatePriority: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ComponentDisabledEvent/ComponentDisabledEvent-description.md Edit}

* @private
*/
interface ComponentDisabledEvent extends ComponentEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ComponentEnabledEvent/ComponentEnabledEvent-description.md Edit}

* @private
*/
interface ComponentEnabledEvent extends ComponentEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ComponentEvent/ComponentEvent-description.md Edit}

* @private
*/
interface ComponentEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ComponentEvent/methods/ComponentEvent-getDeltaTime.md Edit}
    
    * @private
    */
    getDeltaTime(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompressionQuality/CompressionQuality-description.md Edit}

* @private
*/
declare enum CompressionQuality {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompressionQuality/properties/CompressionQuality-MaximumCompression.md Edit}
    
    * @private
    */
    MaximumCompression,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompressionQuality/properties/CompressionQuality-LowQuality.md Edit}
    
    * @private
    */
    LowQuality,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompressionQuality/properties/CompressionQuality-IntermediateQuality.md Edit}
    
    * @private
    */
    IntermediateQuality,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompressionQuality/properties/CompressionQuality-HighQuality.md Edit}
    
    * @private
    */
    HighQuality,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CompressionQuality/properties/CompressionQuality-MaximumQuality.md Edit}
    
    * @private
    */
    MaximumQuality
}

/**
* A cone collision shape.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConeShape/ConeShape-description.md Edit}
*/
interface ConeShape extends Shape {
    /**
    * Lengthwise local axis along which the cone is oriented.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConeShape/properties/ConeShape-axis.md Edit}
    */
    axis: Axis
    
    /**
    * The length of the cone.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConeShape/properties/ConeShape-length.md Edit}
    */
    length: number
    
    /**
    * The radius of the cone.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConeShape/properties/ConeShape-radius.md Edit}
    */
    radius: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConfigurationReader/ConfigurationReader-description.md Edit}

* @private
*/
interface ConfigurationReader {
}
declare namespace ConfigurationReader {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConfigurationReader/methods/ConfigurationReader-getBooleanAsync.md Edit}
    
    * @private
    */
    export function getBooleanAsync(key: string, defaultValue: boolean, onConfigurationReadOrTimeout: (Arg: boolean) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConfigurationReader/methods/ConfigurationReader-getByteArrayAsync.md Edit}
    
    * @private
    */
    export function getByteArrayAsync(key: string, defaultValue: number[], onConfigurationReadOrTimeout: (Arg: number[]) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConfigurationReader/methods/ConfigurationReader-getFloatAsync.md Edit}
    
    * @private
    */
    export function getFloatAsync(key: string, defaultValue: number, onConfigurationReadOrTimeout: (Arg: number) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConfigurationReader/methods/ConfigurationReader-getIntAsync.md Edit}
    
    * @private
    */
    export function getIntAsync(key: string, defaultValue: number, onConfigurationReadOrTimeout: (Arg: number) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConfigurationReader/methods/ConfigurationReader-getLongAsync.md Edit}
    
    * @private
    */
    export function getLongAsync(key: string, defaultValue: number, onConfigurationReadOrTimeout: (Arg: number) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConfigurationReader/methods/ConfigurationReader-getStringAsync.md Edit}
    
    * @private
    */
    export function getStringAsync(key: string, defaultValue: string, onConfigurationReadOrTimeout: (Arg: string) => void): void
    

}

/**
* Event fired when the "Launch connected lens" button was pressed. Wait for this event to be triggered before creating a session, as having this event gaurantees the user has accepted the necessary disclosures to use a connected lens experience.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensEnteredEvent/ConnectedLensEnteredEvent-description.md Edit}
*/
interface ConnectedLensEnteredEvent extends SceneEvent {
}

/**
* Connected Lenses Module allows use of networked Lens communication capabilities (real-time communication, co-located session creation and joining, and shared persistent storage). It's recommended to only use one ConnectedLensModule per Lens.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule/ConnectedLensModule-description.md Edit}
*/
interface ConnectedLensModule extends Asset {
    /**
    * Create session with the provided options. Will also check if there is a session that can be created from a session sharetype received from other users.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule/methods/ConnectedLensModule-createSession.md Edit}
    */
    createSession(sessionOptions: ConnectedLensSessionOptions): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule/methods/ConnectedLensModule-recordScore.md Edit}
    
    * @private
    */
    recordScore(score: number): void
    
    /**
    * Share the session with other users, specified by the SessionShareType. Note that if shared via Invitation, a new session will be created. Expect a new onConnected callback with the new session being passed in.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule/methods/ConnectedLensModule-shareSession.md Edit}
    */
    shareSession(sessionShareType: ConnectedLensModule.SessionShareType, onSessionShared: (session: MultiplayerSession, snapcode: Texture) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule/methods/ConnectedLensModule-showLeaderboard.md Edit}
    
    * @private
    */
    showLeaderboard(): void
    
}

declare namespace ConnectedLensModule {
    /**
    * Information that is bootstrapped to the user who just connected to the session.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.ConnectionInfo/ConnectedLensModule.ConnectionInfo-description.md Edit}
    */
    interface ConnectionInfo extends ScriptObject {
        /**
        * Get the information about all the other users connected to the same session. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.ConnectionInfo/properties/ConnectedLensModule.ConnectionInfo-externalUsersInfo.md Edit}
        
        * @readonly
        */
        externalUsersInfo: ConnectedLensModule.UserInfo[]
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.ConnectionInfo/properties/ConnectedLensModule.ConnectionInfo-hostUserInfo.md Edit}
        
        * @readonly
        */
        hostUserInfo: ConnectedLensModule.UserInfo
        
        /**
        * Get the information about the local user.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.ConnectionInfo/properties/ConnectedLensModule.ConnectionInfo-localUserInfo.md Edit}
        
        * @readonly
        */
        localUserInfo: ConnectedLensModule.UserInfo
        
        /**
        * Get all the Realtime Stores that are being used in the session.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.ConnectionInfo/properties/ConnectedLensModule.ConnectionInfo-realtimeStores.md Edit}
        
        * @readonly
        */
        realtimeStores: GeneralDataStore[]
        
        /**
        * Provides creation info about every existing RealtimeStore.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.ConnectionInfo/properties/ConnectedLensModule.ConnectionInfo-realtimeStoresCreationInfos.md Edit}
        
        * @readonly
        */
        realtimeStoresCreationInfos: ConnectedLensModule.RealtimeStoreCreationInfo[]
        
    }

}

declare namespace ConnectedLensModule {
    /**
    * Information about the host update.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.HostUpdateInfo/ConnectedLensModule.HostUpdateInfo-description.md Edit}
    */
    interface HostUpdateInfo extends ScriptObject {
        /**
        * Provides the server timestamp (in milliseconds) of when the host was updated.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.HostUpdateInfo/properties/ConnectedLensModule.HostUpdateInfo-sentServerTimeMilliseconds.md Edit}
        
        * @readonly
        */
        sentServerTimeMilliseconds: number
        
        /**
        * Information about the new host user. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.HostUpdateInfo/properties/ConnectedLensModule.HostUpdateInfo-userInfo.md Edit}
        
        * @readonly
        */
        userInfo: ConnectedLensModule.UserInfo
        
    }

}

declare namespace ConnectedLensModule {
    /**
    * Provides extra context about a RealtimeStore's creation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreCreationInfo/ConnectedLensModule.RealtimeStoreCreationInfo-description.md Edit}
    */
    interface RealtimeStoreCreationInfo extends ScriptObject {
        /**
        * If true, ownership of the store can be claimed even if the store is already owned.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreCreationInfo/properties/ConnectedLensModule.RealtimeStoreCreationInfo-allowOwnershipTakeOver.md Edit}
        
        * @readonly
        */
        allowOwnershipTakeOver: boolean
        
        /**
        * Provides the server timestamp (in milliseconds) of the last time the store was updated.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreCreationInfo/properties/ConnectedLensModule.RealtimeStoreCreationInfo-lastUpdatedServerTimestamp.md Edit}
        
        * @readonly
        */
        lastUpdatedServerTimestamp: number
        
        /**
        * Provides the UserInfo of the current owner of the RealtimeStore. If the store is unowned, a UserInfo object with null fields will be returned.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreCreationInfo/properties/ConnectedLensModule.RealtimeStoreCreationInfo-ownerInfo.md Edit}
        
        * @readonly
        */
        ownerInfo: ConnectedLensModule.UserInfo
        
        /**
        * The persistence setting that the store was created with.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreCreationInfo/properties/ConnectedLensModule.RealtimeStoreCreationInfo-persistence.md Edit}
        
        * @readonly
        */
        persistence: RealtimeStoreCreateOptions.Persistence
        
        /**
        * Provides the server timestamp (in milliseconds) of when the store was created.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreCreationInfo/properties/ConnectedLensModule.RealtimeStoreCreationInfo-sentServerTimeMilliseconds.md Edit}
        
        * @readonly
        */
        sentServerTimeMilliseconds: number
        
        /**
        * A string that can be used to identify the RealtimeStore.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreCreationInfo/properties/ConnectedLensModule.RealtimeStoreCreationInfo-storeId.md Edit}
        
        * @readonly
        */
        storeId: string
        
    }

}

declare namespace ConnectedLensModule {
    /**
    * Gives information about the Realtime Store delete operation. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreDeleteInfo/ConnectedLensModule.RealtimeStoreDeleteInfo-description.md Edit}
    */
    interface RealtimeStoreDeleteInfo extends ScriptObject {
        /**
        * Get the information of the user who deleted the Store.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreDeleteInfo/properties/ConnectedLensModule.RealtimeStoreDeleteInfo-deleterInfo.md Edit}
        
        * @readonly
        */
        deleterInfo: ConnectedLensModule.UserInfo
        
        /**
        * Provides the server timestamp (in milliseconds) of when the store was deleted.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreDeleteInfo/properties/ConnectedLensModule.RealtimeStoreDeleteInfo-sentServerTimeMilliseconds.md Edit}
        
        * @readonly
        */
        sentServerTimeMilliseconds: number
        
    }

}

declare namespace ConnectedLensModule {
    /**
    * Provides information about a key being removed from a RealtimeStore.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreKeyRemovalInfo/ConnectedLensModule.RealtimeStoreKeyRemovalInfo-description.md Edit}
    */
    interface RealtimeStoreKeyRemovalInfo extends ScriptObject {
        /**
        * Key of the property that was removed.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreKeyRemovalInfo/properties/ConnectedLensModule.RealtimeStoreKeyRemovalInfo-key.md Edit}
        
        * @readonly
        */
        key: string
        
        /**
        * User that removed the key.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreKeyRemovalInfo/properties/ConnectedLensModule.RealtimeStoreKeyRemovalInfo-removerInfo.md Edit}
        
        * @readonly
        */
        removerInfo: ConnectedLensModule.UserInfo
        
        /**
        * Provides the server timestamp (in milliseconds) of when the key was removed.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreKeyRemovalInfo/properties/ConnectedLensModule.RealtimeStoreKeyRemovalInfo-sentServerTimeMilliseconds.md Edit}
        
        * @readonly
        */
        sentServerTimeMilliseconds: number
        
        /**
        * The RealtimeStore that the key was removed from.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreKeyRemovalInfo/properties/ConnectedLensModule.RealtimeStoreKeyRemovalInfo-store.md Edit}
        
        * @readonly
        */
        store: GeneralDataStore
        
    }

}

declare namespace ConnectedLensModule {
    /**
    * Provides information about a RealtimeStore's ownership being updated.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreOwnershipUpdateInfo/ConnectedLensModule.RealtimeStoreOwnershipUpdateInfo-description.md Edit}
    */
    interface RealtimeStoreOwnershipUpdateInfo extends ScriptObject {
        /**
        * Provides the server timestamp (in milliseconds) of when the store ownership was updated.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreOwnershipUpdateInfo/properties/ConnectedLensModule.RealtimeStoreOwnershipUpdateInfo-sentServerTimeMilliseconds.md Edit}
        
        * @readonly
        */
        sentServerTimeMilliseconds: number
        
    }

}

declare namespace ConnectedLensModule {
    /**
    * Gives information about the Realtime Store update operation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreUpdateInfo/ConnectedLensModule.RealtimeStoreUpdateInfo-description.md Edit}
    */
    interface RealtimeStoreUpdateInfo extends ScriptObject {
        /**
        * Provides the server timestamp (in milliseconds) of when the store was updated.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreUpdateInfo/properties/ConnectedLensModule.RealtimeStoreUpdateInfo-sentServerTimeMilliseconds.md Edit}
        
        * @readonly
        */
        sentServerTimeMilliseconds: number
        
        /**
        * Get the information of the user who updated the store.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.RealtimeStoreUpdateInfo/properties/ConnectedLensModule.RealtimeStoreUpdateInfo-updaterInfo.md Edit}
        
        * @readonly
        */
        updaterInfo: ConnectedLensModule.UserInfo
        
    }

}

declare namespace ConnectedLensModule {
    /**
    * Used by ConnectedLensesModule to specify the session share type.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.SessionShareType/ConnectedLensModule.SessionShareType-description.md Edit}
    */
    enum SessionShareType {
        /**
        * Share a session by inviting your friends, launching the "send to" screen.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.SessionShareType/properties/ConnectedLensModule.SessionShareType-Invitation.md Edit}
        */
        Invitation,
        /**
        * Share session via Snapcode that your friends can scan.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.SessionShareType/properties/ConnectedLensModule.SessionShareType-Snapcode.md Edit}
        */
        Snapcode
    }

}

declare namespace ConnectedLensModule {
    /**
    * Provides information about a user in a Connected Lens session.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.UserInfo/ConnectedLensModule.UserInfo-description.md Edit}
    */
    interface UserInfo extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.UserInfo/properties/ConnectedLensModule.UserInfo-bitmojiAvatarId.md Edit}
        
        * @readonly
        
        * @private
        */
        bitmojiAvatarId: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.UserInfo/properties/ConnectedLensModule.UserInfo-connectionId.md Edit}
        
        * @readonly
        */
        connectionId: string
        
        /**
        * The current display name of the user.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.UserInfo/properties/ConnectedLensModule.UserInfo-displayName.md Edit}
        
        * @readonly
        */
        displayName: string
        
        /**
        * Provides the server timestamp (in milliseconds) that the user joined the session.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.UserInfo/properties/ConnectedLensModule.UserInfo-joinServerTimeMilliseconds.md Edit}
        
        * @readonly
        */
        joinServerTimeMilliseconds: number
        
        /**
        * A unique identifier for each participant of connected lens experience. It is unique per lens for each user.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensModule.UserInfo/properties/ConnectedLensModule.UserInfo-userId.md Edit}
        
        * @readonly
        */
        userId: string
        
    }

}

/**
* Settings for configuring a Connected Lens session.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/ConnectedLensSessionOptions-description.md Edit}
*/
interface ConnectedLensSessionOptions extends DirectMultiplayerSessionOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/properties/ConnectedLensSessionOptions-appInstanceId.md Edit}
    
    * @private
    */
    appInstanceId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/properties/ConnectedLensSessionOptions-leaderboardId.md Edit}
    
    * @private
    */
    leaderboardId: string
    
    /**
    * Defines maximum number of receipients that a user of connected lens can select while sharing a connected lens session via Invitation flow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/properties/ConnectedLensSessionOptions-maxNumberOfInvitations.md Edit}
    */
    maxNumberOfInvitations: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/properties/ConnectedLensSessionOptions-maxNumberOfPlayers.md Edit}
    
    * @deprecated
    
    * @private
    */
    maxNumberOfPlayers: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/properties/ConnectedLensSessionOptions-onLeaderboardDismissed.md Edit}
    
    * @private
    */
    onLeaderboardDismissed: () => void
    
    /**
    * Function called when the session is created. The session creation type in this callback can be used to tell if the session is being created from scratch, or is being received from another user.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/properties/ConnectedLensSessionOptions-onSessionCreated.md Edit}
    */
    onSessionCreated: (session: MultiplayerSession, sessionCreationType: ConnectedLensSessionOptions.SessionCreationType) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/properties/ConnectedLensSessionOptions-sessionId.md Edit}
    
    * @private
    */
    sessionId: string
    
}
declare namespace ConnectedLensSessionOptions {
    /**
    * Create a new ConnectedLensesOptions object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions/methods/ConnectedLensSessionOptions-create.md Edit}
    */
    export function create(): ConnectedLensSessionOptions
    

}

declare namespace ConnectedLensSessionOptions {
    /**
    * Type of the created Connected Lens session.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions.SessionCreationType/ConnectedLensSessionOptions.SessionCreationType-description.md Edit}
    */
    enum SessionCreationType {
        /**
        * New Session was created.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions.SessionCreationType/properties/ConnectedLensSessionOptions.SessionCreationType-New.md Edit}
        */
        New,
        /**
        * Session was joined via invite.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions.SessionCreationType/properties/ConnectedLensSessionOptions.SessionCreationType-MultiplayerReceiver.md Edit}
        */
        MultiplayerReceiver,
        /**
        * A Connected Lens session with only the current user.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConnectedLensSessionOptions.SessionCreationType/properties/ConnectedLensSessionOptions.SessionCreationType-NewSoloMode.md Edit}
        */
        NewSoloMode
    }

}

/**
* Constraints body motion in configurable ways, for simulating physical objects such as joints and hinges.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Constraint/Constraint-description.md Edit}
*/
interface Constraint extends ScriptObject {
    /**
    * The type of constraint that is applied.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Constraint/properties/Constraint-constraintType.md Edit}
    
    * @readonly
    */
    constraintType: Physics.ConstraintType
    
}

/**
* Used to apply a constraint to an object.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConstraintComponent/ConstraintComponent-description.md Edit}
*/
interface ConstraintComponent extends Component {
    /**
    * The target is attached to the constraint by a fixed local-space matrix, calculated from the difference between the target's and the constraint's world-space transforms. This local-space matrix is generated on-load, or whenever the target is changed. Call this function to explicitly recalculate it for the current world-space transforms.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConstraintComponent/methods/ConstraintComponent-reanchorTarget.md Edit}
    */
    reanchorTarget(): void
    
    /**
    * Dictates constraint type and settings. Note, when setting this field it creates a copy of the constraint, rather than referencing it. So if you intend to modify the constraint after assigning it, you must do so on the component's constraint field, rather than the source constraint object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConstraintComponent/properties/ConstraintComponent-constraint.md Edit}
    */
    constraint: Constraint
    
    /**
    * Show the constraint with debug-draw.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConstraintComponent/properties/ConstraintComponent-debugDrawEnabled.md Edit}
    */
    debugDrawEnabled: boolean
    
    /**
    * Reference to connected target collider. If null, constraint target is attached to a fixed world transform.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ConstraintComponent/properties/ConstraintComponent-target.md Edit}
    */
    target: ColliderComponent
    
}

/**
* Contact point between two colliding objects.  See also: [ColliderComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), [CollisionEnterEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#CollisionEnterEventArgs), [CollisionExitEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#CollisionExitEventArgs), [CollisionStayEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#CollisionStayEventArgs).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Contact/Contact-description.md Edit}
*/
interface Contact extends ScriptObject {
    /**
    * Distance along the normal between the hit collider and this collider.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Contact/properties/Contact-distance.md Edit}
    
    * @readonly
    */
    distance: number
    
    /**
    * Impulse (kg*cm/s) applied along the normal in response to the collision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Contact/properties/Contact-impulse.md Edit}
    
    * @readonly
    */
    impulse: number
    
    /**
    * Normal on the hit collider.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Contact/properties/Contact-normal.md Edit}
    
    * @readonly
    */
    normal: vec3
    
    /**
    * Position on the hit collider.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Contact/properties/Contact-position.md Edit}
    
    * @readonly
    */
    position: vec3
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreMLModule/CoreMLModule-description.md Edit}

* @private
*/
interface CoreMLModule extends Asset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreVersionChecks/CoreVersionChecks-description.md Edit}

* @private
*/
interface CoreVersionChecks extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreVersionChecks/methods/CoreVersionChecks-forceFixedDateFormatting.md Edit}
    
    * @private
    */
    forceFixedDateFormatting(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreVersionChecks/methods/CoreVersionChecks-forceFixedMeshSnapInternalTransformBehavior.md Edit}
    
    * @private
    */
    forceFixedMeshSnapInternalTransformBehavior(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreVersionChecks/methods/CoreVersionChecks-forceFixedPinToMeshInternalTransformBehavior.md Edit}
    
    * @private
    */
    forceFixedPinToMeshInternalTransformBehavior(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreVersionChecks/methods/CoreVersionChecks-forceImmediateScriptCallbackExecution.md Edit}
    
    * @private
    */
    forceImmediateScriptCallbackExecution(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreVersionChecks/methods/CoreVersionChecks-forceLightEstimationForDynamicEnvMapFaceMode.md Edit}
    
    * @private
    */
    forceLightEstimationForDynamicEnvMapFaceMode(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreVersionChecks/methods/CoreVersionChecks-forceMLAssetAsyncLoad.md Edit}
    
    * @private
    */
    forceMLAssetAsyncLoad(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CoreVersionChecks/methods/CoreVersionChecks-forceWorldSpaceRectForText.md Edit}
    
    * @private
    */
    forceWorldSpaceRectForText(): void
    
}

/**
* Base class for Texture Providers that crop an input texture.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CropTextureProvider/CropTextureProvider-description.md Edit}
*/
interface CropTextureProvider extends TextureProvider {
    /**
    * Input texture to crop.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CropTextureProvider/properties/CropTextureProvider-inputTexture.md Edit}
    */
    inputTexture: Texture
    
}

/**
* Used with [Pass's](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Pass) `cullMode` property.
* Determines which faces of a surface are culled (not rendered).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CullMode/CullMode-description.md Edit}
*/
declare enum CullMode {
    /**
    * Front facing surfaces are not rendered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CullMode/properties/CullMode-Front.md Edit}
    */
    Front,
    /**
    * Back facing surfaces are not rendered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CullMode/properties/CullMode-Back.md Edit}
    */
    Back,
    /**
    * Neither front facing nor back facing surfaces are rendered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CullMode/properties/CullMode-FrontAndBack.md Edit}
    */
    FrontAndBack
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomClientUIActionEvent/CustomClientUIActionEvent-description.md Edit}

* @private
*/
interface CustomClientUIActionEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomClientUIActionEvent/properties/CustomClientUIActionEvent-uiAction.md Edit}
    
    * @readonly
    
    * @private
    */
    uiAction: DeviceUIAction
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomClientUIActionEvent/properties/CustomClientUIActionEvent-uiElement.md Edit}
    
    * @readonly
    
    * @private
    */
    uiElement: DeviceUIElement
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers/CustomLandmarkers-description.md Edit}

* @private
*/
interface CustomLandmarkers {
}
declare namespace CustomLandmarkers {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers/methods/CustomLandmarkers-createCustomLocationBuilder.md Edit}
    
    * @private
    */
    export function createCustomLocationBuilder(): CustomLandmarkers.CustomLocationBuilder
    

}

declare namespace CustomLandmarkers {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/CustomLandmarkers.CustomLocationBuilder-description.md Edit}
    
    * @private
    */
    interface CustomLocationBuilder extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/methods/CustomLandmarkers.CustomLocationBuilder-postProcess.md Edit}
        
        * @private
        */
        postProcess(onSuccess: () => void): void
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/methods/CustomLandmarkers.CustomLocationBuilder-publish.md Edit}
        
        * @private
        */
        publish(publishedCallback: (locationAsset: LocationAsset) => void, publishFailedCallback: (error: string) => void): void
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/methods/CustomLandmarkers.CustomLocationBuilder-publishPublicly.md Edit}
        
        * @private
        */
        publishPublicly(publishedCallback: (locationAsset: LocationAsset) => void, publishFailedCallback: (error: string) => void): void
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/properties/CustomLandmarkers.CustomLocationBuilder-appId.md Edit}
        
        * @private
        */
        appId?: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/properties/CustomLandmarkers.CustomLocationBuilder-localizationModel.md Edit}
        
        * @private
        */
        localizationModel: LocalizationModel
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/properties/CustomLandmarkers.CustomLocationBuilder-locationId.md Edit}
        
        * @private
        */
        locationId?: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/properties/CustomLandmarkers.CustomLocationBuilder-mapSource.md Edit}
        
        * @private
        */
        mapSource: ColocatedTrackingComponent
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/properties/CustomLandmarkers.CustomLocationBuilder-mesh.md Edit}
        
        * @private
        */
        mesh: RenderMesh
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/properties/CustomLandmarkers.CustomLocationBuilder-meshSource.md Edit}
        
        * @private
        */
        meshSource: WorldRenderObjectProvider
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/properties/CustomLandmarkers.CustomLocationBuilder-name.md Edit}
        
        * @private
        */
        name: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder/properties/CustomLandmarkers.CustomLocationBuilder-readPermission.md Edit}
        
        * @private
        */
        readPermission: CustomLandmarkers.CustomLocationBuilder.Permission
        
    }

}

declare namespace CustomLandmarkers {
    namespace CustomLocationBuilder {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder.Permission/CustomLandmarkers.CustomLocationBuilder.Permission-description.md Edit}
        
        * @private
        */
        enum Permission {
            /**
            * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder.Permission/properties/CustomLandmarkers.CustomLocationBuilder.Permission-Public.md Edit}
            
            * @private
            */
            Public,
            /**
            * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CustomLandmarkers.CustomLocationBuilder.Permission/properties/CustomLandmarkers.CustomLocationBuilder.Permission-Private.md Edit}
            
            * @private
            */
            Private
        }
    
    }

}

/**
* A cylinder collision shape.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CylinderShape/CylinderShape-description.md Edit}
*/
interface CylinderShape extends Shape {
    /**
    * Lengthwise local axis along which the cylinder is oriented.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CylinderShape/properties/CylinderShape-axis.md Edit}
    */
    axis: Axis
    
    /**
    * The length of the cylinder.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CylinderShape/properties/CylinderShape-length.md Edit}
    */
    length: number
    
    /**
    * The radius of the cylinder.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/CylinderShape/properties/CylinderShape-radius.md Edit}
    */
    radius: number
    
}

/**
* Provides access to external data. Do not add multiple data components to the same scene, since they will interfere with each other. Instead, always have a single data component.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataComponent/DataComponent-description.md Edit}

* @deprecated

* @private
*/
interface DataComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataComponent/methods/DataComponent-activateProvider.md Edit}
    
    * @private
    */
    activateProvider(type: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataComponent/methods/DataComponent-activateProviderWithCallback.md Edit}
    
    * @private
    */
    activateProviderWithCallback(type: string, callback: (data: AbstractData) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataComponent/methods/DataComponent-deactivateProvider.md Edit}
    
    * @private
    */
    deactivateProvider(type: string): void
    
    /**
    * Allows you to access the data provider for the specified input. Possible inputs are:
    
    * Input | Return Type
    * --- | ---
    * "UserData"     | [`GeneralDataStore`](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#GeneralDataStore)
    * "Location" | `Location`
    * "Bitmoji3D" | `Bitmoji3D`
    * "SceneRecognition" | `SceneRecognition`
    * "Segmentation" | `SegmentationSystem`
    * "DeviceMotion" | `DeviceMotion`
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataComponent/methods/DataComponent-getData.md Edit}
    
    * @private
    */
    getData(type: string): AbstractData
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreComponent/DataStoreComponent-description.md Edit}

* @private
*/
interface DataStoreComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreComponent/properties/DataStoreComponent-store.md Edit}
    
    * @private
    */
    store: GeneralDataStore
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreWithScene/DataStoreWithScene-description.md Edit}

* @private
*/
interface DataStoreWithScene extends GeneralDataStore {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreWithScene/methods/DataStoreWithScene-getAsset.md Edit}
    
    * @private
    */
    getAsset(name: string, successCallback: (asset: Asset) => void, failureCallback: (error: number, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreWithScene/methods/DataStoreWithScene-hasAsset.md Edit}
    
    * @private
    */
    hasAsset(name: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreWithScene/methods/DataStoreWithScene-removeAsset.md Edit}
    
    * @private
    */
    removeAsset(name: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreWithScene/methods/DataStoreWithScene-saveAsset.md Edit}
    
    * @private
    */
    saveAsset(asset: Asset, name: string): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreWrapper/DataStoreWrapper-description.md Edit}

* @private
*/
interface DataStoreWrapper extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DataStoreWrapper/properties/DataStoreWrapper-store.md Edit}
    
    * @private
    */
    store: GeneralDataStore
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/DateTime-description.md Edit}

* @deprecated

* @private
*/
declare class DateTime {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/methods/DateTime-DateTime.md Edit}
    
    * @deprecated
    
    * @private
    */
    constructor()
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/properties/DateTime-day.md Edit}
    
    * @deprecated
    
    * @private
    */
    day: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/properties/DateTime-hour.md Edit}
    
    * @deprecated
    
    * @private
    */
    hour: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/properties/DateTime-millisecond.md Edit}
    
    * @deprecated
    
    * @private
    */
    millisecond: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/properties/DateTime-minute.md Edit}
    
    * @deprecated
    
    * @private
    */
    minute: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/properties/DateTime-month.md Edit}
    
    * @deprecated
    
    * @private
    */
    month: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/properties/DateTime-second.md Edit}
    
    * @deprecated
    
    * @private
    */
    second: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DateTime/properties/DateTime-year.md Edit}
    
    * @deprecated
    
    * @private
    */
    year: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/DebugRender-description.md Edit}

* @private
*/
interface DebugRender extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-clear.md Edit}
    
    * @private
    */
    clear(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-drawBox.md Edit}
    
    * @private
    */
    drawBox(position: vec3, width: number, height: number, depth: number, color: vec4): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-drawBrokenLine.md Edit}
    
    * @private
    */
    drawBrokenLine(points: vec3[], color: vec4): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-drawCircle.md Edit}
    
    * @private
    */
    drawCircle(position: vec3, radius: number, color: vec4): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-drawLine.md Edit}
    
    * @private
    */
    drawLine(posA: vec3, posB: vec3, color: vec4): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-drawSolidBox.md Edit}
    
    * @private
    */
    drawSolidBox(position: vec3, width: number, height: number, depth: number, color: vec4): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-drawSolidSphere.md Edit}
    
    * @private
    */
    drawSolidSphere(position: vec3, radius: number, color: vec4): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-drawSolidTriangle.md Edit}
    
    * @private
    */
    drawSolidTriangle(vertex1: vec3, vertex2: vec3, vertex3: vec3, color: vec4): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-drawSphere.md Edit}
    
    * @private
    */
    drawSphere(position: vec3, radius: number, color: vec4): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-reserveVertices.md Edit}
    
    * @deprecated
    
    * @private
    */
    reserveVertices(vertexCount: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/methods/DebugRender-reserveVerticesForTopology.md Edit}
    
    * @private
    */
    reserveVerticesForTopology(vertexCount: number, topology: MeshTopology): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/properties/DebugRender-depthTest.md Edit}
    
    * @private
    */
    depthTest: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/properties/DebugRender-depthWrite.md Edit}
    
    * @private
    */
    depthWrite: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/properties/DebugRender-isAutoClear.md Edit}
    
    * @private
    */
    isAutoClear: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DebugRender/properties/DebugRender-isBlendModeNormalAvailable.md Edit}
    
    * @private
    */
    isBlendModeNormalAvailable: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeformingCollisionMesh/DeformingCollisionMesh-description.md Edit}
*/
interface DeformingCollisionMesh extends CollisionMesh {
}

/**
* Creates a buffer for the audio data.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Delay/Delay-description.md Edit}
*/
interface Delay extends ScriptObject {
    /**
    * Process current frame data passed in `inTensor` of shape `inShape`, writes the result (delayed frame) to the `outTensor` and returns the shape of `outTensor`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Delay/methods/Delay-process.md Edit}
    */
    process(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): vec3
    
    /**
    * Maximum amount of features (channels).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Delay/properties/Delay-maxTensorSize.md Edit}
    
    * @readonly
    */
    maxTensorSize: number
    
}

/**
* Builder class for the Delay.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayBuilder/DelayBuilder-description.md Edit}
*/
interface DelayBuilder extends ScriptObject {
    /**
    * Creates new Delay object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayBuilder/methods/DelayBuilder-build.md Edit}
    */
    build(): Delay
    
    /**
    * Set the delay of the Delay object in samples. Delay is equal to `sampleRate * delayInSeconds`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayBuilder/methods/DelayBuilder-setDelay.md Edit}
    */
    setDelay(delay: number): DelayBuilder
    
    /**
    * Specify number of channels. Currently, only mono is supported, so should be set to `1`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayBuilder/methods/DelayBuilder-setNumFeatures.md Edit}
    */
    setNumFeatures(numFeatures: number): DelayBuilder
    
}

/**
* An event that gets triggered after a delay.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayedCallbackEvent/DelayedCallbackEvent-description.md Edit}
*/
interface DelayedCallbackEvent extends SceneEvent {
    /**
    * Cancel the callback in progress.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayedCallbackEvent/methods/DelayedCallbackEvent-cancel.md Edit}
    */
    cancel(): void
    
    /**
    * Returns the total delay time in seconds set on the event.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayedCallbackEvent/methods/DelayedCallbackEvent-getDelayTime.md Edit}
    */
    getDelayTime(): number
    
    /**
    * Returns the current time in seconds left in the event's delay.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayedCallbackEvent/methods/DelayedCallbackEvent-getTimeLeft.md Edit}
    */
    getTimeLeft(): number
    
    /**
    * Calling this will cause the event to trigger in `time` seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DelayedCallbackEvent/methods/DelayedCallbackEvent-reset.md Edit}
    */
    reset(time: number): void
    
}

/**
* Local estimate of the derivative of the input data along the selected axis. Outputs the derivative of the input features along the window.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Delta/Delta-description.md Edit}
*/
interface Delta extends ScriptObject {
    /**
    * Process `inTensor` with shape `inShape` and writes the result to the `outTensor` and returns the shape of `outTensor`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Delta/methods/Delta-process.md Edit}
    */
    process(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): vec3
    
    /**
    * Maximum amount of features (channels).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Delta/properties/Delta-maxTensorSize.md Edit}
    
    * @readonly
    */
    maxTensorSize: number
    
}

/**
* Builder class for Delta.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeltaBuilder/DeltaBuilder-description.md Edit}
*/
interface DeltaBuilder extends ScriptObject {
    /**
    * Create a new Delta object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeltaBuilder/methods/DeltaBuilder-build.md Edit}
    */
    build(): Delta
    
    /**
    * Specify number of channels. Currently, only mono is supported, so should be set to `1`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeltaBuilder/methods/DeltaBuilder-setNumFeatures.md Edit}
    */
    setNumFeatures(numFeatures: number): DeltaBuilder
    
    /**
    * Set the size of the window.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeltaBuilder/methods/DeltaBuilder-setWindowSize.md Edit}
    */
    setWindowSize(winSize: number): DeltaBuilder
    
}

/**
* Settings for the depth clear option modes on a DepthStencilRenderTargetProvider.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthClearOption/DepthClearOption-description.md Edit}
*/
declare enum DepthClearOption {
    /**
    * Do not clear the depth buffer, just keep values. Equal to disabled clear depth checkbox in Camera in previous Studio version.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthClearOption/properties/DepthClearOption-None.md Edit}
    */
    None,
    /**
    * Clear depth buffer by specific value. Equal to enabled clear depth checkbox in Camera in previous Studio version.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthClearOption/properties/DepthClearOption-CustomValue.md Edit}
    */
    CustomValue,
    /**
    * Clear depth buffer by values from depth part of input texture. Will use custom value in case of unavailable input texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthClearOption/properties/DepthClearOption-CustomTexture.md Edit}
    */
    CustomTexture
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthExtractionModel/DepthExtractionModel-description.md Edit}

* @private
*/
interface DepthExtractionModel extends BinAsset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/DepthMeshBuilder-description.md Edit}

* @private
*/
declare class DepthMeshBuilder {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/methods/DepthMeshBuilder-DepthMeshBuilder.md Edit}
    
    * @private
    */
    constructor()
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/methods/DepthMeshBuilder-build.md Edit}
    
    * @private
    */
    build(depthmap: Texture, minDepth: number, maxDepth: number, normalizedFocalLength: vec2): RenderMesh
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/properties/DepthMeshBuilder-bilinearInterpolation.md Edit}
    
    * @private
    */
    bilinearInterpolation: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/properties/DepthMeshBuilder-cutThreshold.md Edit}
    
    * @private
    */
    cutThreshold: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/properties/DepthMeshBuilder-downsampleFactor.md Edit}
    
    * @private
    */
    downsampleFactor: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/properties/DepthMeshBuilder-meshType.md Edit}
    
    * @private
    */
    meshType: DepthMeshBuilder.MeshType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/properties/DepthMeshBuilder-roamErrorThreshold.md Edit}
    
    * @private
    */
    roamErrorThreshold: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder/properties/DepthMeshBuilder-roamSubdivisionMaxDepth.md Edit}
    
    * @private
    */
    roamSubdivisionMaxDepth: number
    
}

declare namespace DepthMeshBuilder {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder.MeshType/DepthMeshBuilder.MeshType-description.md Edit}
    
    * @private
    */
    enum MeshType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder.MeshType/properties/DepthMeshBuilder.MeshType-Grid.md Edit}
        
        * @private
        */
        Grid,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthMeshBuilder.MeshType/properties/DepthMeshBuilder.MeshType-Roam.md Edit}
        
        * @private
        */
        Roam
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions/DepthProcessingOptions-description.md Edit}

* @private
*/
interface DepthProcessingOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions/properties/DepthProcessingOptions-alignFrontFacingDepthToImage.md Edit}
    
    * @private
    */
    alignFrontFacingDepthToImage: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions/properties/DepthProcessingOptions-cropDepthToImage.md Edit}
    
    * @private
    */
    cropDepthToImage: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions/properties/DepthProcessingOptions-depthModelAsset.md Edit}
    
    * @private
    */
    depthModelAsset: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions/properties/DepthProcessingOptions-enableModelBasedTracking.md Edit}
    
    * @private
    */
    enableModelBasedTracking: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions/properties/DepthProcessingOptions-guidedFilterEnabled.md Edit}
    
    * @private
    */
    guidedFilterEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions/properties/DepthProcessingOptions-holeFillingStrategy.md Edit}
    
    * @private
    */
    holeFillingStrategy: DepthProcessingOptions.HoleFillingStrategy
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions/properties/DepthProcessingOptions-holeReplacementValue.md Edit}
    
    * @private
    */
    holeReplacementValue: number
    
}

declare namespace DepthProcessingOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions.HoleFillingStrategy/DepthProcessingOptions.HoleFillingStrategy-description.md Edit}
    
    * @private
    */
    enum HoleFillingStrategy {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions.HoleFillingStrategy/properties/DepthProcessingOptions.HoleFillingStrategy-None.md Edit}
        
        * @private
        */
        None,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions.HoleFillingStrategy/properties/DepthProcessingOptions.HoleFillingStrategy-MinimumInWindow.md Edit}
        
        * @private
        */
        MinimumInWindow,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthProcessingOptions.HoleFillingStrategy/properties/DepthProcessingOptions.HoleFillingStrategy-FixedValue.md Edit}
        
        * @private
        */
        FixedValue
    }

}

/**
* Writes video feed depth information to the depth buffer, which automatically sets up depth occlusion for 3D visuals.
* Only works in some cases, such as in Lenses for Spectacles 3.
* See the [Lenses for Spectacles guide](https://lensstudio.snapchat.com/lens-studio/references/guides/distributing/spectacles/spectacles-3/lenses-for-spectacles-3) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthSetter/DepthSetter-description.md Edit}
*/
interface DepthSetter extends PostEffectVisual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthSetter/properties/DepthSetter-guidedFilterEnabled.md Edit}
    
    * @private
    */
    guidedFilterEnabled: boolean
    
}

/**
* Access to a Depth Stencil Render Target that can output depth and stencil values from a Camera in Depth24/Stencil8 format.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/DepthStencilRenderTargetProvider-description.md Edit}
*/
interface DepthStencilRenderTargetProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-clearDepth.md Edit}
    
    * @deprecated
    
    * @private
    */
    clearDepth: number
    
    /**
    * Float value in range [0.0..1.0] used in depth buffer clear operation in "CustomValue" mode. The initial value is 1.0.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-clearDepthValue.md Edit}
    */
    clearDepthValue: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-clearStencil.md Edit}
    
    * @deprecated
    
    * @private
    */
    clearStencil: number
    
    /**
    * Unsigned int value in range [0..0xFF] used in stencil buffer clear operation in "CustomValue" mode. The initial value is 0.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-clearStencilValue.md Edit}
    */
    clearStencilValue: number
    
    /**
    * Depth buffer clear option.  "None" - depth buffer clear operation will be skipped.  "CustomValue" - depth buffer will be cleared by "clearDepthValue" property value. "CustomTexture" - depth buffer will be cleared by texture from "inputTexture" property, if "inputTexture" is null then depth clear option will fallback to "CustomValue" mode.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-depthClearOption.md Edit}
    */
    depthClearOption: DepthClearOption
    
    /**
    * Texture with Depth24_Stencil8 format. Depth24 part used in depth clear operation in "CustomTexture" mode.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-inputTexture.md Edit}
    */
    inputTexture: Texture
    
    /**
    * Texture with Depth24_Stencil8 format. Stencil8 part used in stencil clear operation in "CustomTexture" mode.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-maskTexture.md Edit}
    */
    maskTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-mipmapsEnabled.md Edit}
    
    * @private
    */
    mipmapsEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-outputResolution.md Edit}
    
    * @private
    */
    outputResolution: DepthStencilRenderTargetProvider.OutputResolution
    
    /**
    * Custom render target resolution, this property will use if the "outputResolution" property is a "Custom".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-resolution.md Edit}
    */
    resolution: vec2
    
    /**
    * Stencil buffer clear option.  "None" - stencil buffer clear operation will be skipped.  "CustomValue" - stencil buffer will be cleared by "clearStencilValue" property value. "CustomTexture" - stencil buffer will be cleared by texture from "maskTexture" property, if "maskTexture" is null then the stencil clear option will fallback to "CustomValue" mode.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/properties/DepthStencilRenderTargetProvider-stencilClearOption.md Edit}
    */
    stencilClearOption: StencilClearOption
    
}
declare namespace DepthStencilRenderTargetProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/methods/DepthStencilRenderTargetProvider-inputAndMaskSupported.md Edit}
    
    * @deprecated
    
    * @private
    */
    export function inputAndMaskSupported(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider/methods/DepthStencilRenderTargetProvider-stencilBufferSupported.md Edit}
    
    * @deprecated
    
    * @private
    */
    export function stencilBufferSupported(): boolean
    

}

declare namespace DepthStencilRenderTargetProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider.OutputResolution/DepthStencilRenderTargetProvider.OutputResolution-description.md Edit}
    
    * @private
    */
    enum OutputResolution {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider.OutputResolution/properties/DepthStencilRenderTargetProvider.OutputResolution-Custom.md Edit}
        
        * @private
        */
        Custom,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthStencilRenderTargetProvider.OutputResolution/properties/DepthStencilRenderTargetProvider.OutputResolution-Camera.md Edit}
        
        * @private
        */
        Camera
    }

}

/**
* Provides depth information of the video feed that the Lens is being applied to when available, such as in Lenses for Spectacles 3.
* Can be accessed from `mainPass.baseTex.control` of a Spectacles Depth material.

* See the [Lenses for Spectacles guide](https://lensstudio.snapchat.com/lens-studio/references/guides/distributing/spectacles/spectacles-2021/lenses-for-spectacles) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthTextureProvider/DepthTextureProvider-description.md Edit}
*/
interface DepthTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthTextureProvider/methods/DepthTextureProvider-getDepthToDisparityNumerator.md Edit}
    
    * @private
    */
    getDepthToDisparityNumerator(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthTextureProvider/methods/DepthTextureProvider-getScale.md Edit}
    
    * @private
    */
    getScale(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthTextureProvider/methods/DepthTextureProvider-sampleDepthAtPoint.md Edit}
    
    * @exposesUserData
    */
    sampleDepthAtPoint(point: vec2): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthTextureProvider/properties/DepthTextureProvider-depthProcessingOptions.md Edit}
    
    * @readonly
    
    * @private
    */
    depthProcessingOptions: DepthProcessingOptions
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DepthTextureProvider/properties/DepthTextureProvider-dilatedDepthEnabled.md Edit}
    
    * @private
    */
    dilatedDepthEnabled: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/DetectedHandObject-description.md Edit}

* @private
*/
interface DetectedHandObject extends DetectedObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/methods/DetectedHandObject-getHandSize.md Edit}
    
    * @private
    */
    getHandSize(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/methods/DetectedHandObject-getNormDirection.md Edit}
    
    * @private
    */
    getNormDirection(): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/methods/DetectedHandObject-getPalmDirection.md Edit}
    
    * @private
    */
    getPalmDirection(): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/methods/DetectedHandObject-getPalmPoint.md Edit}
    
    * @private
    */
    getPalmPoint(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/methods/DetectedHandObject-getWristPoint.md Edit}
    
    * @private
    */
    getWristPoint(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/methods/DetectedHandObject-isClosed.md Edit}
    
    * @private
    */
    isClosed(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/methods/DetectedHandObject-isOpened.md Edit}
    
    * @private
    */
    isOpened(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedHandObject/methods/DetectedHandObject-isPointing.md Edit}
    
    * @private
    */
    isPointing(): boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedObject/DetectedObject-description.md Edit}

* @private
*/
interface DetectedObject extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedObject/methods/DetectedObject-getCenter.md Edit}
    
    * @private
    */
    getCenter(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedObject/methods/DetectedObject-getId.md Edit}
    
    * @private
    */
    getId(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedObject/methods/DetectedObject-getLabel.md Edit}
    
    * @private
    */
    getLabel(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DetectedObject/methods/DetectedObject-getSize.md Edit}
    
    * @private
    */
    getSize(): vec2
    
}

/**
* Provides information about the device's camera.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/DeviceCamera-description.md Edit}
*/
interface DeviceCamera extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/methods/DeviceCamera-project.md Edit}
    */
    project(pointInDeviceReferenceNode: vec3): vec2
    
    /**
    * Unprojects the normalized screen space point `normalizedScreenSpacePoint` based on some distance `absoluteDepth`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/methods/DeviceCamera-unproject.md Edit}
    */
    unproject(normalizedScreenSpacePoint: vec2, absoluteDepth: number): vec3
    
    /**
    * Provides the focal length of the device's camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/properties/DeviceCamera-focalLength.md Edit}
    
    * @readonly
    */
    focalLength: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/properties/DeviceCamera-fov.md Edit}
    
    * @readonly
    
    * @private
    */
    fov: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/properties/DeviceCamera-isFrontCamera.md Edit}
    
    * @readonly
    
    * @private
    */
    isFrontCamera: boolean
    
    /**
    * Provides the transform of the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/properties/DeviceCamera-pose.md Edit}
    
    * @readonly
    */
    pose: mat4
    
    /**
    * Provides the principal point, or center of image, of the device's camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/properties/DeviceCamera-principalPoint.md Edit}
    
    * @readonly
    */
    principalPoint: vec2
    
    /**
    * Provides the resolution of the image returned by the device's camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceCamera/properties/DeviceCamera-resolution.md Edit}
    
    * @readonly
    */
    resolution: vec2
    
}

/**
* Provides information about the device running the Lens. Accessible through `global.deviceInfoSystem`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/DeviceInfoSystem-description.md Edit}
*/
interface DeviceInfoSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getDeviceClass.md Edit}
    
    * @private
    */
    getDeviceClass(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getDeviceModel.md Edit}
    
    * @private
    */
    getDeviceModel(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getDeviceMotionSensorPresence.md Edit}
    
    * @private
    */
    getDeviceMotionSensorPresence(): number
    
    /**
    * Returns the operating system type of the device.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getOS.md Edit}
    
    * @exposesUserData
    */
    getOS(): OS
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getOsVersion.md Edit}
    
    * @deprecated
    
    * @private
    */
    getOsVersion(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getSnapOSVersion.md Edit}
    
    * @private
    */
    getSnapOSVersion(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getTargetOS.md Edit}
    
    * @deprecated
    
    * @private
    */
    getTargetOS(): string
    
    /**
    * Provides the tracking camera's [DeviceCamera](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#DeviceCamera).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getTrackingCamera.md Edit}
    */
    getTrackingCamera(): DeviceCamera
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-getTrackingCameraForId.md Edit}
    
    * @experimental
    
    * @snapOsOnly
    */
    getTrackingCameraForId(cameraId: CameraModule.CameraId): DeviceCamera
    
    /**
    * Returns whether the current Lens is running in a desktop computer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-isDesktop.md Edit}
    */
    isDesktop(): boolean
    
    /**
    * Returns whether the current Lens is running in Lens Studio.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-isEditor.md Edit}
    */
    isEditor(): boolean
    
    /**
    * Returns whether the current Lens is running in a mobile device.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-isMobile.md Edit}
    */
    isMobile(): boolean
    
    /**
    * Returns whether the current Lens is running in a Spectacles device.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-isSpectacles.md Edit}
    */
    isSpectacles(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/methods/DeviceInfoSystem-supportsNativeTracking.md Edit}
    
    * @deprecated
    
    * @private
    */
    supportsNativeTracking(): boolean
    
    /**
    * Returns the PerformanceIndexes object, which provides performance information about the device.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/properties/DeviceInfoSystem-performanceIndexes.md Edit}
    
    * @unreleased
    
    * @readonly
    */
    performanceIndexes: PerformanceIndexes
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceInfoSystem/properties/DeviceInfoSystem-screenScale.md Edit}
    
    * @readonly
    */
    screenScale: number
    
}

/**
* Used to track a landmarker in the camera. Moves the SceneObject's transform to match the detected landmarker scene.
* See the [Landmarker guide](https://lensstudio.snapchat.com/templates/landmarker) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/DeviceLocationTrackingComponent-description.md Edit}
*/
interface DeviceLocationTrackingComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/methods/DeviceLocationTrackingComponent-isMarkerTracking.md Edit}
    
    * @private
    */
    isMarkerTracking(): boolean
    
    /**
    * Returns whether the location landmarker is currently being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/methods/DeviceLocationTrackingComponent-isTracking.md Edit}
    */
    isTracking(): boolean
    
    /**
    * Returns the distance, in meters, to the location. If the distance is unavailable, -1 is returned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/properties/DeviceLocationTrackingComponent-distanceToLocation.md Edit}
    
    * @readonly
    */
    distanceToLocation: number
    
    /**
    * The location that the tracker is tracking. Useful for dynamically controlling the target location being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/properties/DeviceLocationTrackingComponent-location.md Edit}
    */
    location: LocationAsset
    
    /**
    * Returns the user's current LocationProximityStatus. Useful for telling if a user is close enough to the location to track it.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/properties/DeviceLocationTrackingComponent-locationProximityStatus.md Edit}
    
    * @readonly
    */
    locationProximityStatus: LocationProximityStatus
    
    /**
    * A function that gets called when location data fails to download.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/properties/DeviceLocationTrackingComponent-onLocationDataDownloadFailed.md Edit}
    */
    onLocationDataDownloadFailed: () => void
    
    /**
    * A function that gets called when location data is downloaded.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/properties/DeviceLocationTrackingComponent-onLocationDataDownloaded.md Edit}
    */
    onLocationDataDownloaded: () => void
    
    /**
    * A function that gets called when location is found.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/properties/DeviceLocationTrackingComponent-onLocationFound.md Edit}
    */
    onLocationFound: () => void
    
    /**
    * A function that gets called when location is lost. Note this will also happen when the user flips the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceLocationTrackingComponent/properties/DeviceLocationTrackingComponent-onLocationLost.md Edit}
    */
    onLocationLost: () => void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceMotion/DeviceMotion-description.md Edit}

* @private
*/
interface DeviceMotion extends AbstractData {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceMotion/methods/DeviceMotion-getAcceleration.md Edit}
    
    * @private
    */
    getAcceleration(): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceMotion/methods/DeviceMotion-getRotationMatrix.md Edit}
    
    * @private
    */
    getRotationMatrix(): mat3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceMotion/methods/DeviceMotion-isDeviceMotionAvailable.md Edit}
    
    * @private
    */
    isDeviceMotionAvailable(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceMotion/properties/DeviceMotion-compassAligned.md Edit}
    
    * @private
    */
    compassAligned: boolean
    
}

/**
* Moves or rotates the SceneObject to match device orientation.

* If using "Surface" tracking mode, adding this to a SceneObject enables surface tracking for the scene, and moves the
* object to a position and rotation that matches the physical camera's pose in the world. Surface tracking can also be enhanced
* with native AR by enabling the "Use Native AR" option in the Inspector panel, or through script by setting the
* component's [`surfaceOptions.enhanceWithNativeAR`](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SurfaceOptions) property.

* If using "Rotation" tracking mode, adding this to a SceneObject will apply the device's real world rotation to the object.

* If using "World" tracking mode, adding this to a SceneObject enables native AR tracking for the scene, and moves the
* object to a position and rotation that matches the physical camera's pose in the world.

* See the [Tracking Modes](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/tracking-modes) guide for more information.

**Note:** This component was named "WorldTracking" in previous versions of Lens Studio.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/DeviceTracking-description.md Edit}
*/
interface DeviceTracking extends Component {
    /**
    * Calculates a histogram of world mesh surfaces within a sphere at the given world position and radius. Only available when world mesh tracking is supported and enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-calculateWorldMeshHistogram.md Edit}
    */
    calculateWorldMeshHistogram(center: vec3, radius: number): TrackedMeshHistogramResult
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-createTrackedPoint.md Edit}
    
    * @private
    */
    createTrackedPoint(sceneObject: SceneObject, worldPos: vec3, plane: TrackedPlane): TrackedPointComponent
    
    /**
    * Creates a TrackedPoint at world position `worldPos` and world rotation `worldRot`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-createTrackedWorldPoint.md Edit}
    */
    createTrackedWorldPoint(worldPos: vec3, worldRot: quat): TrackedPoint
    
    /**
    * Returns the actual DeviceTrackingMode being used. This may be different from the requested DeviceTrackingMode.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-getActualDeviceTrackingMode.md Edit}
    */
    getActualDeviceTrackingMode(): DeviceTrackingMode
    
    /**
    * Returns an array of BasicTransform objects describing each point that the camera travels through.
    * Each item in the array matches the camera's basic transform in the corresponding frame of the video feed that the Lens is applied to.
    * Only available in some cases, such as in Lenses for Spectacles 3. When not available, it will return an empty array.
    * See the [Lenses for Spectacles guide](https://lensstudio.snapchat.com/lens-studio/references/guides/distributing/spectacles/spectacles-2021/lenses-for-spectacles) for more information.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-getDevicePath.md Edit}
    */
    getDevicePath(): BasicTransform[]
    
    /**
    * Returns the current frame index of the video feed that the Lens is being applied to.
    * This can be used as an index to access the current BasicTransform in `getDevicePath()`.
    * Only available in some cases, such as in Lenses for Spectacles 3. When not available, it will return -1.
    * See the [Lenses for Spectacles guide](https://lensstudio.snapchat.com/lens-studio/references/guides/distributing/spectacles/spectacles-2021/lenses-for-spectacles) for more information.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-getDevicePathIndex.md Edit}
    */
    getDevicePathIndex(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-getNativeARTrackingState.md Edit}
    
    * @private
    */
    getNativeARTrackingState(): NativeARTrackingState
    
    /**
    * Returns the 3D point cloud representing important features visible by the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-getPointCloud.md Edit}
    
    * @exposesUserData
    */
    getPointCloud(): PointCloud
    
    /**
    * Returns the DeviceTrackingMode currently requested to be used.
    * This may be different from the actual DeviceTrackingMode being used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-getRequestedDeviceTrackingMode.md Edit}
    */
    getRequestedDeviceTrackingMode(): DeviceTrackingMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-getSurfaceTrackingPoint.md Edit}
    
    * @private
    */
    getSurfaceTrackingPoint(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-getTransformSequence.md Edit}
    
    * @deprecated
    
    * @private
    */
    getTransformSequence(): Transform[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-hitTest.md Edit}
    
    * @unreleased
    */
    hitTest(screenPos: vec2): TrackedPlaneHitTestResult[]
    
    /**
    * Returns an array of TrackedMeshHitTestResult that intersect with a ray cast from screen position screenPos. Only available when world mesh tracking is supported and enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-hitTestWorldMesh.md Edit}
    */
    hitTestWorldMesh(screenPos: vec2): TrackedMeshHitTestResult[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-hitTestWorldMeshRough.md Edit}
    
    * @private
    */
    hitTestWorldMeshRough(screenPos: vec2): TrackedMeshHitTestResult[]
    
    /**
    * Returns whether the DeviceTrackingMode is supported.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-isDeviceTrackingModeSupported.md Edit}
    */
    isDeviceTrackingModeSupported(mode: DeviceTrackingMode): boolean
    
    /**
    * Returns an array of TrackedMeshHitTestResult that intersect with a ray cast from the world position `from` and continuing through the world position `to`. Only available when world mesh tracking is supported and enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-raycastWorldMesh.md Edit}
    */
    raycastWorldMesh(from: vec3, to: vec3): TrackedMeshHitTestResult[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-raycastWorldMeshRough.md Edit}
    
    * @private
    */
    raycastWorldMeshRough(from: vec3, to: vec3): TrackedMeshHitTestResult[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-registerSceneObjectOfInterest.md Edit}
    
    * @deprecated
    
    * @private
    */
    registerSceneObjectOfInterest(obj: SceneObject): void
    
    /**
    * Requests that a DeviceTrackingMode be used. This requested change may not happen immediately.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-requestDeviceTrackingMode.md Edit}
    */
    requestDeviceTrackingMode(val: DeviceTrackingMode): void
    
    /**
    * Resets the World Tracking origin to the point on the surface plane aligned with the screen position `position`.
    * Screen positions are represented in the range ([0-1], [0-1]), (0,0) being the top-left of the screen and (1,1) being the bottom-right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-resetTracking.md Edit}
    */
    resetTracking(position: vec2): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-setOnGyroscopeInitialized.md Edit}
    
    * @private
    */
    setOnGyroscopeInitialized(eventCallback: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-setTrackerMode.md Edit}
    
    * @deprecated
    
    * @private
    */
    setTrackerMode(type: TrackerMode): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-setTrackerType.md Edit}
    
    * @deprecated
    
    * @private
    */
    setTrackerType(type: TrackerMode): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-setWallModeEnabled.md Edit}
    
    * @deprecated
    
    * @private
    */
    setWallModeEnabled(enable: boolean): void
    
    /**
    * Offsets the default position of the World Tracking surface origin by `offset`.
    * Avoid using a `y` value of zero in `offset`, because it may cause problems with tracking.
    * If used outside of `Initialized` or `TurnOnEvent`, you will need to call `resetTracking()` to apply the offset.
    * Note: calling `resetTracking()` will overwrite the `x` and `z` components of the offset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-setWorldOriginOffset.md Edit}
    */
    setWorldOriginOffset(offset: vec3): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/methods/DeviceTracking-unregisterSceneObjectOfInterest.md Edit}
    
    * @deprecated
    
    * @private
    */
    unregisterSceneObjectOfInterest(obj: SceneObject): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/properties/DeviceTracking-drawDebug.md Edit}
    
    * @private
    */
    drawDebug: boolean
    
    /**
    * Used to access rotation tracking settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/properties/DeviceTracking-rotationOptions.md Edit}
    */
    rotationOptions: RotationOptions
    
    /**
    * Used to access surface tracking settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/properties/DeviceTracking-surfaceOptions.md Edit}
    */
    surfaceOptions: SurfaceOptions
    
    /**
    * Helps to improve surface tracking accuracy while the target `SceneObject` is being moved.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/properties/DeviceTracking-surfaceTrackingTarget.md Edit}
    */
    surfaceTrackingTarget: SceneObject
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/properties/DeviceTracking-trackedMeshes.md Edit}
    
    * @readonly
    
    * @private
    */
    trackedMeshes: TrackedMesh[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/properties/DeviceTracking-trackedPlanes.md Edit}
    
    * @readonly
    
    * @private
    */
    trackedPlanes: TrackedPlane[]
    
    /**
    * Returns the WorldOptions object of this component, which can be used to control World Tracking settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/properties/DeviceTracking-worldOptions.md Edit}
    */
    worldOptions: WorldOptions
    
    /**
    * Returns the World Tracking Capabilities of the current device.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTracking/properties/DeviceTracking-worldTrackingCapabilities.md Edit}
    
    * @readonly
    */
    worldTrackingCapabilities: WorldTrackingCapabilities
    
}

/**
* Tracking modes used by the [DeviceTracking](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) component to specify what type of tracking to use.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTrackingMode/DeviceTrackingMode-description.md Edit}
*/
declare enum DeviceTrackingMode {
    /**
    * Use gyroscope tracking (rotation only)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTrackingMode/properties/DeviceTrackingMode-Rotation.md Edit}
    */
    Rotation,
    /**
    * Use surface tracking (position and rotation)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTrackingMode/properties/DeviceTrackingMode-Surface.md Edit}
    */
    Surface,
    /**
    * Use native tracking (position and rotation)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTrackingMode/properties/DeviceTrackingMode-World.md Edit}
    */
    World
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceTrackingModule/DeviceTrackingModule-description.md Edit}
*/
interface DeviceTrackingModule extends Asset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIAction/DeviceUIAction-description.md Edit}

* @private
*/
declare enum DeviceUIAction {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIAction/properties/DeviceUIAction-Tap.md Edit}
    
    * @private
    */
    Tap,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIAction/properties/DeviceUIAction-LongTapStart.md Edit}
    
    * @private
    */
    LongTapStart,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIAction/properties/DeviceUIAction-LongTapRelease.md Edit}
    
    * @private
    */
    LongTapRelease,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIAction/properties/DeviceUIAction-Unknown.md Edit}
    
    * @private
    */
    Unknown
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIElement/DeviceUIElement-description.md Edit}

* @private
*/
declare enum DeviceUIElement {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIElement/properties/DeviceUIElement-SnapButton.md Edit}
    
    * @private
    */
    SnapButton,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIElement/properties/DeviceUIElement-LensAttachmentButton.md Edit}
    
    * @private
    */
    LensAttachmentButton,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DeviceUIElement/properties/DeviceUIElement-Unknown.md Edit}
    
    * @private
    */
    Unknown
}

declare namespace Dialog {
    /**
    * Provides answer information in response to `DialogModule.askQuestions()`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Dialog.Answer/Dialog.Answer-description.md Edit}
    */
    interface Answer extends ScriptObject {
        /**
        * The answer to the question.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Dialog.Answer/properties/Dialog.Answer-answer.md Edit}
        
        * @readonly
        */
        answer: string
        
        /**
        * The index of the question this is answering in the questions array.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Dialog.Answer/properties/Dialog.Answer-questionId.md Edit}
        
        * @readonly
        */
        questionId: number
        
        /**
        * Status of the question response.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Dialog.Answer/properties/Dialog.Answer-status.md Edit}
        
        * @readonly
        */
        status: number
        
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DialogModule/DialogModule-description.md Edit}
*/
interface DialogModule extends Asset {
    /**
    * Sends a request to ask questions using the DialogModule. `context` is the text the model will use as context for answering the question. `questions` is a list of questions to ask. When answers are ready, `onQuestionsAnswerComplete` will be called with a list of `Dialog.Answer` objects corresponding to the questions in the `questions` list. `onQuestionsAnswerError` will be called if any error occurs.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DialogModule/methods/DialogModule-askQuestions.md Edit}
    */
    askQuestions(context: string, questions: string[], onQuestionsAnswerComplete: (answers: Dialog.Answer[]) => void, onQuestionsAnswerError: (error: number, description: string) => void): void
    
}

/**
* An Audio Component effect that simulates sound attenuation based on the orientation of the transform relative to the [AudioListenerComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AudioListenerComponent). 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DirectivityEffect/DirectivityEffect-description.md Edit}
*/
interface DirectivityEffect extends ScriptObject {
    /**
    * Whether the audio directivity effect is applied or not.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DirectivityEffect/properties/DirectivityEffect-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * The width of main lobe.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DirectivityEffect/properties/DirectivityEffect-shapeDecay.md Edit}
    */
    shapeDecay: number
    
    /**
    * A ratio that specifies the shape of pattern directivity from omnidirectional(0) to cardioid (1.0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DirectivityEffect/properties/DirectivityEffect-shapeFactor.md Edit}
    */
    shapeFactor: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DirectMultiplayerSessionOptions/DirectMultiplayerSessionOptions-description.md Edit}
*/
interface DirectMultiplayerSessionOptions extends BaseMultiplayerSessionOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DirectMultiplayerSessionOptions/properties/DirectMultiplayerSessionOptions-appInstanceId.md Edit}
    
    * @private
    */
    appInstanceId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DirectMultiplayerSessionOptions/properties/DirectMultiplayerSessionOptions-sessionId.md Edit}
    
    * @private
    */
    sessionId: string
    
}
declare namespace DirectMultiplayerSessionOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DirectMultiplayerSessionOptions/methods/DirectMultiplayerSessionOptions-create.md Edit}
    
    * @private
    */
    export function create(): DirectMultiplayerSessionOptions
    

}

/**
* An audio effect that simulates sound attenuation based on the distance between the Audio and the [AudioListenerComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AudioListenerComponent). 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DistanceEffect/DistanceEffect-description.md Edit}
*/
interface DistanceEffect extends ScriptObject {
    /**
    * If enabled, the distance effect will be applied.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DistanceEffect/properties/DistanceEffect-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DistanceEffect/properties/DistanceEffect-maxAttenuation.md Edit}
    
    * @private
    */
    maxAttenuation: number
    
    /**
    * If the distance is higher than this value, the sound cannot be heard at all.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DistanceEffect/properties/DistanceEffect-maxDistance.md Edit}
    */
    maxDistance: number
    
    /**
    * If the distance is less than this value, the distance effect is not applied at all. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DistanceEffect/properties/DistanceEffect-minDistance.md Edit}
    */
    minDistance: number
    
    /**
    * Curve type that describes how volume attenuates with distance.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DistanceEffect/properties/DistanceEffect-type.md Edit}
    */
    type: Audio.DistanceCurveType
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DomainInfo/DomainInfo-description.md Edit}

* @unreleased
*/
interface DomainInfo {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DomainInfo/properties/DomainInfo-assetType.md Edit}
    
    * @readonly
    */
    assetType: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DomainInfo/properties/DomainInfo-description.md Edit}
    
    * @readonly
    */
    description: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DomainInfo/properties/DomainInfo-name.md Edit}
    
    * @readonly
    */
    name: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DomainInfo/properties/DomainInfo-states.md Edit}
    
    * @readonly
    */
    states: StateInfo[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DopplerEffect/DopplerEffect-description.md Edit}

* @private
*/
interface DopplerEffect extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DopplerEffect/properties/DopplerEffect-enabled.md Edit}
    
    * @private
    */
    enabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DopplerEffect/properties/DopplerEffect-velocityFactor.md Edit}
    
    * @private
    */
    velocityFactor: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DoubleTapEvent/DoubleTapEvent-description.md Edit}

* @unreleased
*/
interface DoubleTapEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DoubleTapEvent/methods/DoubleTapEvent-getTapPosition.md Edit}
    */
    getTapPosition(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DoubleTapEventArgs/DoubleTapEventArgs-description.md Edit}

* @unreleased
*/
interface DoubleTapEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DoubleTapEventArgs/properties/DoubleTapEventArgs-position.md Edit}
    
    * @readonly
    */
    position: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/DrawingSystem2D-description.md Edit}

* @private
*/
interface DrawingSystem2D extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-drawingHistoryUpdated.md Edit}
    
    * @private
    */
    drawingHistoryUpdated(canDrawOnOverlay: boolean, strokeCount: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-setColorCallback.md Edit}
    
    * @private
    */
    setColorCallback(callback: (color: vec4) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-setDeserializeCallback.md Edit}
    
    * @private
    */
    setDeserializeCallback(callback: (data: string) => number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-setDrawOverlayCallback.md Edit}
    
    * @private
    */
    setDrawOverlayCallback(callback: (enabled: boolean) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-setSelectBrushCallback.md Edit}
    
    * @private
    */
    setSelectBrushCallback(callback: (prefab: Prefab, id: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-setSerializeCallback.md Edit}
    
    * @private
    */
    setSerializeCallback(callback: () => any): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-setUndoCallback.md Edit}
    
    * @private
    */
    setUndoCallback(callback: () => number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-setUnicodeSymbolCallback.md Edit}
    
    * @private
    */
    setUnicodeSymbolCallback(callback: (symbol: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DrawingSystem2D/methods/DrawingSystem2D-setWidthCallback.md Edit}
    
    * @private
    */
    setWidthCallback(callback: (width: number) => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DriftCorrectionType/DriftCorrectionType-description.md Edit}

* @experimental

* @wearableOnly

* @private
*/
declare enum DriftCorrectionType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DriftCorrectionType/properties/DriftCorrectionType-SystemDefault.md Edit}
    
    * @private
    */
    SystemDefault,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DriftCorrectionType/properties/DriftCorrectionType-Disabled.md Edit}
    
    * @private
    */
    Disabled,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DriftCorrectionType/properties/DriftCorrectionType-Enabled.md Edit}
    
    * @private
    */
    Enabled
}

/**
* Used in [Text's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `dropShadowSettings` property.
* Configures how dropshadow will appear on a Text component.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DropshadowSettings/DropshadowSettings-description.md Edit}
*/
interface DropshadowSettings extends ScriptObject {
    /**
    * Whether dropshadow is enabled on the Text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DropshadowSettings/properties/DropshadowSettings-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * Settings for how the inside of the dropshadow is drawn.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DropshadowSettings/properties/DropshadowSettings-fill.md Edit}
    */
    fill: TextFill
    
    /**
    * An (x, y) offset controlling where the dropshadow is drawn relative to the Text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DropshadowSettings/properties/DropshadowSettings-offset.md Edit}
    */
    offset: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DynamicEnvLight/DynamicEnvLight-description.md Edit}

* @private
*/
interface DynamicEnvLight extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DynamicEnvLight/properties/DynamicEnvLight-color.md Edit}
    
    * @private
    */
    color: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DynamicEnvLight/properties/DynamicEnvLight-direction.md Edit}
    
    * @private
    */
    direction: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DynamicEnvLight/properties/DynamicEnvLight-intensity.md Edit}
    
    * @private
    */
    intensity: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DynamicMeshRenderObjectProvider/DynamicMeshRenderObjectProvider-description.md Edit}
*/
interface DynamicMeshRenderObjectProvider extends ProceduralMeshRenderObjectProvider {
}

/**
* A resource that is resolved at runtime.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DynamicResource/DynamicResource-description.md Edit}
*/
interface DynamicResource extends ScriptObject {
}
declare namespace DynamicResource {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DynamicResource/methods/DynamicResource-createEncryptedResourceWithUrl.md Edit}
    */
    export function createEncryptedResourceWithUrl(url: string, keyBytes: Uint8Array): DynamicResource
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/DynamicResource/methods/DynamicResource-createWithResourceId.md Edit}
    
    * @private
    */
    export function createWithResourceId(resourceId: string): DynamicResource
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EmojiTextureProvider/EmojiTextureProvider-description.md Edit}

* @private
*/
interface EmojiTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EmojiTextureProvider/methods/EmojiTextureProvider-setUnicodeSymbol.md Edit}
    
    * @private
    */
    setUnicodeSymbol(uniSymbol: string): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EncodingType/EncodingType-description.md Edit}

* @private
*/
declare enum EncodingType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EncodingType/properties/EncodingType-Png.md Edit}
    
    * @private
    */
    Png,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EncodingType/properties/EncodingType-Jpg.md Edit}
    
    * @private
    */
    Jpg
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EnvironmentMapTextureProvider/EnvironmentMapTextureProvider-description.md Edit}

* @private
*/
interface EnvironmentMapTextureProvider extends TextureProvider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EventPropertyTrack/EventPropertyTrack-description.md Edit}

* @private
*/
interface EventPropertyTrack extends AnimationPropertyTrack {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EventPropertyTrack/methods/EventPropertyTrack-addEvent.md Edit}
    
    * @private
    */
    addEvent(eventName: string, timestamp: number): AnimationPropertyEventRegistration
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EventPropertyTrack/methods/EventPropertyTrack-removeEvent.md Edit}
    
    * @private
    */
    removeEvent(registration: AnimationPropertyEventRegistration): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EventRegistration/EventRegistration-description.md Edit}
*/
interface EventRegistration extends ScriptObject {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExperimentalClass/ExperimentalClass-description.md Edit}
*/
declare class ExperimentalClass {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExperimentalClass/methods/ExperimentalClass-ExperimentalClass.md Edit}
    */
    constructor(id: number)
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExperimentalClass/methods/ExperimentalClass-getId.md Edit}
    
    * @experimental
    */
    getId(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExperimentSystem/ExperimentSystem-description.md Edit}

* @private
*/
interface ExperimentSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExperimentSystem/methods/ExperimentSystem-getExperimentParameter.md Edit}
    
    * @private
    */
    getExperimentParameter(experimentName: string, parameterName: string): string
    
}

/**
* Expression names used with `FaceRenderObjectProvider.getExpressionWeightByName()`
* and returned by `FaceRenderObjectProvider.getExpressionNames()`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/Expressions-description.md Edit}
*/
interface Expressions {
}
declare namespace Expressions {
    /**
    * Left eyebrow downward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-BrowsDownLeft.md Edit}
    */
    let BrowsDownLeft: string
    
    /**
    * Right eyebrow downward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-BrowsDownRight.md Edit}
    */
    let BrowsDownRight: string
    
    /**
    * Between eyebrows upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-BrowsUpCenter.md Edit}
    */
    let BrowsUpCenter: string
    
    /**
    * Left eyebrow upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-BrowsUpLeft.md Edit}
    */
    let BrowsUpLeft: string
    
    /**
    * Right eyebrow upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-BrowsUpRight.md Edit}
    */
    let BrowsUpRight: string
    
    /**
    * Left cheek and below left eye upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-CheekSquintLeft.md Edit}
    */
    let CheekSquintLeft: string
    
    /**
    * Right cheek and below right eye upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-CheekSquintRight.md Edit}
    */
    let CheekSquintRight: string
    
    /**
    * Left eyelids closing
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeBlinkLeft.md Edit}
    */
    let EyeBlinkLeft: string
    
    /**
    * Right eyelids closing
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeBlinkRight.md Edit}
    */
    let EyeBlinkRight: string
    
    /**
    * Left eyelids downward look
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeDownLeft.md Edit}
    */
    let EyeDownLeft: string
    
    /**
    * Right eyelids downward look
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeDownRight.md Edit}
    */
    let EyeDownRight: string
    
    /**
    * Left eyelids looking towards center
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeInLeft.md Edit}
    */
    let EyeInLeft: string
    
    /**
    * Right eyelids looking towards center
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeInRight.md Edit}
    */
    let EyeInRight: string
    
    /**
    * Left eyelids opening
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeOpenLeft.md Edit}
    */
    let EyeOpenLeft: string
    
    /**
    * Right eyelids opening
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeOpenRight.md Edit}
    */
    let EyeOpenRight: string
    
    /**
    * Left eyelids looking away from center
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeOutLeft.md Edit}
    */
    let EyeOutLeft: string
    
    /**
    * Right eyelids looking away from center
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeOutRight.md Edit}
    */
    let EyeOutRight: string
    
    /**
    * Left eye squinting
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeSquintLeft.md Edit}
    */
    let EyeSquintLeft: string
    
    /**
    * Right eye squinting
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeSquintRight.md Edit}
    */
    let EyeSquintRight: string
    
    /**
    * Left eyelids upward look
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeUpLeft.md Edit}
    */
    let EyeUpLeft: string
    
    /**
    * Right eyelids upward look
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-EyeUpRight.md Edit}
    */
    let EyeUpRight: string
    
    /**
    * Jaw forward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-JawForward.md Edit}
    */
    let JawForward: string
    
    /**
    * Jaw leftward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-JawLeft.md Edit}
    */
    let JawLeft: string
    
    /**
    * Jaw opening
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-JawOpen.md Edit}
    */
    let JawOpen: string
    
    /**
    * Jaw rightward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-JawRight.md Edit}
    */
    let JawRight: string
    
    /**
    * Lips forming open circular shape together
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-LipsFunnel.md Edit}
    */
    let LipsFunnel: string
    
    /**
    * Lips compressing together while closed
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-LipsPucker.md Edit}
    */
    let LipsPucker: string
    
    /**
    * Lower lip moving towards and behind upper lip
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-LowerLipClose.md Edit}
    */
    let LowerLipClose: string
    
    /**
    * Left lower lip downward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-LowerLipDownLeft.md Edit}
    */
    let LowerLipDownLeft: string
    
    /**
    * Right lower lip downward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-LowerLipDownRight.md Edit}
    */
    let LowerLipDownRight: string
    
    /**
    * Lower lip upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-LowerLipRaise.md Edit}
    */
    let LowerLipRaise: string
    
    /**
    * Lips moving together
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthClose.md Edit}
    */
    let MouthClose: string
    
    /**
    * Left mouth corner back and leftward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthDimpleLeft.md Edit}
    */
    let MouthDimpleLeft: string
    
    /**
    * Right mouth corner back and rightward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthDimpleRight.md Edit}
    */
    let MouthDimpleRight: string
    
    /**
    * Left mouth corner downward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthFrownLeft.md Edit}
    */
    let MouthFrownLeft: string
    
    /**
    * Right mouth corner downward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthFrownRight.md Edit}
    */
    let MouthFrownRight: string
    
    /**
    * Both lips leftward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthLeft.md Edit}
    */
    let MouthLeft: string
    
    /**
    * Both lips rightward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthRight.md Edit}
    */
    let MouthRight: string
    
    /**
    * Left mouth corner upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthSmileLeft.md Edit}
    */
    let MouthSmileLeft: string
    
    /**
    * Right mouth corner upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthSmileRight.md Edit}
    */
    let MouthSmileRight: string
    
    /**
    * Left side of mouth leftward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthStretchLeft.md Edit}
    */
    let MouthStretchLeft: string
    
    /**
    * Right side of mouth rightward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthStretchRight.md Edit}
    */
    let MouthStretchRight: string
    
    /**
    * Left side of mouth upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthUpLeft.md Edit}
    */
    let MouthUpLeft: string
    
    /**
    * Right side of mouth upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-MouthUpRight.md Edit}
    */
    let MouthUpRight: string
    
    /**
    * Both cheeks puffing outward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-Puff.md Edit}
    */
    let Puff: string
    
    /**
    * Left nostril raising
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-SneerLeft.md Edit}
    */
    let SneerLeft: string
    
    /**
    * Right nostril raising
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-SneerRight.md Edit}
    */
    let SneerRight: string
    
    /**
    * Upper lip moving towards and behind lower lip
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-UpperLipClose.md Edit}
    */
    let UpperLipClose: string
    
    /**
    * Upper lip upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-UpperLipRaise.md Edit}
    */
    let UpperLipRaise: string
    
    /**
    * Left upper lip upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-UpperLipUpLeft.md Edit}
    */
    let UpperLipUpLeft: string
    
    /**
    * Right upper lip upward movement
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Expressions/properties/Expressions-UpperLipUpRight.md Edit}
    */
    let UpperLipUpRight: string
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtendedTrackingMode/ExtendedTrackingMode-description.md Edit}

* @private
*/
declare enum ExtendedTrackingMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtendedTrackingMode/properties/ExtendedTrackingMode-None.md Edit}
    
    * @private
    */
    None,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtendedTrackingMode/properties/ExtendedTrackingMode-Gyro.md Edit}
    
    * @private
    */
    Gyro,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtendedTrackingMode/properties/ExtendedTrackingMode-SLAM.md Edit}
    
    * @private
    */
    SLAM
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExternalEvent/ExternalEvent-description.md Edit}

* @private
*/
interface ExternalEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExternalEvent/methods/ExternalEvent-getData.md Edit}
    
    * @private
    */
    getData(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExternalEvent/methods/ExternalEvent-getType.md Edit}
    
    * @private
    */
    getType(): string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExternalRendererComponent/ExternalRendererComponent-description.md Edit}
*/
interface ExternalRendererComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExternalRendererComponent/methods/ExternalRendererComponent-getEventHook.md Edit}
    */
    getEventHook(eventHookName: string): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExternalRendererComponent/properties/ExternalRendererComponent-rendererConfig.md Edit}
    */
    rendererConfig: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExternalStreamTextureProvider/ExternalStreamTextureProvider-description.md Edit}

* @private
*/
interface ExternalStreamTextureProvider extends TextureProvider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/ExtrudedMeshBuilder-description.md Edit}

* @private
*/
interface ExtrudedMeshBuilder extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/methods/ExtrudedMeshBuilder-buildMesh.md Edit}
    
    * @private
    */
    buildMesh(): RenderMesh
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/methods/ExtrudedMeshBuilder-toString.md Edit}
    
    * @private
    */
    toString(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-backFaceTextureOffset.md Edit}
    
    * @private
    */
    backFaceTextureOffset: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-curveSegmentPrecision.md Edit}
    
    * @private
    */
    curveSegmentPrecision: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-extrudeDepth.md Edit}
    
    * @private
    */
    extrudeDepth: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-faceTextureSize.md Edit}
    
    * @private
    */
    faceTextureSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-flipBackFaceTextureHorizontally.md Edit}
    
    * @private
    */
    flipBackFaceTextureHorizontally: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-flipBackFaceTextureVertically.md Edit}
    
    * @private
    */
    flipBackFaceTextureVertically: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-flipFrontFaceTextureHorizontally.md Edit}
    
    * @private
    */
    flipFrontFaceTextureHorizontally: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-flipFrontFaceTextureVertically.md Edit}
    
    * @private
    */
    flipFrontFaceTextureVertically: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-frontFaceTextureOffset.md Edit}
    
    * @private
    */
    frontFaceTextureOffset: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-holeMode.md Edit}
    
    * @private
    */
    holeMode: HoleMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-innerRepeats.md Edit}
    
    * @private
    */
    innerRepeats: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-innerSideTextureOffset.md Edit}
    
    * @private
    */
    innerSideTextureOffset: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-meshSerializationEnabled.md Edit}
    
    * @private
    */
    meshSerializationEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-outerRepeats.md Edit}
    
    * @private
    */
    outerRepeats: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-outerSideTextureOffset.md Edit}
    
    * @private
    */
    outerSideTextureOffset: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-sideTextureMode.md Edit}
    
    * @private
    */
    sideTextureMode: SideTextureMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-textureStartAngle.md Edit}
    
    * @private
    */
    textureStartAngle: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-tileInnerTexture.md Edit}
    
    * @private
    */
    tileInnerTexture: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ExtrudedMeshBuilder/properties/ExtrudedMeshBuilder-tileOuterTexture.md Edit}
    
    * @private
    */
    tileOuterTexture: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Eye/Eye-description.md Edit}

* @deprecated

* @private
*/
interface Eye extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Eye/properties/Eye-eyeIndex.md Edit}
    
    * @private
    */
    eyeIndex: EyeIndex
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Eye/properties/Eye-faceIndex.md Edit}
    
    * @private
    */
    faceIndex: number
    
}

/**
* Applies an eye color effect to a face.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeColorVisual/EyeColorVisual-description.md Edit}
*/
interface EyeColorVisual extends MaterialMeshVisual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeColorVisual/properties/EyeColorVisual-eyeToRender.md Edit}
    
    * @unreleased
    */
    eyeToRender: EyeToRender
    
    /**
    * The index of the face this EyeColorVisual is attached to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeColorVisual/properties/EyeColorVisual-faceIndex.md Edit}
    */
    faceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeColorVisual/properties/EyeColorVisual-rotationEnabled.md Edit}
    
    * @unreleased
    */
    rotationEnabled: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeIndex/EyeIndex-description.md Edit}

* @private
*/
declare enum EyeIndex {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeIndex/properties/EyeIndex-Left.md Edit}
    
    * @private
    */
    Left,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeIndex/properties/EyeIndex-Right.md Edit}
    
    * @private
    */
    Right
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeToRender/EyeToRender-description.md Edit}

* @unreleased
*/
declare enum EyeToRender {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeToRender/properties/EyeToRender-Left.md Edit}
    
    * @unreleased
    */
    Left,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeToRender/properties/EyeToRender-Right.md Edit}
    
    * @unreleased
    */
    Right,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/EyeToRender/properties/EyeToRender-Both.md Edit}
    
    * @unreleased
    */
    Both
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCount/FaceCount-description.md Edit}

* @private
*/
interface FaceCount {
}
declare namespace FaceCount {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCount/properties/FaceCount-Unlimited.md Edit}
    
    * @private
    */
    let Unlimited: number
    

}

/**
* Texture Provider giving a cropped region of the input texture, calculated based on face position.
* Can be accessed using `Texture.control` on a FaceCropTexture asset.
* For more information, see the [Crop Textures](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/crop-textures#crop-textures) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/FaceCropTextureProvider-description.md Edit}
*/
interface FaceCropTextureProvider extends CropTextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/methods/FaceCropTextureProvider-getCroppedLandmarks.md Edit}
    
    * @private
    */
    getCroppedLandmarks(): Float32Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-alignmentType.md Edit}
    
    * @private
    */
    alignmentType: MachineLearning.AlignmentType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-downMargin.md Edit}
    
    * @private
    */
    downMargin: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-eyeIndex.md Edit}
    
    * @private
    */
    eyeIndex: number
    
    /**
    * Ratio of the mouth position on the cropped texture. Value ranges from 0 to 1, with 0 having no effect and 1 centering the image on the mouth.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-faceCenterMouthWeight.md Edit}
    */
    faceCenterMouthWeight: number
    
    /**
    * Index of the face being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-faceIndex.md Edit}
    */
    faceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-horizontalMargin.md Edit}
    
    * @private
    */
    horizontalMargin: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-restrictCrop.md Edit}
    
    * @private
    */
    restrictCrop: number
    
    /**
    * Scaling of the cropped texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-textureScale.md Edit}
    */
    textureScale: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceCropTextureProvider/properties/FaceCropTextureProvider-upMargin.md Edit}
    
    * @private
    */
    upMargin: number
    
}

/**
* Triggered when a new face is detected and starts being tracked.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceFoundEvent/FaceFoundEvent-description.md Edit}
*/
interface FaceFoundEvent extends FaceTrackingEvent {
}

/**
* Controls the face image picker texture resource.
* Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#texture--control) on a Face Image Picker texture.
* For more information, see the [Face Image Picker Texture guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-image-picker-texture).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceImagePickerTextureProvider/FaceImagePickerTextureProvider-description.md Edit}
*/
interface FaceImagePickerTextureProvider extends ImagePickerTextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceImagePickerTextureProvider/methods/FaceImagePickerTextureProvider-getFaceRect.md Edit}
    
    * @deprecated
    
    * @private
    */
    getFaceRect(): vec4
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceImagePickerTextureProvider/methods/FaceImagePickerTextureProvider-requestFaceMesh.md Edit}
    
    * @private
    */
    requestFaceMesh(callback: () => void): void
    
    /**
    * If enabled, the selected image will be cropped to only show the face region.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceImagePickerTextureProvider/properties/FaceImagePickerTextureProvider-cropToFace.md Edit}
    */
    cropToFace: boolean
    
    /**
    * The FaceTextureProvider used to provide the face texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceImagePickerTextureProvider/properties/FaceImagePickerTextureProvider-faceControl.md Edit}
    */
    faceControl: FaceTextureProvider
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceImagePickerTextureProvider/properties/FaceImagePickerTextureProvider-useFace.md Edit}
    
    * @deprecated
    
    * @private
    */
    useFace: boolean
    
}

/**
* Used with [FaceInsetVisual.faceRegion](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#FaceInsetVisual) for setting the face region to draw.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetRegion/FaceInsetRegion-description.md Edit}
*/
declare enum FaceInsetRegion {
    /**
    * Targets the entire face
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetRegion/properties/FaceInsetRegion-Face.md Edit}
    */
    Face,
    /**
    * Targets the left eye
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetRegion/properties/FaceInsetRegion-LeftEye.md Edit}
    */
    LeftEye,
    /**
    * Targets the mouth
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetRegion/properties/FaceInsetRegion-Mouth.md Edit}
    */
    Mouth,
    /**
    * Targets the nose
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetRegion/properties/FaceInsetRegion-Nose.md Edit}
    */
    Nose,
    /**
    * Targets the right eye
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetRegion/properties/FaceInsetRegion-RightEye.md Edit}
    */
    RightEye
}

/**
* Draws a section of a tracked face.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/FaceInsetVisual-description.md Edit}
*/
interface FaceInsetVisual extends MaterialMeshVisual {
    /**
    * Returns the face region that the inset is applied to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/methods/FaceInsetVisual-getFaceRegion.md Edit}
    
    * @deprecated
    
    * @private
    */
    getFaceRegion(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/methods/FaceInsetVisual-setBarycentricCoordinates.md Edit}
    
    * @private
    */
    setBarycentricCoordinates(coordsJS: any[]): void
    
    /**
    * Applies the inset effect on `region`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/methods/FaceInsetVisual-setFaceRegion.md Edit}
    
    * @deprecated
    
    * @private
    */
    setFaceRegion(value: string): void
    
    /**
    * The index of the face this FaceInsetVisual uses.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-faceIndex.md Edit}
    */
    faceIndex: number
    
    /**
    * The region of the face this FaceInsetVisual draws.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-faceRegion.md Edit}
    */
    faceRegion: FaceInsetRegion
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-faceRegionIndices.md Edit}
    
    * @private
    */
    faceRegionIndices: number[]
    
    /**
    * Flips the drawn face region horizontally if enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-flipX.md Edit}
    */
    flipX: boolean
    
    /**
    * Flips the drawn face region vertically if enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-flipY.md Edit}
    */
    flipY: boolean
    
    /**
    * The amount of alpha fading applied from the border of the face inset inward.
    * This value must be in the range 0-1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-innerBorderRadius.md Edit}
    */
    innerBorderRadius: number
    
    /**
    * The amount of alpha fading applied from the border of the face inset outward.
    * This value must be in the range 0-1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-outerBorderRadius.md Edit}
    */
    outerBorderRadius: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-pivot.md Edit}
    
    * @private
    */
    pivot: vec2
    
    /**
    * The x and y scaling used to draw the face region.
    * Think of scaling as meaning how many times the face region could fit into the drawing area.
    * Higher values will zoom away from the face region, and lower values will zoom into it.
    * The normal, unzoomed scaling value is (1,1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-sourceScale.md Edit}
    */
    sourceScale: vec2
    
    /**
    * Determines the quality of the face inset's borders.
    * A higher value means better looking borders but lower performance.
    * This value must be greater than 10 and less than 100.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceInsetVisual/properties/FaceInsetVisual-subdivisionsCount.md Edit}
    */
    subdivisionsCount: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FacelessTextureProvider/FacelessTextureProvider-description.md Edit}

* @private
*/
interface FacelessTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FacelessTextureProvider/properties/FacelessTextureProvider-inputTexture.md Edit}
    
    * @private
    */
    inputTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FacelessTextureProvider/properties/FacelessTextureProvider-leftLarge.md Edit}
    
    * @readonly
    
    * @private
    */
    leftLarge: SkinSample
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FacelessTextureProvider/properties/FacelessTextureProvider-leftMedium.md Edit}
    
    * @readonly
    
    * @private
    */
    leftMedium: SkinSample
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FacelessTextureProvider/properties/FacelessTextureProvider-leftSmall.md Edit}
    
    * @readonly
    
    * @private
    */
    leftSmall: SkinSample
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FacelessTextureProvider/properties/FacelessTextureProvider-rightLarge.md Edit}
    
    * @readonly
    
    * @private
    */
    rightLarge: SkinSample
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FacelessTextureProvider/properties/FacelessTextureProvider-rightMedium.md Edit}
    
    * @readonly
    
    * @private
    */
    rightMedium: SkinSample
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FacelessTextureProvider/properties/FacelessTextureProvider-rightSmall.md Edit}
    
    * @readonly
    
    * @private
    */
    rightSmall: SkinSample
    
}

/**
* Triggered when a face can no longer be tracked.  For example, if a face gets blocked from the camera's view, or gets too far away.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceLostEvent/FaceLostEvent-description.md Edit}
*/
interface FaceLostEvent extends FaceTrackingEvent {
}

/**
* Applies a face mask effect. See the [Face Mask Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-mask) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/FaceMaskVisual-description.md Edit}
*/
interface FaceMaskVisual extends MaterialMeshVisual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-activeTriangleIndices.md Edit}
    
    * @unreleased
    */
    activeTriangleIndices: number[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-customMaskOnMouthClosed.md Edit}
    */
    customMaskOnMouthClosed: Texture
    
    /**
    * The index of the face this effect is attached to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-faceIndex.md Edit}
    */
    faceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-hidesMaskOnMouthClosed.md Edit}
    */
    hidesMaskOnMouthClosed: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-maskCoords.md Edit}
    
    * @unreleased
    */
    maskCoords: number[]
    
    /**
    * If "Use Orig. Face" is enabled for this FaceMaskVisual in the Inspector panel, this property
    * specifies the face index to use for drawing the mask.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-originalFaceIndex.md Edit}
    */
    originalFaceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-swapsMaskOnMouthClosed.md Edit}
    */
    swapsMaskOnMouthClosed: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-teethAlpha.md Edit}
    */
    teethAlpha: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-textureCoords.md Edit}
    
    * @unreleased
    */
    textureCoords: number[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-useOriginalTexCoords.md Edit}
    */
    useOriginalTexCoords: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMaskVisual/properties/FaceMaskVisual-useTextureFacePosition.md Edit}
    
    * @private
    */
    useTextureFacePosition: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMeshSource/FaceMeshSource-description.md Edit}

* @private
*/
declare enum FaceMeshSource {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMeshSource/properties/FaceMeshSource-FaceMorph.md Edit}
    
    * @private
    */
    FaceMorph,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceMeshSource/properties/FaceMeshSource-ARKit.md Edit}
    
    * @private
    */
    ARKit
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceNeutralityDataSender/FaceNeutralityDataSender-description.md Edit}

* @private
*/
interface FaceNeutralityDataSender extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceNeutralityDataSender/methods/FaceNeutralityDataSender-logMessage.md Edit}
    
    * @private
    */
    logMessage(message: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceNeutralityDataSender/methods/FaceNeutralityDataSender-sendImage.md Edit}
    
    * @private
    */
    sendImage(texture: Texture, shape: vec2): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceNeutralityDataSender/methods/FaceNeutralityDataSender-sendLandmarks.md Edit}
    
    * @private
    */
    sendLandmarks(landmarks: Float32Array): void
    
}
declare namespace FaceNeutralityDataSender {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceNeutralityDataSender/methods/FaceNeutralityDataSender-create.md Edit}
    
    * @private
    */
    export function create(): FaceNeutralityDataSender
    

}

/**
* Mesh provider for a Face Mesh. Accessible through the `control` property on a Face Mesh `RenderMesh`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/FaceRenderObjectProvider-description.md Edit}
*/
interface FaceRenderObjectProvider extends RenderObjectProvider {
    /**
    * Returns a list of all expression names being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/methods/FaceRenderObjectProvider-getExpressionNames.md Edit}
    */
    getExpressionNames(): string[]
    
    /**
    * Returns the weight of the expression with the passed in name. See [Expressions](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#Expressions) for valid expression names.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/methods/FaceRenderObjectProvider-getExpressionWeightByName.md Edit}
    */
    getExpressionWeightByName(expressionName: string): number
    
    /**
    * Returns a Float32Array of all expression weights being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/methods/FaceRenderObjectProvider-getExpressionWeights.md Edit}
    */
    getExpressionWeights(): Float32Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/methods/FaceRenderObjectProvider-getFaceFittingWeights.md Edit}
    
    * @private
    */
    getFaceFittingWeights(): Float32Array
    
    /**
    * When true, ears will be included in the Face Mesh geometry.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-earGeometryEnabled.md Edit}
    */
    earGeometryEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-externalFaceTexture.md Edit}
    
    * @private
    */
    externalFaceTexture: Texture
    
    /**
    * When true, a small area in the corners of the eyes will be included in the Face Mesh geometry.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-eyeCornerGeometryEnabled.md Edit}
    */
    eyeCornerGeometryEnabled: boolean
    
    /**
    * When true, eyes will be included in the Face Mesh geometry.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-eyeGeometryEnabled.md Edit}
    */
    eyeGeometryEnabled: boolean
    
    /**
    * When true, the general face (not including eyes and mouth) will be included in the Face Mesh geometry.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-faceGeometryEnabled.md Edit}
    */
    faceGeometryEnabled: boolean
    
    /**
    * Index of the face this FaceRenderObjectProvider mirrors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-faceIndex.md Edit}
    */
    faceIndex: number
    
    /**
    * When true, the mouth will be included in the Face Mesh geometry.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-mouthGeometryEnabled.md Edit}
    */
    mouthGeometryEnabled: boolean
    
    /**
    * When true, the skull will be included in the Face Mesh geometry.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-skullGeometryEnabled.md Edit}
    */
    skullGeometryEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceRenderObjectProvider/properties/FaceRenderObjectProvider-trackingScopeAsset.md Edit}
    
    * @private
    */
    trackingScopeAsset: TrackingScopeAsset
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceSegmentationPostprocessor/FaceSegmentationPostprocessor-description.md Edit}

* @private
*/
interface FaceSegmentationPostprocessor extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceSegmentationPostprocessor/methods/FaceSegmentationPostprocessor-addEyes.md Edit}
    
    * @private
    */
    addEyes(eyelids: Texture, pupil: Texture, iris: Texture, eye: Texture, shape: vec2): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceSegmentationPostprocessor/methods/FaceSegmentationPostprocessor-debug.md Edit}
    
    * @private
    */
    debug(out: Uint8Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceSegmentationPostprocessor/methods/FaceSegmentationPostprocessor-processEye.md Edit}
    
    * @private
    */
    processEye(eyelid: Float32Array, pupil: Float32Array, iris: Float32Array, eye: Float32Array, shape: vec2, flipX: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceSegmentationPostprocessor/methods/FaceSegmentationPostprocessor-processFace.md Edit}
    
    * @private
    */
    processFace(landmarks: vec2[], face: Float32Array, hair: Float32Array, neck: Float32Array, body: Float32Array, accessories: Float32Array, background: Float32Array, imageTexture: Texture, provider: CropTextureProvider, imageShape: vec2, maskShape: vec2, maxSideLengthBodyMatting: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceSegmentationPostprocessor/methods/FaceSegmentationPostprocessor-sendTarget.md Edit}
    
    * @private
    */
    sendTarget(maxSideLengthHeadExtraction: number, maxSideLengthMattingHead: number): void
    
}
declare namespace FaceSegmentationPostprocessor {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceSegmentationPostprocessor/methods/FaceSegmentationPostprocessor-create.md Edit}
    
    * @private
    */
    export function create(): FaceSegmentationPostprocessor
    

}

/**
* Applies a face stretch effect.
* Face stretch features can be added to a FaceStretchVisual through the Inspector panel in Lens Studio.
* See the [Face Stretch Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-stretch) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/FaceStretchVisual-description.md Edit}
*/
interface FaceStretchVisual extends BaseMeshVisual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/methods/FaceStretchVisual-addFeature.md Edit}
    
    * @unreleased
    */
    addFeature(name: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/methods/FaceStretchVisual-clearFeatures.md Edit}
    
    * @unreleased
    */
    clearFeatures(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/methods/FaceStretchVisual-getFeatureNames.md Edit}
    
    * @unreleased
    */
    getFeatureNames(): string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/methods/FaceStretchVisual-getFeaturePoints.md Edit}
    
    * @unreleased
    */
    getFeaturePoints(name: string): StretchPoint[]
    
    /**
    * Returns the weight of the face stretch feature named `feature`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/methods/FaceStretchVisual-getFeatureWeight.md Edit}
    */
    getFeatureWeight(feature: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/methods/FaceStretchVisual-removeFeature.md Edit}
    
    * @unreleased
    */
    removeFeature(name: string): void
    
    /**
    * Sets the weight of the face stretch feature named `feature` to `intensity`.
    * The intensity must be greater than -0.5 and less than 2.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/methods/FaceStretchVisual-setFeatureWeight.md Edit}
    */
    setFeatureWeight(feature: string, intensity: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/methods/FaceStretchVisual-updateFeaturePoints.md Edit}
    
    * @unreleased
    */
    updateFeaturePoints(name: string, points: StretchPoint[]): void
    
    /**
    * The index of the face the stretch will be applied to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceStretchVisual/properties/FaceStretchVisual-faceIndex.md Edit}
    */
    faceIndex: number
    
}

/**
* TextureProvider for face textures.
* See the [Face Texture Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-texture) for more information.
* Can be accessed using [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider) on a face texture asset.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTextureProvider/FaceTextureProvider-description.md Edit}
*/
interface FaceTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTextureProvider/properties/FaceTextureProvider-adjustOffset.md Edit}
    
    * @private
    */
    adjustOffset: OffsetAdjustType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTextureProvider/properties/FaceTextureProvider-adjustOffsetMax.md Edit}
    
    * @private
    */
    adjustOffsetMax: vec2
    
    /**
    * Index of the face to track.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTextureProvider/properties/FaceTextureProvider-faceIndex.md Edit}
    */
    faceIndex: number
    
    /**
    * The source texture being drawn.
    * This is useful for controlling which effects are visible on the face texture, based on which camera output texture is being used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTextureProvider/properties/FaceTextureProvider-inputTexture.md Edit}
    */
    inputTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTextureProvider/properties/FaceTextureProvider-offset.md Edit}
    
    * @private
    */
    offset: vec2
    
    /**
    * The x and y scale used to draw the face within the texture region.
    * A lower scale will be more zoomed in on the face, and a higher scale will be more zoomed out.
    * The default scale is (1, 1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTextureProvider/properties/FaceTextureProvider-scale.md Edit}
    */
    scale: vec2
    
}

/**
* This is the base class for all face tracking events. This event won't actually get triggered itself, so use one of the child classes instead.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTrackingEvent/FaceTrackingEvent-description.md Edit}
*/
interface FaceTrackingEvent extends SceneEvent {
    /**
    * The index of the face this event is tracking. Change this value to control which face the event tracks.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTrackingEvent/properties/FaceTrackingEvent-faceIndex.md Edit}
    */
    faceIndex: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTrackingMode/FaceTrackingMode-description.md Edit}

* @private
*/
declare enum FaceTrackingMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTrackingMode/properties/FaceTrackingMode-Fast.md Edit}
    
    * @private
    */
    Fast,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTrackingMode/properties/FaceTrackingMode-Precise.md Edit}
    
    * @private
    */
    Precise
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FaceTrackingModule/FaceTrackingModule-description.md Edit}

* @unreleased
*/
interface FaceTrackingModule extends Asset {
}

/**
* Provider for file based Audio Tracks.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileAudioTrackProvider/FileAudioTrackProvider-description.md Edit}
*/
interface FileAudioTrackProvider extends AudioTrackProvider {
    /**
    * Writes readSize samples into the passed in audioBuffer Float32Array.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileAudioTrackProvider/methods/FileAudioTrackProvider-getAudioBuffer.md Edit}
    */
    getAudioBuffer(audioBuffer: Float32Array, readSize: number): vec3
    
    /**
    * Writes current audio frame to the passed in `Float32Array` and returns the frame shape.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileAudioTrackProvider/methods/FileAudioTrackProvider-getAudioFrame.md Edit}
    */
    getAudioFrame(audioFrame: Float32Array): vec3
    
    /**
    * The duration of the AudioTrackAsset in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileAudioTrackProvider/properties/FileAudioTrackProvider-duration.md Edit}
    
    * @readonly
    */
    duration: number
    
    /**
    * Loop count, if `-1` is provided, the audio track will loop forever.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileAudioTrackProvider/properties/FileAudioTrackProvider-loops.md Edit}
    */
    loops: number
    
    /**
    * The current position of the AudioTrackAsset in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileAudioTrackProvider/properties/FileAudioTrackProvider-position.md Edit}
    */
    position: number
    
}

/**
* Provides an image marker based on an imported image file.
* For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileBasedMarkerProvider/FileBasedMarkerProvider-description.md Edit}
*/
interface FileBasedMarkerProvider extends NaturalFeatureMarkerProvider {
}

/**
* A file track provider of the Licensed Sounds from Asset LIbrary.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileLicensedSoundProvider/FileLicensedSoundProvider-description.md Edit}
*/
interface FileLicensedSoundProvider extends AudioTrackProvider {
    /**
    * Writes readSize samples into the passed in audioBuffer Float32Array.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileLicensedSoundProvider/methods/FileLicensedSoundProvider-getAudioBuffer.md Edit}
    */
    getAudioBuffer(audioBuffer: Float32Array, readSize: number): vec3
    
    /**
    * Writes current audio frame to the passed in Float32Array and returns the frame shape.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileLicensedSoundProvider/methods/FileLicensedSoundProvider-getAudioFrame.md Edit}
    */
    getAudioFrame(audioFrame: Float32Array): vec3
    
    /**
    * The duration of the AudioTrackAsset in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileLicensedSoundProvider/properties/FileLicensedSoundProvider-duration.md Edit}
    
    * @readonly
    */
    duration: number
    
    /**
    * Loop count, if -1 is provided, the audio track will loop forever.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileLicensedSoundProvider/properties/FileLicensedSoundProvider-loops.md Edit}
    */
    loops: number
    
}

/**
* A [TextureProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextureProvider) for textures originating from files.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FileTextureProvider/FileTextureProvider-description.md Edit}
*/
interface FileTextureProvider extends TextureProvider {
}

/**
* Intersection filter settings. Unifies settings for world probes and collider overlap tests.   See also: [ColliderComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), [Physics](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#Physics).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Filter/Filter-description.md Edit}
*/
interface Filter extends ScriptObject {
    /**
    * Include dynamic objects in intersection tests.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Filter/properties/Filter-includeDynamic.md Edit}
    */
    includeDynamic: boolean
    
    /**
    * Include intangible objects in intersection tests.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Filter/properties/Filter-includeIntangible.md Edit}
    */
    includeIntangible: boolean
    
    /**
    * Include static objects in intersection tests.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Filter/properties/Filter-includeStatic.md Edit}
    */
    includeStatic: boolean
    
    /**
    * If non-empty, only perform collision with these colliders. In other words: the set of colliders to include when performing collision tests, excluding all others.  If empty, this setting is disabled (effectively including all colliders, minus skipColliders).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Filter/properties/Filter-onlyColliders.md Edit}
    */
    onlyColliders: ColliderComponent[]
    
    /**
    * If non-empty, only perform collision with colliders in these layers. In other words: the set of layers to include when performing collision tests, excluding all others.  If empty, this setting is disabled (effectively including all layers, minus skipLayers).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Filter/properties/Filter-onlyLayers.md Edit}
    */
    onlyLayers: LayerSet
    
    /**
    * Skip collision with these colliders. In other words: the set of colliders to exclude when performing collision tests. This takes precedence over onlyColliders, so a collider that is in both is skipped.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Filter/properties/Filter-skipColliders.md Edit}
    */
    skipColliders: ColliderComponent[]
    
    /**
    * Skip collision with colliders in these layers. In other words: the set of layers to exclude when performing collision tests. This takes precedence over onlyLayers, so a layer that is in both is skipped.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Filter/properties/Filter-skipLayers.md Edit}
    */
    skipLayers: LayerSet
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FilteringMode/FilteringMode-description.md Edit}
*/
declare enum FilteringMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FilteringMode/properties/FilteringMode-Nearest.md Edit}
    */
    Nearest,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FilteringMode/properties/FilteringMode-Bilinear.md Edit}
    */
    Bilinear,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FilteringMode/properties/FilteringMode-Trilinear.md Edit}
    */
    Trilinear
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FixedCollisionMesh/FixedCollisionMesh-description.md Edit}
*/
interface FixedCollisionMesh extends CollisionMesh {
}

/**
* Fully constrain rotation and translation.  See also: [ConstraintComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ConstraintComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FixedConstraint/FixedConstraint-description.md Edit}
*/
interface FixedConstraint extends Constraint {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatAnimationPropertyTrack/FloatAnimationPropertyTrack-description.md Edit}

* @private
*/
interface FloatAnimationPropertyTrack extends AnimationPropertyTrack {
}

/**
* The base class for animation tracks using float values.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatAnimationTrack/FloatAnimationTrack-description.md Edit}

* @deprecated
*/
interface FloatAnimationTrack extends AnimationTrack {
}

/**
* Represents an animation track using float value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatAnimationTrackKeyFramed/FloatAnimationTrackKeyFramed-description.md Edit}

* @deprecated
*/
interface FloatAnimationTrackKeyFramed extends FloatAnimationTrack {
    /**
    * Adds a key with value `value` at time `time`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatAnimationTrackKeyFramed/methods/FloatAnimationTrackKeyFramed-addKey.md Edit}
    */
    addKey(time: number, value: number): void
    
    /**
    * Removes all keys.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatAnimationTrackKeyFramed/methods/FloatAnimationTrackKeyFramed-removeAllKeys.md Edit}
    */
    removeAllKeys(): void
    
    /**
    * Removes key at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatAnimationTrackKeyFramed/methods/FloatAnimationTrackKeyFramed-removeKeyAt.md Edit}
    */
    removeKeyAt(index: number): void
    
}

/**
* Represents an animation track using vec3 value keyframes for a bezier curve.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatBezierAnimationTrackKeyFramed/FloatBezierAnimationTrackKeyFramed-description.md Edit}

* @deprecated
*/
interface FloatBezierAnimationTrackKeyFramed extends FloatAnimationTrack {
    /**
    * Adds a key with value `value` at time `time`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatBezierAnimationTrackKeyFramed/methods/FloatBezierAnimationTrackKeyFramed-addKey.md Edit}
    */
    addKey(time: number, value: vec3): void
    
    /**
    * Removes all keys.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatBezierAnimationTrackKeyFramed/methods/FloatBezierAnimationTrackKeyFramed-removeAllKeys.md Edit}
    */
    removeAllKeys(): void
    
    /**
    * Removes key at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FloatBezierAnimationTrackKeyFramed/methods/FloatBezierAnimationTrackKeyFramed-removeKeyAt.md Edit}
    */
    removeKeyAt(index: number): void
    
}

/**
* Arguments used with the `InteractionComponent.onFocusEnd` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FocusEndEventArgs/FocusEndEventArgs-description.md Edit}
*/
interface FocusEndEventArgs extends ScriptObject {
}

/**
* Arguments used with the `InteractionComponent.onFocusStart` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FocusStartEventArgs/FocusStartEventArgs-description.md Edit}
*/
interface FocusStartEventArgs extends ScriptObject {
}

/**
* A font asset used for rendering text.
* Used by [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text).
* For more information, see the [Text guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/text/2d-text).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/Font-description.md Edit}
*/
interface Font extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getAscender.md Edit}
    
    * @private
    */
    getAscender(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getBoundingBox.md Edit}
    
    * @private
    */
    getBoundingBox(): BoundingBox
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getDefaultLineSpace.md Edit}
    
    * @private
    */
    getDefaultLineSpace(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getDescender.md Edit}
    
    * @private
    */
    getDescender(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getFamilyName.md Edit}
    
    * @private
    */
    getFamilyName(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getGlyphsForText.md Edit}
    
    * @private
    */
    getGlyphsForText(text: string): OutlineGlyph[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getKerningValue.md Edit}
    
    * @private
    */
    getKerningValue(leftGlyph: Glyph, rightGlyph: Glyph): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getPostscriptName.md Edit}
    
    * @private
    */
    getPostscriptName(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getStyleName.md Edit}
    
    * @private
    */
    getStyleName(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getUnderlinePosition.md Edit}
    
    * @private
    */
    getUnderlinePosition(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getUnderlineThickness.md Edit}
    
    * @private
    */
    getUnderlineThickness(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Font/methods/Font-getUnitsPerEm.md Edit}
    
    * @private
    */
    getUnitsPerEm(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FreezeFrameSystem/FreezeFrameSystem-description.md Edit}

* @private
*/
interface FreezeFrameSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FreezeFrameSystem/methods/FreezeFrameSystem-registerTurnOffCallback.md Edit}
    
    * @private
    */
    registerTurnOffCallback(callback: () => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Friend/Friend-description.md Edit}

* @private
*/
interface Friend extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Friend/methods/Friend-getAliasId.md Edit}
    
    * @private
    */
    getAliasId(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Friend/methods/Friend-getBitmojiSelfieId.md Edit}
    
    * @private
    */
    getBitmojiSelfieId(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Friend/methods/Friend-getDisplayname.md Edit}
    
    * @private
    */
    getDisplayname(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Friend/methods/Friend-getUserId.md Edit}
    
    * @private
    */
    getUserId(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Friend/methods/Friend-getUsername.md Edit}
    
    * @private
    */
    getUsername(): string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FriendSystem/FriendSystem-description.md Edit}

* @exposesUserData

* @private
*/
interface FriendSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FriendSystem/methods/FriendSystem-getAllFriendsInChat.md Edit}
    
    * @private
    */
    getAllFriendsInChat(): Friend[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FriendSystem/methods/FriendSystem-getChatFriendByIndex.md Edit}
    
    * @private
    */
    getChatFriendByIndex(index: number): Friend
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FriendSystem/methods/FriendSystem-getChatFriendByUserId.md Edit}
    
    * @private
    */
    getChatFriendByUserId(userId: string): Friend
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FriendSystem/methods/FriendSystem-getChatFriendByUsername.md Edit}
    
    * @deprecated
    
    * @private
    */
    getChatFriendByUsername(username: string): Friend
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FriendSystem/methods/FriendSystem-getNumFriendsInChat.md Edit}
    
    * @private
    */
    getNumFriendsInChat(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FriendSystem/methods/FriendSystem-initialize.md Edit}
    
    * @private
    */
    initialize(): void
    
}

/**
* Mode for setting frustum culling on Pass

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FrustumCullMode/FrustumCullMode-description.md Edit}
*/
declare enum FrustumCullMode {
    /**
    * Based on shader property, frustum culling will either be disabled or test with render object's aabb
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FrustumCullMode/properties/FrustumCullMode-Auto.md Edit}
    */
    Auto,
    /**
    * Enable frustum culling and extend render object's aabb to (1 + value)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FrustumCullMode/properties/FrustumCullMode-Extend.md Edit}
    */
    Extend,
    /**
    * Users define the specific AABB which is used for culling test. Assumes frustumCullMin and frustumCullMax are calculated in local space of the object. frustumCullMin is the bottom-left-back and frustumCullMax is the top-right-front of the user defined AABB.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/FrustumCullMode/properties/FrustumCullMode-UserDefinedAABB.md Edit}
    */
    UserDefinedAABB
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GalleryType/GalleryType-description.md Edit}

* @private
*/
declare enum GalleryType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GalleryType/properties/GalleryType-UserPreference.md Edit}
    
    * @private
    */
    UserPreference
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingAsset/GaussianSplattingAsset-description.md Edit}
*/
interface GaussianSplattingAsset extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingAsset/methods/GaussianSplattingAsset-getNumberOfFrames.md Edit}
    */
    getNumberOfFrames(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingVisual/GaussianSplattingVisual-description.md Edit}
*/
interface GaussianSplattingVisual extends MaterialMeshVisual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingVisual/properties/GaussianSplattingVisual-activeFrame.md Edit}
    */
    activeFrame: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingVisual/properties/GaussianSplattingVisual-asset.md Edit}
    */
    asset: GaussianSplattingAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingVisual/properties/GaussianSplattingVisual-disableFrustumCulling.md Edit}
    
    * @private
    */
    disableFrustumCulling: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingVisual/properties/GaussianSplattingVisual-disablePrediction.md Edit}
    
    * @private
    */
    disablePrediction: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingVisual/properties/GaussianSplattingVisual-lastSortDuration.md Edit}
    
    * @readonly
    
    * @private
    */
    lastSortDuration: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GaussianSplattingVisual/properties/GaussianSplattingVisual-syncSorting.md Edit}
    
    * @private
    */
    syncSorting: boolean
    
}

/**
* Class for storing and retrieving data based on keys.
* Used by [PersistentStorageSystem](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#PersistentStorageSystem).
* For more information, see the [Persistent Storage guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/persistent-storage).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/GeneralDataStore-description.md Edit}
*/
interface GeneralDataStore extends ScriptObject {
    /**
    * Clears all data stored in the General Data Store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-clear.md Edit}
    */
    clear(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-get.md Edit}
    
    * @deprecated
    
    * @private
    */
    get(key: string): string
    
    /**
    * Returns an array with all the keys in the store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getAllKeys.md Edit}
    */
    getAllKeys(): string[]
    
    /**
    * Returns a boolean value stored under the given key, or false if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getBool.md Edit}
    */
    getBool(key: string): boolean
    
    /**
    * Returns a boolean array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getBoolArray.md Edit}
    */
    getBoolArray(key: string): boolean[]
    
    /**
    * Returns a double precision floating point number stored under the given key, or 0 if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getDouble.md Edit}
    */
    getDouble(key: string): number
    
    /**
    * Returns a floating point value stored under the given key, or 0 if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getFloat.md Edit}
    */
    getFloat(key: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getFloat32Array.md Edit}
    */
    getFloat32Array(key: string): Float32Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getFloat64Array.md Edit}
    */
    getFloat64Array(key: string): any
    
    /**
    * Returns a floating point array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getFloatArray.md Edit}
    */
    getFloatArray(key: string): number[]
    
    /**
    * Returns an integer number stored under the given key, or 0 if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getInt.md Edit}
    */
    getInt(key: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getInt16Array.md Edit}
    */
    getInt16Array(key: string): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getInt32Array.md Edit}
    */
    getInt32Array(key: string): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getInt8Array.md Edit}
    */
    getInt8Array(key: string): any
    
    /**
    * Returns an integer array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getIntArray.md Edit}
    */
    getIntArray(key: string): number[]
    
    /**
    * Returns a mat2 value stored under the given key, or a default mat2 if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getMat2.md Edit}
    */
    getMat2(key: string): mat2
    
    /**
    * Returns a mat2 array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getMat2Array.md Edit}
    */
    getMat2Array(key: string): mat2[]
    
    /**
    * Stores a mat3 value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getMat3.md Edit}
    */
    getMat3(key: string): mat3
    
    /**
    * Returns a mat3 array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getMat3Array.md Edit}
    */
    getMat3Array(key: string): mat3[]
    
    /**
    * Returns a mat4 value stored under the given key, or a default mat4 if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getMat4.md Edit}
    */
    getMat4(key: string): mat4
    
    /**
    * Returns a mat4 array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getMat4Array.md Edit}
    */
    getMat4Array(key: string): mat4[]
    
    /**
    * Returns the maximum total size allowed, in bytes, of all data stored in this General Data Store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getMaxSizeInBytes.md Edit}
    */
    getMaxSizeInBytes(): number
    
    /**
    * Returns a quat value stored under the given key, or a default quat if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getQuat.md Edit}
    */
    getQuat(key: string): quat
    
    /**
    * Returns a quat array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getQuatArray.md Edit}
    */
    getQuatArray(key: string): quat[]
    
    /**
    * If `onStoreFull` has been set, this method returns the current total size, in bytes, of all data stored in this General Data Store. Otherwise, `0` is returned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getSizeInBytes.md Edit}
    */
    getSizeInBytes(): number
    
    /**
    * Returns a string value stored under the given key, or empty string if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getString.md Edit}
    */
    getString(key: string): string
    
    /**
    * Returns a string array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getStringArray.md Edit}
    */
    getStringArray(key: string): string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getUint16Array.md Edit}
    */
    getUint16Array(key: string): Uint16Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getUint32Array.md Edit}
    */
    getUint32Array(key: string): Uint32Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getUint8Array.md Edit}
    */
    getUint8Array(key: string): Uint8Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getValueCount.md Edit}
    
    * @private
    */
    getValueCount(): number
    
    /**
    * Returns a vec2 value stored under the given key, or a default vec2 if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getVec2.md Edit}
    */
    getVec2(key: string): vec2
    
    /**
    * Returns a vec2 array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getVec2Array.md Edit}
    */
    getVec2Array(key: string): vec2[]
    
    /**
    * Returns a vec3 value stored under the given key, or a default vec3 if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getVec3.md Edit}
    */
    getVec3(key: string): vec3
    
    /**
    * Returns a vec3 array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getVec3Array.md Edit}
    */
    getVec3Array(key: string): vec3[]
    
    /**
    * Returns a vec4 value stored under the given key, or a default vec4 if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getVec4.md Edit}
    */
    getVec4(key: string): vec4
    
    /**
    * Returns a vec4 array being stored under the given key, or an empty array if none exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-getVec4Array.md Edit}
    */
    getVec4Array(key: string): vec4[]
    
    /**
    * Returns true if a value is being stored under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-has.md Edit}
    */
    has(key: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-hasValueForKey.md Edit}
    
    * @deprecated
    
    * @private
    */
    hasValueForKey(key: string): boolean
    
    /**
    * Stores a boolean value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putBool.md Edit}
    */
    putBool(key: string, value: boolean): void
    
    /**
    * Stores a boolean array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putBoolArray.md Edit}
    */
    putBoolArray(key: string, value: boolean[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putBoolWithTimeToLive.md Edit}
    
    * @deprecated
    
    * @private
    */
    putBoolWithTimeToLive(key: string, value: boolean, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putBoolWithTimeToLiveDays.md Edit}
    
    * @deprecated
    
    * @private
    */
    putBoolWithTimeToLiveDays(key: string, value: boolean, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putBoolWithTimeToLiveHours.md Edit}
    
    * @deprecated
    
    * @private
    */
    putBoolWithTimeToLiveHours(key: string, value: boolean, ttl: number): void
    
    /**
    * Stores a double precision floating point number under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putDouble.md Edit}
    */
    putDouble(key: string, value: number): void
    
    /**
    * Stores a floating point value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putFloat.md Edit}
    */
    putFloat(key: string, value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putFloat32Array.md Edit}
    */
    putFloat32Array(key: string, value: Float32Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putFloat64Array.md Edit}
    */
    putFloat64Array(key: string, value: any): void
    
    /**
    * Stores a floating point array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putFloatArray.md Edit}
    */
    putFloatArray(key: string, value: number[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putFloatWithTimeToLive.md Edit}
    
    * @deprecated
    
    * @private
    */
    putFloatWithTimeToLive(key: string, value: number, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putFloatWithTimeToLiveDays.md Edit}
    
    * @deprecated
    
    * @private
    */
    putFloatWithTimeToLiveDays(key: string, value: number, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putFloatWithTimeToLiveHours.md Edit}
    
    * @deprecated
    
    * @private
    */
    putFloatWithTimeToLiveHours(key: string, value: number, ttl: number): void
    
    /**
    * Stores an integer number value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putInt.md Edit}
    */
    putInt(key: string, value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putInt16Array.md Edit}
    */
    putInt16Array(key: string, value: any): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putInt32Array.md Edit}
    */
    putInt32Array(key: string, value: any): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putInt8Array.md Edit}
    */
    putInt8Array(key: string, value: any): void
    
    /**
    * Stores an integer array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putIntArray.md Edit}
    */
    putIntArray(key: string, value: number[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putIntWithTimeToLive.md Edit}
    
    * @deprecated
    
    * @private
    */
    putIntWithTimeToLive(key: string, value: number, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putIntWithTimeToLiveDays.md Edit}
    
    * @deprecated
    
    * @private
    */
    putIntWithTimeToLiveDays(key: string, value: number, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putIntWithTimeToLiveHours.md Edit}
    
    * @deprecated
    
    * @private
    */
    putIntWithTimeToLiveHours(key: string, value: number, ttl: number): void
    
    /**
    * Stores a mat2 value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putMat2.md Edit}
    */
    putMat2(key: string, value: mat2): void
    
    /**
    * Stores a mat2 array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putMat2Array.md Edit}
    */
    putMat2Array(key: string, value: mat2[]): void
    
    /**
    * Stores a mat3 value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putMat3.md Edit}
    */
    putMat3(key: string, value: mat3): void
    
    /**
    * Stores a mat3 array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putMat3Array.md Edit}
    */
    putMat3Array(key: string, value: mat3[]): void
    
    /**
    * Stores a mat4 value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putMat4.md Edit}
    */
    putMat4(key: string, value: mat4): void
    
    /**
    * Stores a mat4 array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putMat4Array.md Edit}
    */
    putMat4Array(key: string, value: mat4[]): void
    
    /**
    * Stores a quat value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putQuat.md Edit}
    */
    putQuat(key: string, value: quat): void
    
    /**
    * Stores a quat array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putQuatArray.md Edit}
    */
    putQuatArray(key: string, value: quat[]): void
    
    /**
    * Stores a string value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putString.md Edit}
    */
    putString(key: string, value: string): void
    
    /**
    * Stores a string array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putStringArray.md Edit}
    */
    putStringArray(key: string, value: string[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putStringWithTimeToLive.md Edit}
    
    * @deprecated
    
    * @private
    */
    putStringWithTimeToLive(key: string, value: string, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putStringWithTimeToLiveDays.md Edit}
    
    * @deprecated
    
    * @private
    */
    putStringWithTimeToLiveDays(key: string, value: string, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putStringWithTimeToLiveHours.md Edit}
    
    * @deprecated
    
    * @private
    */
    putStringWithTimeToLiveHours(key: string, value: string, ttl: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putUint16Array.md Edit}
    */
    putUint16Array(key: string, value: Uint16Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putUint32Array.md Edit}
    */
    putUint32Array(key: string, value: Uint32Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putUint8Array.md Edit}
    */
    putUint8Array(key: string, value: Uint8Array): void
    
    /**
    * Stores a vec2 value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putVec2.md Edit}
    */
    putVec2(key: string, value: vec2): void
    
    /**
    * Stores a vec2 array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putVec2Array.md Edit}
    */
    putVec2Array(key: string, value: vec2[]): void
    
    /**
    * Stores a vec3 value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putVec3.md Edit}
    */
    putVec3(key: string, value: vec3): void
    
    /**
    * Stores a vec3 array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putVec3Array.md Edit}
    */
    putVec3Array(key: string, value: vec3[]): void
    
    /**
    * Stores a vec4 value under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putVec4.md Edit}
    */
    putVec4(key: string, value: vec4): void
    
    /**
    * Stores a vec4 array under the given key.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-putVec4Array.md Edit}
    */
    putVec4Array(key: string, value: vec4[]): void
    
    /**
    * Removes the value being stored under the given key. If no value exists under the key, nothing will happen.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-remove.md Edit}
    */
    remove(key: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-removeBool.md Edit}
    
    * @deprecated
    
    * @private
    */
    removeBool(key: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-removeFloat.md Edit}
    
    * @deprecated
    
    * @private
    */
    removeFloat(key: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-removeInt.md Edit}
    
    * @deprecated
    
    * @private
    */
    removeInt(key: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-removeString.md Edit}
    
    * @deprecated
    
    * @private
    */
    removeString(key: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-size.md Edit}
    
    * @deprecated
    
    * @private
    */
    size(): number
    
    /**
    * Callback function that gets called when the allowed storage limit has been passed.
    * The store won't be saved if it is full, so if this is called make sure to remove data until back under the limit.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/properties/GeneralDataStore-onStoreFull.md Edit}
    */
    onStoreFull: () => void
    
}
declare namespace GeneralDataStore {
    /**
    * Creates a General Data Store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeneralDataStore/methods/GeneralDataStore-create.md Edit}
    */
    export function create(): GeneralDataStore
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoData/GeoData-description.md Edit}

* @private
*/
interface GeoData extends AbstractData {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoData/methods/GeoData-getTaxonomyJson.md Edit}
    
    * @private
    */
    getTaxonomyJson(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoData/methods/GeoData-getTemperatureCelsius.md Edit}
    
    * @private
    */
    getTemperatureCelsius(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoData/methods/GeoData-getTemperatureFahrenheit.md Edit}
    
    * @private
    */
    getTemperatureFahrenheit(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoData/methods/GeoData-getWeatherCondition.md Edit}
    
    * @private
    */
    getWeatherCondition(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoData/methods/GeoData-isTaxonomyAvailable.md Edit}
    
    * @private
    */
    isTaxonomyAvailable(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoData/methods/GeoData-isWeatherAvailable.md Edit}
    
    * @private
    */
    isWeatherAvailable(): boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/GeoEntity-description.md Edit}

* @private
*/
interface GeoEntity extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/methods/GeoEntity-getAsset.md Edit}
    
    * @private
    */
    getAsset(assetKey: number): Promise<Asset>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/methods/GeoEntity-hasAsset.md Edit}
    
    * @private
    */
    hasAsset(assetKey: number): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/methods/GeoEntity-removeAsset.md Edit}
    
    * @private
    */
    removeAsset(assetKey: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/methods/GeoEntity-setAsset.md Edit}
    
    * @private
    */
    setAsset(assetKey: number, asset: Asset): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/properties/GeoEntity-createdAt.md Edit}
    
    * @readonly
    
    * @private
    */
    createdAt?: Date
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/properties/GeoEntity-displayName.md Edit}
    
    * @private
    */
    displayName: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/properties/GeoEntity-key.md Edit}
    
    * @private
    */
    key: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/properties/GeoEntity-metadata.md Edit}
    
    * @private
    */
    metadata: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/properties/GeoEntity-objectType.md Edit}
    
    * @private
    */
    objectType: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/properties/GeoEntity-position.md Edit}
    
    * @private
    */
    position: GeoPosition
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/properties/GeoEntity-readPermission.md Edit}
    
    * @private
    */
    readPermission: AccessLevel
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/properties/GeoEntity-writePermission.md Edit}
    
    * @private
    */
    writePermission: AccessLevel
    
}
declare namespace GeoEntity {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoEntity/methods/GeoEntity-create.md Edit}
    
    * @private
    */
    export function create(): GeoEntity
    

}

/**
* Namespace for location functionality.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoLocation/GeoLocation-description.md Edit}
*/
interface GeoLocation {
}
declare namespace GeoLocation {
    /**
    * Creates a new `LocationService`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoLocation/methods/GeoLocation-createLocationService.md Edit}
    */
    export function createLocationService(): LocationService
    
    /**
    * Calculates heading based on north aligned device orientation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoLocation/methods/GeoLocation-getNorthAlignedHeading.md Edit}
    */
    export function getNorthAlignedHeading(northAlignedOrientation: quat): number
    

}

/**
* Enumeration of supported GPS location accuracy.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoLocationAccuracy/GeoLocationAccuracy-description.md Edit}
*/
declare enum GeoLocationAccuracy {
    /**
    * Used for guiding the user. Generally accurate up to 5 meters.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoLocationAccuracy/properties/GeoLocationAccuracy-Navigation.md Edit}
    */
    Navigation,
    /**
    * Best possible accuracy without navigation requirement. Generally accurate up to 5 meters.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoLocationAccuracy/properties/GeoLocationAccuracy-High.md Edit}
    */
    High,
    /**
    * Generally accurate up to 10 meters. Power efficient option.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoLocationAccuracy/properties/GeoLocationAccuracy-Medium.md Edit}
    */
    Medium,
    /**
    * Generally accurate up to 100 meters. The most power efficient option.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoLocationAccuracy/properties/GeoLocationAccuracy-Low.md Edit}
    */
    Low
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeometryType/GeometryType-description.md Edit}

* @private
*/
declare enum GeometryType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeometryType/properties/GeometryType-Point.md Edit}
    
    * @private
    */
    Point,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeometryType/properties/GeometryType-MultiPoint.md Edit}
    
    * @private
    */
    MultiPoint,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeometryType/properties/GeometryType-Line.md Edit}
    
    * @private
    */
    Line,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeometryType/properties/GeometryType-MultiLine.md Edit}
    
    * @private
    */
    MultiLine,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeometryType/properties/GeometryType-Polygon.md Edit}
    
    * @private
    */
    Polygon,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeometryType/properties/GeometryType-MultiPolygon.md Edit}
    
    * @private
    */
    MultiPolygon
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoObject/GeoObject-description.md Edit}

* @private
*/
interface GeoObject extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoObject/properties/GeoObject-geometry.md Edit}
    
    * @readonly
    
    * @private
    */
    geometry: (vec2[][][]|vec2[]|vec2[][]|vec2)
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoObject/properties/GeoObject-geometryType.md Edit}
    
    * @readonly
    
    * @private
    */
    geometryType: GeometryType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoObject/properties/GeoObject-id.md Edit}
    
    * @readonly
    
    * @private
    */
    id: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoObject/properties/GeoObject-properties.md Edit}
    
    * @readonly
    
    * @private
    */
    properties: object
    
}

/**
* The location of the device.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoPosition/GeoPosition-description.md Edit}
*/
interface GeoPosition extends ScriptObject {
    /**
    * Represents the direction towards which the device is facing. This value, specified in degrees, indicates how far off from heading true north the device is. 0 degrees represents true north, and the direction is determined clockwise.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoPosition/properties/GeoPosition-heading.md Edit}
    
    * @readonly
    */
    heading: number
    
    /**
    * The accuracy of the latitude and longitude properties, expressed in meters.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoPosition/properties/GeoPosition-horizontalAccuracy.md Edit}
    */
    horizontalAccuracy: number
    
    /**
    * Indicates whether the device is able to provide heading information.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoPosition/properties/GeoPosition-isHeadingAvailable.md Edit}
    
    * @readonly
    */
    isHeadingAvailable: boolean
    
    /**
    * The position's latitude in decimal degrees.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoPosition/properties/GeoPosition-latitude.md Edit}
    */
    latitude: number
    
    /**
    * The position's longitude in decimal degrees.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoPosition/properties/GeoPosition-longitude.md Edit}
    */
    longitude: number
    
    /**
    * The accuracy of the altitude property, expressed in meters.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoPosition/properties/GeoPosition-verticalAccuracy.md Edit}
    */
    verticalAccuracy: number
    
}
declare namespace GeoPosition {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoPosition/methods/GeoPosition-create.md Edit}
    */
    export function create(): GeoPosition
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoStorageModule/GeoStorageModule-description.md Edit}

* @private
*/
interface GeoStorageModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoStorageModule/methods/GeoStorageModule-create.md Edit}
    
    * @private
    */
    create(): GeoStore
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoStorageModule/properties/GeoStorageModule-appId.md Edit}
    
    * @private
    */
    appId: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoStore/GeoStore-description.md Edit}

* @private
*/
interface GeoStore extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoStore/methods/GeoStore-query.md Edit}
    
    * @private
    */
    query(queryOptions: QueryGeoStorageOptions, onRetrieved: (entities: GeoEntity[]) => void, onError: (description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoStore/methods/GeoStore-read.md Edit}
    
    * @private
    */
    read(key: string, onRetrieved: (entity: GeoEntity) => void, onError: (description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoStore/methods/GeoStore-remove.md Edit}
    
    * @private
    */
    remove(key: string, onRemoved: () => void, onError: (description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GeoStore/methods/GeoStore-write.md Edit}
    
    * @private
    */
    write(entity: GeoEntity, onSaved: () => void, onError: (description: string) => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/GestureModule-description.md Edit}

* @wearableOnly
*/
interface GestureModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPalmPressedEvent.md Edit}
    
    * @private
    */
    getPalmPressedEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPalmReleasedEvent.md Edit}
    
    * @private
    */
    getPalmReleasedEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPalmTapDownEvent.md Edit}
    */
    getPalmTapDownEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPalmTapUpEvent.md Edit}
    */
    getPalmTapUpEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchDetectabilityEvent.md Edit}
    
    * @private
    */
    getPinchDetectabilityEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchDownEvent.md Edit}
    */
    getPinchDownEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchHoldEvent.md Edit}
    
    * @private
    */
    getPinchHoldEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchProximityByFingerEvent.md Edit}
    
    * @private
    */
    getPinchProximityByFingerEvent(handType: GestureModule.HandType, fingerType: GestureModule.FingerType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchReleasedEvent.md Edit}
    
    * @private
    */
    getPinchReleasedEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchStrengthEvent.md Edit}
    */
    getPinchStrengthEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchTouchedEvent.md Edit}
    
    * @private
    */
    getPinchTouchedEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchUpEvent.md Edit}
    */
    getPinchUpEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getPinchVisibilityEvent.md Edit}
    
    * @private
    */
    getPinchVisibilityEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getQuickPinchByFingerEvent.md Edit}
    
    * @private
    */
    getQuickPinchByFingerEvent(handType: GestureModule.HandType, fingerType: GestureModule.FingerType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getQuickPinchEvent.md Edit}
    
    * @private
    */
    getQuickPinchEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getTargetingDataEvent.md Edit}
    */
    getTargetingDataEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/methods/GestureModule-getTargetingRayEvent.md Edit}
    
    * @private
    */
    getTargetingRayEvent(handType: GestureModule.HandType): any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/properties/GestureModule-pinchModel.md Edit}
    
    * @private
    */
    pinchModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule/properties/GestureModule-targetingModel.md Edit}
    
    * @private
    */
    targetingModel: BinAsset
    
}

declare namespace GestureModule {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.FingerType/GestureModule.FingerType-description.md Edit}
    
    * @wearableOnly
    
    * @private
    */
    enum FingerType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.FingerType/properties/GestureModule.FingerType-Thumb.md Edit}
        
        * @private
        */
        Thumb,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.FingerType/properties/GestureModule.FingerType-Index.md Edit}
        
        * @private
        */
        Index,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.FingerType/properties/GestureModule.FingerType-Middle.md Edit}
        
        * @private
        */
        Middle,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.FingerType/properties/GestureModule.FingerType-Ring.md Edit}
        
        * @private
        */
        Ring,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.FingerType/properties/GestureModule.FingerType-Pinky.md Edit}
        
        * @private
        */
        Pinky
    }

}

declare namespace GestureModule {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.HandType/GestureModule.HandType-description.md Edit}
    
    * @wearableOnly
    */
    enum HandType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.HandType/properties/GestureModule.HandType-Left.md Edit}
        */
        Left,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GestureModule.HandType/properties/GestureModule.HandType-Right.md Edit}
        */
        Right
    }

}

/**
* Represents a GLTF 3D Model.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GltfAsset/GltfAsset-description.md Edit}
*/
interface GltfAsset extends Asset {
    /**
    * Try instantiating an object from the GLTF asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GltfAsset/methods/GltfAsset-tryInstantiate.md Edit}
    */
    tryInstantiate(parent: SceneObject, material: Material): SceneObject
    
    /**
    * Try instantiating an object from the GLTF asset with supplied GltfSetting
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GltfAsset/methods/GltfAsset-tryInstantiateWithSetting.md Edit}
    */
    tryInstantiateWithSetting(parent: SceneObject, material: Material, gltfSettings: GltfSettings): SceneObject
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GltfAsset/properties/GltfAsset-extras.md Edit}
    
    * @readonly
    */
    extras: string
    
}

/**
* Settings for importing a glTF Asset.
* Use this with [GltfAsset](https://lensstudio.snapchat.com/api/classes/GltfAsset) component's `tryInstantiateWithSetting` method.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GltfSettings/GltfSettings-description.md Edit}
*/
interface GltfSettings extends ScriptObject {
    /**
    * Units for all linear distances in glTF are meters and in LensStudio are centimeters, enable this option if you want to automatically scale from meters into centimeters when importing the glTF file.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GltfSettings/properties/GltfSettings-convertMetersToCentimeters.md Edit}
    */
    convertMetersToCentimeters: boolean
    
    /**
    * Whether the GLB Loader should optimize geometry. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GltfSettings/properties/GltfSettings-optimizeGeometry.md Edit}
    */
    optimizeGeometry: boolean
    
}
declare namespace GltfSettings {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GltfSettings/methods/GltfSettings-create.md Edit}
    */
    export function create(): GltfSettings
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Glyph/Glyph-description.md Edit}

* @private
*/
interface Glyph extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Glyph/methods/Glyph-getAdvanceX.md Edit}
    
    * @private
    */
    getAdvanceX(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Glyph/methods/Glyph-getAdvanceY.md Edit}
    
    * @private
    */
    getAdvanceY(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Glyph/methods/Glyph-getBoundingBox.md Edit}
    
    * @private
    */
    getBoundingBox(): BoundingBox
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Glyph/methods/Glyph-getCharacters.md Edit}
    
    * @private
    */
    getCharacters(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Glyph/methods/Glyph-getFont.md Edit}
    
    * @private
    */
    getFont(): Font
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Glyph/methods/Glyph-getIndex.md Edit}
    
    * @private
    */
    getIndex(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Glyph/methods/Glyph-getMeshBuilder.md Edit}
    
    * @private
    */
    getMeshBuilder(): ExtrudedMeshBuilder
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphLoader/GlyphLoader-description.md Edit}

* @private
*/
interface GlyphLoader extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphLoader/methods/GlyphLoader-getGlyphsAndPositions.md Edit}
    
    * @private
    */
    getGlyphsAndPositions(text: string, preferredFonts: Font[]): GlyphsAndPositions
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphMeshBuilder/GlyphMeshBuilder-description.md Edit}

* @private
*/
interface GlyphMeshBuilder extends ExtrudedMeshBuilder {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphMeshBuilder/properties/GlyphMeshBuilder-boundingBox.md Edit}
    
    * @private
    */
    boundingBox: BoundingBox
    
}
declare namespace GlyphMeshBuilder {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphMeshBuilder/methods/GlyphMeshBuilder-createMeshBuilder.md Edit}
    
    * @private
    */
    export function createMeshBuilder(glyph: OutlineGlyph): GlyphMeshBuilder
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineEdge/GlyphOutlineEdge-description.md Edit}

* @private
*/
interface GlyphOutlineEdge {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineEdge/methods/GlyphOutlineEdge-getFirstNormalIndex.md Edit}
    
    * @private
    */
    getFirstNormalIndex(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineEdge/methods/GlyphOutlineEdge-getFirstVertex.md Edit}
    
    * @private
    */
    getFirstVertex(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineEdge/methods/GlyphOutlineEdge-getFirstVertexU.md Edit}
    
    * @private
    */
    getFirstVertexU(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineEdge/methods/GlyphOutlineEdge-getSecondNormalIndex.md Edit}
    
    * @private
    */
    getSecondNormalIndex(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineShape/GlyphOutlineShape-description.md Edit}

* @private
*/
interface GlyphOutlineShape {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineShape/methods/GlyphOutlineShape-getEdges.md Edit}
    
    * @private
    */
    getEdges(): GlyphOutlineEdge[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineShape/methods/GlyphOutlineShape-getLength.md Edit}
    
    * @private
    */
    getLength(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineShape/methods/GlyphOutlineShape-getNormals.md Edit}
    
    * @private
    */
    getNormals(): vec2[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineShapes/GlyphOutlineShapes-description.md Edit}

* @private
*/
interface GlyphOutlineShapes {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineShapes/methods/GlyphOutlineShapes-getBoundary.md Edit}
    
    * @private
    */
    getBoundary(): GlyphOutlineShape
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphOutlineShapes/methods/GlyphOutlineShapes-getHoles.md Edit}
    
    * @private
    */
    getHoles(): GlyphOutlineShape[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphPosition/GlyphPosition-description.md Edit}

* @private
*/
interface GlyphPosition {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphPosition/methods/GlyphPosition-getAdvance.md Edit}
    
    * @private
    */
    getAdvance(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphPosition/methods/GlyphPosition-getOffset.md Edit}
    
    * @private
    */
    getOffset(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphsAndPositions/GlyphsAndPositions-description.md Edit}

* @private
*/
interface GlyphsAndPositions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphsAndPositions/methods/GlyphsAndPositions-getCaretSubpositions.md Edit}
    
    * @private
    */
    getCaretSubpositions(): number[][]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphsAndPositions/methods/GlyphsAndPositions-getGlyphs.md Edit}
    
    * @private
    */
    getGlyphs(): Glyph[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphsAndPositions/methods/GlyphsAndPositions-getPositions.md Edit}
    
    * @private
    */
    getPositions(): GlyphPosition[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GlyphsAndPositions/methods/GlyphsAndPositions-getStringIndices.md Edit}
    
    * @private
    */
    getStringIndices(): number[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GraphicsApi/GraphicsApi-description.md Edit}

* @private
*/
declare enum GraphicsApi {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GraphicsApi/properties/GraphicsApi-OpenGL.md Edit}
    
    * @private
    */
    OpenGL,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GraphicsApi/properties/GraphicsApi-Metal.md Edit}
    
    * @private
    */
    Metal,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GraphicsApi/properties/GraphicsApi-SnapGraphicsOpenGL.md Edit}
    
    * @private
    */
    SnapGraphicsOpenGL,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GraphicsApi/properties/GraphicsApi-SnapGraphicsMetal.md Edit}
    
    * @private
    */
    SnapGraphicsMetal
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GridMeshBuilder/GridMeshBuilder-description.md Edit}

* @private
*/
declare class GridMeshBuilder {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GridMeshBuilder/methods/GridMeshBuilder-GridMeshBuilder.md Edit}
    
    * @private
    */
    constructor()
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/GridMeshBuilder/methods/GridMeshBuilder-build.md Edit}
    
    * @private
    */
    build(width: number, height: number): RenderMesh
    
}

/**
* This class has been **Deprecated**. Please instead use the [DeviceTracking](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) component with Tracking Mode set to Rotation.
* See the [Tracking Modes](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/tracking-modes) guide for more information.

* Applies the device's gyroscope rotation to the SceneObject it is attached to.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Gyroscope/Gyroscope-description.md Edit}

* @deprecated
*/
interface Gyroscope extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Gyroscope/methods/Gyroscope-setOnGyroscopeInitialized.md Edit}
    
    * @private
    */
    setOnGyroscopeInitialized(eventCallback: () => void): void
    
    /**
    * If enabled, the Gyroscope's rotation will be inverted when the front facing camera is active.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Gyroscope/properties/Gyroscope-invertOnFrontCamera.md Edit}
    */
    invertOnFrontCamera: boolean
    
    /**
    * If enabled, the Gyroscope's rotation will be inverted.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Gyroscope/properties/Gyroscope-invertRotation.md Edit}
    */
    invertRotation: boolean
    
}

/**
* Hair asset converted from an FBX containing splines to be used with [Hair Visual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#HairVisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairDataAsset/HairDataAsset-description.md Edit}
*/
interface HairDataAsset extends Asset {
}

/**
* Component that renders hair simulation.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/HairVisual-description.md Edit}
*/
interface HairVisual extends BaseMeshVisual {
    /**
    * Adds a collider to the simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-addCollider.md Edit}
    */
    addCollider(colliderComponent: ColliderComponent): void
    
    /**
    * Removes all hair colliders from the hair simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-clearColliders.md Edit}
    */
    clearColliders(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-getCollider.md Edit}
    
    * @private
    */
    getCollider(index: number): ColliderComponent
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-getColliderCount.md Edit}
    
    * @private
    */
    getColliderCount(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-isFallbackInitialized.md Edit}
    
    * @deprecated
    
    * @private
    */
    isFallbackInitialized(): boolean
    
    /**
    * Returns `true` if hair simulation is supported by the device.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-isHardwareSupported.md Edit}
    */
    isHardwareSupported(): boolean
    
    /**
    * Returns `true` if the hair resources are initialized.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-isInitialized.md Edit}
    */
    isInitialized(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-rebuildFallbackResources.md Edit}
    
    * @deprecated
    
    * @private
    */
    rebuildFallbackResources(): void
    
    /**
    * Removes a collider from the simulation by index and returns it.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-removeColliderByIndex.md Edit}
    */
    removeColliderByIndex(index: number): ColliderComponent
    
    /**
    * Resets the simulation. May be called if the object with the hair simulation is toggled between enabled and disabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/methods/HairVisual-resetSimulation.md Edit}
    */
    resetSimulation(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-bendStiff.md Edit}
    
    * @deprecated
    
    * @private
    */
    bendStiff: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-bendStiffness.md Edit}
    
    * @private
    */
    bendStiffness: number
    
    /**
    * Density of each clump, higher number would result in "messier" looking hair.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-clumpDensity.md Edit}
    */
    clumpDensity: number
    
    /**
    * Offset amount of hair roots.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-clumpRadius.md Edit}
    */
    clumpRadius: number
    
    /**
    * Offset amount of hair tips.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-clumpTipScale.md Edit}
    */
    clumpTipScale: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-collapseStiff.md Edit}
    
    * @deprecated
    
    * @private
    */
    collapseStiff: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-collapseStiffness.md Edit}
    
    * @private
    */
    collapseStiffness: number
    
    /**
    * List of all colliders assigned to the hair simulation of the current hair visual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-colliders.md Edit}
    */
    colliders: ColliderComponent[]
    
    /**
    * Determines if collision is enabled for hair.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-collisionEnabled.md Edit}
    */
    collisionEnabled: boolean
    
    /**
    * Determines amount of friction for collision between hair strands.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-collisionFriction.md Edit}
    */
    collisionFriction: number
    
    /**
    * Determines how much position offset collision will cause.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-collisionOffset.md Edit}
    */
    collisionOffset: number
    
    /**
    * Determines how stiff the collision is.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-collisionStiffness.md Edit}
    */
    collisionStiffness: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-controlVertexCount.md Edit}
    
    * @deprecated
    
    * @private
    */
    controlVertexCount: number
    
    /**
    * Higher value of damp will cause hair to have less free movement.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-damp.md Edit}
    */
    damp: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-debugModeEnabled.md Edit}
    
    * @private
    */
    debugModeEnabled: boolean
    
    /**
    * Amount of density created to thicken hair.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-density.md Edit}
    */
    density: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-drawFbxGuides.md Edit}
    
    * @private
    */
    drawFbxGuides: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-drawFbxStrands.md Edit}
    
    * @deprecated
    
    * @private
    */
    drawFbxStrands: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-drawSimulatedGuides.md Edit}
    
    * @private
    */
    drawSimulatedGuides: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-drawSimulatedStrands.md Edit}
    
    * @deprecated
    
    * @private
    */
    drawSimulatedStrands: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-fallbackHairMaterial.md Edit}
    
    * @deprecated
    */
    fallbackHairMaterial: Material
    
    /**
    * This enables fallback mode which turns off physics simulations; it is recommended to enable fallback mode on lower-end devices. It will be enabled automatically if device doesn't support hair simulation feature.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-fallbackModeEnabled.md Edit}
    */
    fallbackModeEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-frameRate.md Edit}
    
    * @private
    */
    frameRate: number
    
    /**
    * Amount of friction for hair strands.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-friction.md Edit}
    */
    friction: number
    
    /**
    * Gravity force that gets added for hair's physics simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-gravity.md Edit}
    */
    gravity: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-hairData.md Edit}
    
    * @private
    */
    hairData: HairDataAsset
    
    /**
    * Material used by this simulation to render hair.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-hairMaterial.md Edit}
    */
    hairMaterial: Material
    
    /**
    * Determines the amount of vertices on each strand. `0` means using original number of the strands. `1` is the smallest resolution for hair. Keep in mind when you change this property, the hair geometry will be regenerated.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-hairResolution.md Edit}
    */
    hairResolution: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-hairstyleGuides.md Edit}
    
    * @deprecated
    
    * @private
    */
    hairstyleGuides: SceneObject
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-hairstyleVersion.md Edit}
    
    * @readonly
    
    * @private
    */
    hairstyleVersion: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-headRepulsionEnable.md Edit}
    
    * @deprecated
    
    * @private
    */
    headRepulsionEnable: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-headRepulsionFriction.md Edit}
    
    * @deprecated
    
    * @private
    */
    headRepulsionFriction: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-headRepulsionOffset.md Edit}
    
    * @deprecated
    
    * @private
    */
    headRepulsionOffset: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-headRepulsionStiff.md Edit}
    
    * @deprecated
    
    * @private
    */
    headRepulsionStiff: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-isDebugMode.md Edit}
    
    * @deprecated
    
    * @private
    */
    isDebugMode: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-isFallbackMode.md Edit}
    
    * @deprecated
    
    * @private
    */
    isFallbackMode: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-multiStrandInterpolationCosThreshold.md Edit}
    
    * @deprecated
    
    * @private
    */
    multiStrandInterpolationCosThreshold: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-multiStrandInterpolationInstanceCount.md Edit}
    
    * @deprecated
    
    * @private
    */
    multiStrandInterpolationInstanceCount: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-multiStrandInterpolationLengthThreshold.md Edit}
    
    * @deprecated
    
    * @private
    */
    multiStrandInterpolationLengthThreshold: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-multiStrandInterpolationNoise.md Edit}
    
    * @deprecated
    
    * @private
    */
    multiStrandInterpolationNoise: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-multiStrandInterpolationRadius.md Edit}
    
    * @deprecated
    
    * @private
    */
    multiStrandInterpolationRadius: number
    
    /**
    * Offset of hair density.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-noise.md Edit}
    */
    noise: number
    
    /**
    * This function gets called when the hair visual is initialized in the Lens.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-onInitialized.md Edit}
    */
    onInitialized: (hairVisual: HairVisual) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-preserveStiff.md Edit}
    
    * @deprecated
    
    * @private
    */
    preserveStiff: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-primaryHairMaterial.md Edit}
    
    * @deprecated
    */
    primaryHairMaterial: Material
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-rebuildStrandPointCount.md Edit}
    
    * @deprecated
    
    * @private
    */
    rebuildStrandPointCount: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-relativeStrandScaleEnabled.md Edit}
    
    * @deprecated
    
    * @private
    */
    relativeStrandScaleEnabled: boolean
    
    /**
    * If enabled, hair strands will collide with themselves.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-selfCollisionEnabled.md Edit}
    */
    selfCollisionEnabled: boolean
    
    /**
    * Friction of collisions between hair strands.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-selfCollisionFriction.md Edit}
    */
    selfCollisionFriction: number
    
    /**
    * Radius limit of collisions between hair strands.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-selfCollisionRadius.md Edit}
    */
    selfCollisionRadius: number
    
    /**
    * Determines how stiff collision between hair strands are.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-selfCollisionStiffness.md Edit}
    */
    selfCollisionStiffness: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-singleStrandInterpolationInstanceCount.md Edit}
    
    * @deprecated
    
    * @private
    */
    singleStrandInterpolationInstanceCount: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-singleStrandInterpolationRadius.md Edit}
    
    * @deprecated
    
    * @private
    */
    singleStrandInterpolationRadius: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-steppedCutEnabled.md Edit}
    
    * @private
    */
    steppedCutEnabled: boolean
    
    /**
    * Higher value of stiffness will make hair move less.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-stiffness.md Edit}
    */
    stiffness: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandBunchAberration.md Edit}
    
    * @deprecated
    
    * @private
    */
    strandBunchAberration: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandCollisionEnable.md Edit}
    
    * @deprecated
    
    * @private
    */
    strandCollisionEnable: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandCollisionRadius.md Edit}
    
    * @deprecated
    
    * @private
    */
    strandCollisionRadius: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandCollisionStiff.md Edit}
    
    * @deprecated
    
    * @private
    */
    strandCollisionStiff: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandCut.md Edit}
    
    * @private
    */
    strandCut: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandNeighborCosThreshold.md Edit}
    
    * @private
    */
    strandNeighborCosThreshold: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandNeighborLengthThreshold.md Edit}
    
    * @private
    */
    strandNeighborLengthThreshold: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandNeighborRadius.md Edit}
    
    * @private
    */
    strandNeighborRadius: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandNeighbourSearchType.md Edit}
    
    * @deprecated
    
    * @private
    */
    strandNeighbourSearchType: StrandNeighbourSearchType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandScale.md Edit}
    
    * @deprecated
    
    * @private
    */
    strandScale: number
    
    /**
    * The taper size of each hair towards the tip.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandTaper.md Edit}
    */
    strandTaper: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandTipClamp.md Edit}
    
    * @deprecated
    
    * @private
    */
    strandTipClamp: number
    
    /**
    * The Width of each hair strand.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandWidth.md Edit}
    */
    strandWidth: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-strandsSceneObject.md Edit}
    
    * @deprecated
    
    * @private
    */
    strandsSceneObject: SceneObject
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-stretchLimitEnable.md Edit}
    
    * @deprecated
    
    * @private
    */
    stretchLimitEnable: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-stretchLimitEnabled.md Edit}
    
    * @private
    */
    stretchLimitEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-stretchStiff.md Edit}
    
    * @deprecated
    
    * @private
    */
    stretchStiff: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-stretchStiffness.md Edit}
    
    * @private
    */
    stretchStiffness: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-timeSubs.md Edit}
    
    * @deprecated
    
    * @private
    */
    timeSubs: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-twistStiff.md Edit}
    
    * @deprecated
    
    * @private
    */
    twistStiff: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-twistStiffness.md Edit}
    
    * @private
    */
    twistStiffness: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-windEnable.md Edit}
    
    * @deprecated
    
    * @private
    */
    windEnable: boolean
    
    /**
    * If checked will add wind force to hair simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-windEnabled.md Edit}
    */
    windEnabled: boolean
    
    /**
    * Amount of wind force added to hair simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HairVisual/properties/HairVisual-windForce.md Edit}
    */
    windForce: vec3
    
}

/**
* Provides additional data for the tracked hand. You can figure out whether the tracked hand is the left hand by accessing the *isLeft* property [true/false], as well as the probability of this data through the  *isLeftProbability*  property [0-1].


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandSpecificData/HandSpecificData-description.md Edit}
*/
interface HandSpecificData extends ObjectSpecificData {
}

/**
*     

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAsset/HandTracking3DAsset-description.md Edit}
*/
interface HandTracking3DAsset extends Object3DAsset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAsset/properties/HandTracking3DAsset-annotatorOptionsAsset.md Edit}
    
    * @private
    */
    annotatorOptionsAsset: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAsset/properties/HandTracking3DAsset-handDetectorModel.md Edit}
    
    * @private
    */
    handDetectorModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAsset/properties/HandTracking3DAsset-handModel.md Edit}
    
    * @private
    */
    handModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAsset/properties/HandTracking3DAsset-objectTrackingAsset.md Edit}
    
    * @private
    */
    objectTrackingAsset: ObjectTrackingAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAsset/properties/HandTracking3DAsset-options.md Edit}
    
    * @readonly
    
    * @private
    */
    options: HandTracking3DAssetOptions
    
}
declare namespace HandTracking3DAsset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAsset/methods/HandTracking3DAsset-create.md Edit}
    
    * @private
    */
    export function create(options: HandTracking3DAssetOptions): HandTracking3DAsset
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAssetOptions/HandTracking3DAssetOptions-description.md Edit}

* @private
*/
interface HandTracking3DAssetOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAssetOptions/properties/HandTracking3DAssetOptions-handType.md Edit}
    
    * @private
    */
    handType: HandTracking3DAssetOptions.HandType
    
}
declare namespace HandTracking3DAssetOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAssetOptions/methods/HandTracking3DAssetOptions-create.md Edit}
    
    * @private
    */
    export function create(): HandTracking3DAssetOptions
    

}

declare namespace HandTracking3DAssetOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAssetOptions.HandType/HandTracking3DAssetOptions.HandType-description.md Edit}
    
    * @private
    */
    enum HandType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAssetOptions.HandType/properties/HandTracking3DAssetOptions.HandType-Left.md Edit}
        
        * @private
        */
        Left,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HandTracking3DAssetOptions.HandType/properties/HandTracking3DAssetOptions.HandType-Right.md Edit}
        
        * @private
        */
        Right
    }

}

/**
* Triggers haptic feedback on the device. (iOS Devices only)


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HapticFeedbackSystem/HapticFeedbackSystem-description.md Edit}
*/
interface HapticFeedbackSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HapticFeedbackSystem/methods/HapticFeedbackSystem-hapticFeedback.md Edit}
    */
    hapticFeedback(type: HapticFeedbackType): void
    
}

/**
* The method in which haptic feedback is provided. Use with the `HapticFeedbackSystem`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HapticFeedbackType/HapticFeedbackType-description.md Edit}
*/
declare enum HapticFeedbackType {
    /**
    * Taptic engine based haptic feedback. Available only on some devices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HapticFeedbackType/properties/HapticFeedbackType-TapticEngine.md Edit}
    */
    TapticEngine,
    /**
    * Vibration based haptic feedback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HapticFeedbackType/properties/HapticFeedbackType-Vibration.md Edit}
    */
    Vibration
}

/**
* Binds the SceneObject to a tracked face.
* See the [Head Attached 3D Objects Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/head-attached-3d-objects) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/Head-description.md Edit}
*/
interface Head extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getBarycentricPos.md Edit}
    
    * @private
    */
    getBarycentricPos(indexWeight: vec2[]): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getBarycentricPos2d.md Edit}
    
    * @private
    */
    getBarycentricPos2d(indexWeight: vec2[]): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getExpressionWeight.md Edit}
    
    * @private
    */
    getExpressionWeight(expressionIndex: number): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getExpressionWeightByName.md Edit}
    
    * @private
    */
    getExpressionWeightByName(expressionName: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getFaceMeshSource.md Edit}
    
    * @private
    */
    getFaceMeshSource(): FaceMeshSource
    
    /**
    * Returns the total number of faces currently being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getFacesCount.md Edit}
    */
    getFacesCount(): number
    
    /**
    * Returns the screen position of the face landmark at the passed in index.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getLandmark.md Edit}
    */
    getLandmark(index: number): vec2
    
    /**
    * Returns the number of face landmarks being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getLandmarkCount.md Edit}
    */
    getLandmarkCount(): number
    
    /**
    * Returns a list of screen positions of all tracked landmarks.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getLandmarks.md Edit}
    */
    getLandmarks(): vec2[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getPosition.md Edit}
    
    * @private
    */
    getPosition(index: number): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getPosition2d.md Edit}
    
    * @private
    */
    getPosition2d(index: number): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getRotation.md Edit}
    
    * @private
    */
    getRotation(): quat
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-getSize.md Edit}
    
    * @private
    */
    getSize(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-hasExpressionWithName.md Edit}
    
    * @private
    */
    hasExpressionWithName(expressionName: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-setAttachedBarycentricVertexIndexes.md Edit}
    
    * @private
    */
    setAttachedBarycentricVertexIndexes(index0: number, index1: number, index2: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-setAttachedBarycentricVertexWeights.md Edit}
    
    * @private
    */
    setAttachedBarycentricVertexWeights(weight0: number, weight1: number, weight2: number): void
    
    /**
    * Changes the attachment point type used to anchor this object to a face.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-setAttachmentPointType.md Edit}
    */
    setAttachmentPointType(attachmentPointType: AttachmentPointType): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-setNeedsExpressionWeights.md Edit}
    
    * @private
    */
    setNeedsExpressionWeights(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-setNeedsPreciseExpressionWeights.md Edit}
    
    * @private
    */
    setNeedsPreciseExpressionWeights(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/methods/Head-supportsAccurateDepth.md Edit}
    
    * @unreleased
    */
    supportsAccurateDepth(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/properties/Head-accurateDepth.md Edit}
    
    * @unreleased
    */
    accurateDepth: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/properties/Head-enableDebugRendering.md Edit}
    
    * @private
    */
    enableDebugRendering: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/properties/Head-enhanceWithNativeAR.md Edit}
    
    * @private
    */
    enhanceWithNativeAR: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/properties/Head-externalFaceTexture.md Edit}
    
    * @private
    */
    externalFaceTexture: Texture
    
    /**
    * The index of the face this head is attached to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/properties/Head-faceIndex.md Edit}
    */
    faceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/properties/Head-minFaceScale.md Edit}
    
    * @private
    */
    minFaceScale: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Head/properties/Head-trackingScopeAsset.md Edit}
    
    * @private
    */
    trackingScopeAsset: TrackingScopeAsset
    
}

/**
* Constraints translation and a single axis of rotation.  See also: [ConstraintComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ConstraintComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HingeConstraint/HingeConstraint-description.md Edit}
*/
interface HingeConstraint extends Constraint {
}

/**
* Used to show and hide hints to the user.
* For more information and useful helper scripts, see the [Scripting Hints Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/additional-examples/scripting-hints).

* <table cellspacing=0 cellpadding=0><thead><tr><th>Hint ID</th><th>Hint Message</th></tr></thead><tbody><tr><td>&#8220;lens_hint_blow_a_kiss&#8221;</td><td>&#8220;Blow A Kiss&#8221;</td></tr><tr><td>&#8220;lens_hint_come_closer&#8221;</td><td>&#8220;Come Closer&#8221;</td></tr><tr><td>&#8220;lens_hint_do_not_smile&#8221;</td><td>&#8220;Do Not Smile&#8221;</td></tr><tr><td>&#8220;lens_hint_do_not_try_with_a_friend&#8221;</td><td>&#8220;Do Not Try With A Friend&#8221;</td></tr><tr><td>&#8220;lens_hint_find_face&#8221;</td><td>&#8220;Find Face&#8221;</td></tr><tr><td>&#8220;lens_hint_keep_raising_your_eyebrows&#8221;</td><td>&#8220;Keep Raising Your Eyebrows&#8221;</td></tr><tr><td>&#8220;lens_hint_kiss&#8221;</td><td>&#8220;Kiss&#8221;</td></tr><tr><td>&#8220;lens_hint_kiss_again&#8221;</td><td>&#8220;Kiss Again&#8221;</td></tr><tr><td>&#8220;lens_hint_look_around&#8221;</td><td>&#8220;Look Around&#8221;</td></tr><tr><td>&#8220;lens_hint_look_down&#8221;</td><td>&#8220;Look Down&#8221;</td></tr><tr><td>&#8220;lens_hint_look_left&#8221;</td><td>&#8220;Look Left&#8221;</td></tr><tr><td>&#8220;lens_hint_look_right&#8221;</td><td>&#8220;Look Right&#8221;</td></tr><tr><td>&#8220;lens_hint_look_up&#8221;</td><td>&#8220;Look Up&#8221;</td></tr><tr><td>&#8220;lens_hint_make_some_noise&#8221;</td><td>&#8220;Make Some Noise!&#8221;</td></tr><tr><td>&#8220;lens_hint_nod_your_head&#8221;</td><td>&#8220;Nod Your Head&#8221;</td></tr><tr><td>&#8220;lens_hint_now_kiss&#8221;</td><td>&#8220;Now Kiss&#8221;</td></tr><tr><td>&#8220;lens_hint_now_open_your_mouth&#8221;</td><td>&#8220;Now Open Your Mouth&#8221;</td></tr><tr><td>&#8220;lens_hint_now_raise_your_eyebrows&#8221;</td><td>&#8220;Now Raise Your Eyebrows&#8221;</td></tr><tr><td>&#8220;lens_hint_now_smile&#8221;</td><td>&#8220;Now Smile&#8221;</td></tr><tr><td>&#8220;lens_hint_open_your_mouth&#8221;</td><td>&#8220;Open Your Mouth&#8221;</td></tr><tr><td>&#8220;lens_hint_open_your_mouth_again&#8221;</td><td>&#8220;Open Your Mouth Again&#8221;</td></tr><tr><td>&#8220;lens_hint_raise_eyebrows_or_open_mouth&#8221;</td><td>&#8220;Raise Your Eyebrows / Or / Open Your Mouth&#8221;</td></tr><tr><td>&#8220;lens_hint_raise_your_eyebrows&#8221;</td><td>&#8220;Raise Your Eyebrows&#8221;</td></tr><tr><td>&#8220;lens_hint_raise_your_eyebrows_again&#8221;</td><td>&#8220;Raise Your Eyebrows Again&#8221;</td></tr><tr><td>&#8220;lens_hint_smile&#8221;</td><td>&#8220;Smile&#8221;</td></tr><tr><td>&#8220;lens_hint_smile_again&#8221;</td><td>&#8220;Smile Again&#8221;</td></tr><tr><td>&#8220;lens_hint_swap_camera&#8221;</td><td>&#8220;Swap Camera&#8221;</td></tr><tr><td>&#8220;lens_hint_tap&#8221;</td><td>&#8220;Tap!&#8221;</td></tr><tr><td>&#8220;lens_hint_tap_a_surface&#8221;</td><td>&#8220;Tap A Surface&#8221;</td></tr><tr><td>&#8220;lens_hint_tap_ground&#8221;</td><td>&#8220;Tap The Ground&#8221;</td></tr><tr><td>&#8220;lens_hint_tap_ground_to_place&#8221;</td><td>&#8220;Tap Ground To Place&#8221;</td></tr><tr><td>&#8220;lens_hint_tap_surface_to_place&#8221;</td><td>&#8220;Tap Surface To Place&#8221;</td></tr><tr><td>&#8220;lens_hint_try_friend&#8221;</td><td>&#8220;Try It With A Friend&#8221;</td></tr><tr><td>&#8220;lens_hint_try_rear_camera&#8221;</td><td>&#8220;Try It With Your Rear Camera&#8221;</td></tr><tr><td>&#8220;lens_hint_turn_around&#8221;</td><td>&#8220;Turn Around&#8221;</td></tr><tr><td>&#8220;lens_hint_walk_through_the_door&#8221;</td><td>&#8220;Walk Through The Door&#8221;</td></tr></tbody></table>

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HintsComponent/HintsComponent-description.md Edit}
*/
interface HintsComponent extends Component {
    /**
    * Hides the hint with id `hintID`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HintsComponent/methods/HintsComponent-hideHint.md Edit}
    */
    hideHint(hintID: string): boolean
    
    /**
    * Shows the hint with id `hintID` for a duration of `duration` seconds. Use a duration of -1 to keep the hint onscreen forever.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HintsComponent/methods/HintsComponent-showHint.md Edit}
    */
    showHint(hintID: string, duration: number): boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/HistogramData-description.md Edit}

* @private
*/
interface HistogramData extends AbstractData {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/methods/HistogramData-getCdfArray.md Edit}
    
    * @private
    */
    getCdfArray(): number[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/methods/HistogramData-getCdfArraySize.md Edit}
    
    * @private
    */
    getCdfArraySize(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/methods/HistogramData-getHistogramArray.md Edit}
    
    * @private
    */
    getHistogramArray(): number[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/methods/HistogramData-getHistogramArraySize.md Edit}
    
    * @private
    */
    getHistogramArraySize(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/methods/HistogramData-nthPercintile.md Edit}
    
    * @private
    */
    nthPercintile(percentage: number): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/properties/HistogramData-average.md Edit}
    
    * @private
    */
    average: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/properties/HistogramData-brightness.md Edit}
    
    * @private
    */
    brightness: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/properties/HistogramData-cdfMin.md Edit}
    
    * @private
    */
    cdfMin: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HistogramData/properties/HistogramData-rootMeanSquare.md Edit}
    
    * @private
    */
    rootMeanSquare: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HitTestSession/HitTestSession-description.md Edit}

* @wearableOnly
*/
interface HitTestSession extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HitTestSession/methods/HitTestSession-hitTest.md Edit}
    */
    hitTest(rayStart: vec3, rayEnd: vec3, hitCallback: (hit: WorldQueryHitTestResult) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HitTestSession/methods/HitTestSession-reset.md Edit}
    */
    reset(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HitTestSession/methods/HitTestSession-start.md Edit}
    */
    start(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HitTestSession/methods/HitTestSession-stop.md Edit}
    */
    stop(): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HitTestSessionOptions/HitTestSessionOptions-description.md Edit}

* @wearableOnly
*/
interface HitTestSessionOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HitTestSessionOptions/properties/HitTestSessionOptions-filter.md Edit}
    */
    filter: boolean
    
}
declare namespace HitTestSessionOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HitTestSessionOptions/methods/HitTestSessionOptions-create.md Edit}
    
    * @wearableOnly
    */
    export function create(): HitTestSessionOptions
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoleMode/HoleMode-description.md Edit}

* @private
*/
declare enum HoleMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoleMode/properties/HoleMode-Full.md Edit}
    
    * @private
    */
    Full,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoleMode/properties/HoleMode-HolesOnly.md Edit}
    
    * @private
    */
    HolesOnly,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoleMode/properties/HoleMode-NoHoles.md Edit}
    
    * @private
    */
    NoHoles
}

/**
* Used by the `horizontalAlignment` property in [MeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual).
* When a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) is attached to the same SceneObject, this determines how the mesh will be positioned horizontally.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalAlignment/HorizontalAlignment-description.md Edit}
*/
declare enum HorizontalAlignment {
    /**
    * The mesh will be aligned to the left side.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalAlignment/properties/HorizontalAlignment-Left.md Edit}
    */
    Left,
    /**
    * The mesh will be centered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalAlignment/properties/HorizontalAlignment-Center.md Edit}
    */
    Center,
    /**
    * The mesh will be aligned to the right side.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalAlignment/properties/HorizontalAlignment-Right.md Edit}
    */
    Right
}

/**
* Options for wrapping text horizontally.
* Used by [Text component's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `horizontalOverflow` property.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalOverflow/HorizontalOverflow-description.md Edit}
*/
declare enum HorizontalOverflow {
    /**
    * Text will continue drawing past horizontal boundaries.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalOverflow/properties/HorizontalOverflow-Overflow.md Edit}
    */
    Overflow,
    /**
    * Text is clipped to the width of horizontal boundaries.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalOverflow/properties/HorizontalOverflow-Truncate.md Edit}
    */
    Truncate,
    /**
    * Text wraps when reaching horizontal boundaries and continues on the next line.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalOverflow/properties/HorizontalOverflow-Wrap.md Edit}
    */
    Wrap,
    /**
    * Text will shrink to fit within the horizontal boundaries.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HorizontalOverflow/properties/HorizontalOverflow-Shrink.md Edit}
    */
    Shrink
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverEndEvent/HoverEndEvent-description.md Edit}

* @private
*/
interface HoverEndEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverEndEvent/methods/HoverEndEvent-getHoverPosition.md Edit}
    
    * @unreleased
    
    * @private
    */
    getHoverPosition(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverEndEventArgs/HoverEndEventArgs-description.md Edit}

* @private
*/
interface HoverEndEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverEndEventArgs/properties/HoverEndEventArgs-position.md Edit}
    
    * @readonly
    
    * @private
    */
    position: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverEvent/HoverEvent-description.md Edit}
*/
interface HoverEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverEvent/methods/HoverEvent-getHoverPosition.md Edit}
    */
    getHoverPosition(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverEventArgs/HoverEventArgs-description.md Edit}

* @private
*/
interface HoverEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverEventArgs/properties/HoverEventArgs-position.md Edit}
    
    * @readonly
    
    * @private
    */
    position: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverStartEvent/HoverStartEvent-description.md Edit}

* @private
*/
interface HoverStartEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverStartEvent/methods/HoverStartEvent-getHoverPosition.md Edit}
    
    * @unreleased
    
    * @private
    */
    getHoverPosition(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverStartEventArgs/HoverStartEventArgs-description.md Edit}

* @private
*/
interface HoverStartEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HoverStartEventArgs/properties/HoverStartEventArgs-position.md Edit}
    
    * @readonly
    
    * @private
    */
    position: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HRTFMode/HRTFMode-description.md Edit}

* @private
*/
declare enum HRTFMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HRTFMode/properties/HRTFMode-Regular.md Edit}
    
    * @private
    */
    Regular,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/HRTFMode/properties/HRTFMode-DeviceCalibrated.md Edit}
    
    * @private
    */
    DeviceCalibrated
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IAssetSystem/IAssetSystem-description.md Edit}

* @private
*/
interface IAssetSystem extends ScriptObject {
}

/**
* The base class for parameter objects passed into event callbacks.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IEventParameters/IEventParameters-description.md Edit}
*/
interface IEventParameters extends ScriptObject {
}

/**
* A 2D visual used for drawing texture assets.
* Commonly used with [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) for drawing images on the screen.

* See the [Image guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/2d/image) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Image/Image-description.md Edit}
*/
interface Image extends MaterialMeshVisual {
    /**
    * If enabled, the drawn image will be flipped horizontally.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Image/properties/Image-flipX.md Edit}
    */
    flipX: boolean
    
    /**
    * If enabled, the drawn image will be flipped vertically.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Image/properties/Image-flipY.md Edit}
    */
    flipY: boolean
    
    /**
    * The location of the Image's pivot point relative to its boundaries.
    * Where (-1, -1) is the bottom left corner, (0, 0) is the center, and (1, 1) is the top right corner of the Image.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Image/properties/Image-pivot.md Edit}
    */
    pivot: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Image/properties/Image-size.md Edit}
    
    * @private
    */
    size: vec2
    
}

/**
* Controls an image picker texture and UI.
* Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider) on an Image Picker texture.
* For more information, see the [Image Picker Texture](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/2d/media-picker-texture) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImagePickerTextureProvider/ImagePickerTextureProvider-description.md Edit}
*/
interface ImagePickerTextureProvider extends MediaPickerTextureProvider {
    /**
    * Hides the image picker UI.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImagePickerTextureProvider/methods/ImagePickerTextureProvider-hideImagePicker.md Edit}
    */
    hideImagePicker(): void
    
    /**
    * Binds a callback function for when the user selects or changes an image from the picker.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImagePickerTextureProvider/methods/ImagePickerTextureProvider-setImageChangedCallback.md Edit}
    */
    setImageChangedCallback(callback: () => void): void
    
    /**
    * Shows the image picker UI.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImagePickerTextureProvider/methods/ImagePickerTextureProvider-showImagePicker.md Edit}
    */
    showImagePicker(): void
    
    /**
    * If enabled, the image picker UI will be shown automatically when the Lens starts.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImagePickerTextureProvider/properties/ImagePickerTextureProvider-autoShowImagePicker.md Edit}
    */
    autoShowImagePicker: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadCompressionMethod/ImageUploadCompressionMethod-description.md Edit}

* @private
*/
declare enum ImageUploadCompressionMethod {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadCompressionMethod/properties/ImageUploadCompressionMethod-PNG.md Edit}
    
    * @private
    */
    PNG,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadCompressionMethod/properties/ImageUploadCompressionMethod-JPG.md Edit}
    
    * @private
    */
    JPG,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadCompressionMethod/properties/ImageUploadCompressionMethod-WEBP.md Edit}
    
    * @private
    */
    WEBP
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadOptions/ImageUploadOptions-description.md Edit}

* @private
*/
interface ImageUploadOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadOptions/properties/ImageUploadOptions-compressionMethod.md Edit}
    
    * @private
    */
    compressionMethod: ImageUploadCompressionMethod
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadOptions/properties/ImageUploadOptions-compressionQuality.md Edit}
    
    * @private
    */
    compressionQuality: CompressionQuality
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadOptions/properties/ImageUploadOptions-includeAlpha.md Edit}
    
    * @private
    */
    includeAlpha: boolean
    
}
declare namespace ImageUploadOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ImageUploadOptions/methods/ImageUploadOptions-create.md Edit}
    
    * @private
    */
    export function create(): ImageUploadOptions
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Inpainting/Inpainting-description.md Edit}

* @private
*/
interface Inpainting extends PostEffectVisual {
}

/**
* Builds InputPlaceHolders for MLComponent.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputBuilder/InputBuilder-description.md Edit}
*/
interface InputBuilder extends ScriptObject {
    /**
    * Builds and returns a new InputPlaceholder.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputBuilder/methods/InputBuilder-build.md Edit}
    */
    build(): InputPlaceholder
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputBuilder/methods/InputBuilder-setAllowImageTracker.md Edit}
    
    * @unreleased
    
    * @private
    */
    setAllowImageTracker(value: boolean): InputBuilder
    
    /**
    * Sets the input texture of the InputPlaceholder to be built.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputBuilder/methods/InputBuilder-setInputTexture.md Edit}
    */
    setInputTexture(texture: Texture): InputBuilder
    
    /**
    * Sets the name of the InputPlaceholder to be built.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputBuilder/methods/InputBuilder-setName.md Edit}
    */
    setName(name: string): InputBuilder
    
    /**
    * Sets sampler for input placeholder builder.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputBuilder/methods/InputBuilder-setSampler.md Edit}
    */
    setSampler(sampler: Sampler): InputBuilder
    
    /**
    * Sets the shape of the InputPlaceholder to be built.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputBuilder/methods/InputBuilder-setShape.md Edit}
    */
    setShape(shape: vec3): InputBuilder
    
    /**
    * Sets the Transformer of the InputPlaceholder to be built.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputBuilder/methods/InputBuilder-setTransformer.md Edit}
    */
    setTransformer(transformer: Transformer): InputBuilder
    
}

/**
* Controls input data for a neural network used by an MLComponent.
* For more information, see the [MLComponent Scripting](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/scripting-ml-component) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputPlaceholder/InputPlaceholder-description.md Edit}
*/
interface InputPlaceholder extends BasePlaceholder {
    /**
    * Data used as input.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputPlaceholder/properties/InputPlaceholder-data.md Edit}
    
    * @readonly
    */
    data: Float32Array
    
    /**
    * Texture used as input.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InputPlaceholder/properties/InputPlaceholder-texture.md Edit}
    */
    texture: Texture
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntAnimationPropertyTrack/IntAnimationPropertyTrack-description.md Edit}

* @private
*/
interface IntAnimationPropertyTrack extends AnimationPropertyTrack {
}

/**
* The base class for animation tracks using integer values.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntAnimationTrack/IntAnimationTrack-description.md Edit}

* @deprecated
*/
interface IntAnimationTrack extends AnimationTrack {
}

/**
* Allows the `MeshVisual` provided to this component to handle touches on the screen (blocking Snapchat from receiving the touches), and optionally let certain touch types to pass through (let Snapchat handle the touch).

* Possible `TouchType` values:

* "TouchTypeNone"
* "TouchTypeTouch"
* "TouchTypeTap"
* "TouchTypeDoubleTap"
* "TouchTypeScale"
* "TouchTypePan"
* "TouchTypeSwipe"

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/InteractionComponent-description.md Edit}
*/
interface InteractionComponent extends Component {
    /**
    * Adds a MeshVisual as a target for interaction detection.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/methods/InteractionComponent-addMeshVisual.md Edit}
    */
    addMeshVisual(meshVisual: BaseMeshVisual): void
    
    /**
    * Adds a touch type that this component will ignore.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/methods/InteractionComponent-addTouchBlockingException.md Edit}
    */
    addTouchBlockingException(exception: string): void
    
    /**
    * Returns the minimum bounding box size used for detecting touches. Value range is from [0-1], relative to screen width.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/methods/InteractionComponent-getMinimumTouchSize.md Edit}
    */
    getMinimumTouchSize(): number
    
    /**
    * Removes a MeshVisual as a target for interaction detection.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/methods/InteractionComponent-removeMeshVisual.md Edit}
    */
    removeMeshVisual(meshVisual: BaseMeshVisual): void
    
    /**
    * Sets the camera that will be used for interaction detection.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/methods/InteractionComponent-setCamera.md Edit}
    */
    setCamera(camera: Camera): void
    
    /**
    * Sets the minimum bounding box size used for detecting touches. Value range is from [0-1], relative to screen width.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/methods/InteractionComponent-setMinimumTouchSize.md Edit}
    */
    setMinimumTouchSize(value: number): void
    
    /**
    * When enabled, interaction events will be invoked only on the"closest" object, where order is defined by distance from camera and camera render order.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-isFilteredByDepth.md Edit}
    */
    isFilteredByDepth: boolean
    
    /**
    * Returns whether the user is currently gazing at the object on wearable devices, and when the user is touching on mobile devices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-isFocused.md Edit}
    
    * @readonly
    */
    isFocused: boolean
    
    /**
    * Returns whether the user is currently selecting and gazing at an object on wearable devices, or touching it on mobile devices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-isSelected.md Edit}
    
    * @readonly
    */
    isSelected: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onDoubleTap.md Edit}
    
    * @unreleased
    
    * @readonly
    */
    onDoubleTap: event1<DoubleTapEventArgs, void>
    
    /**
    * On mobile devices, this is triggered when the user releases their touch. On wearable devices, this is triggered when the user looks away from the current object. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onFocusEnd.md Edit}
    
    * @readonly
    */
    onFocusEnd: event1<FocusEndEventArgs, void>
    
    /**
    * On mobile devices, this is triggered when the user starts touching. On wearable devices, this is triggered when the user gazes on the current object. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onFocusStart.md Edit}
    
    * @readonly
    */
    onFocusStart: event1<FocusStartEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onHover.md Edit}
    
    * @readonly
    
    * @private
    */
    onHover: event1<HoverEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onHoverEnd.md Edit}
    
    * @readonly
    
    * @private
    */
    onHoverEnd: event1<HoverEndEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onHoverStart.md Edit}
    
    * @readonly
    
    * @private
    */
    onHoverStart: event1<HoverStartEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onLongPressEnd.md Edit}
    
    * @readonly
    
    * @private
    */
    onLongPressEnd: event1<LongPressEndEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onLongPressStart.md Edit}
    
    * @readonly
    
    * @private
    */
    onLongPressStart: event1<LongPressStartEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onPanEnd.md Edit}
    
    * @readonly
    
    * @private
    */
    onPanEnd: event1<PanEndEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onPanMove.md Edit}
    
    * @readonly
    
    * @private
    */
    onPanMove: event1<PanMoveEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onPanStart.md Edit}
    
    * @readonly
    
    * @private
    */
    onPanStart: event1<PanStartEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onPinchEnd.md Edit}
    
    * @readonly
    
    * @private
    */
    onPinchEnd: event1<PinchEndEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onPinchMove.md Edit}
    
    * @readonly
    
    * @private
    */
    onPinchMove: event1<PinchMoveEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onPinchStart.md Edit}
    
    * @readonly
    
    * @private
    */
    onPinchStart: event1<PinchStartEventArgs, void>
    
    /**
    * On mobile devices, this is triggered when the user releases their touch. On wearable devices, this is triggered when the user stops touching the current object. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onSelectEnd.md Edit}
    
    * @readonly
    */
    onSelectEnd: event1<SelectEndEventArgs, void>
    
    /**
    * On mobile devices, this is triggered when the user starts touching the current object. On wearable devices, this is triggered when the user touches the touchpad while focusing on an object. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onSelectStart.md Edit}
    
    * @readonly
    */
    onSelectStart: event1<SelectStartEventArgs, void>
    
    /**
    * Triggered when the user taps on the screen.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onTap.md Edit}
    
    * @readonly
    */
    onTap: event1<TapEventArgs, void>
    
    /**
    * Triggered when a touch event ends.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onTouchEnd.md Edit}
    
    * @readonly
    */
    onTouchEnd: event1<TouchEndEventArgs, void>
    
    /**
    * Triggered when a touch position on the screen is moved.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onTouchMove.md Edit}
    
    * @readonly
    */
    onTouchMove: event1<TouchMoveEventArgs, void>
    
    /**
    * Triggered when a touch event starts--either on the screen or on a touchpad. On wearables with touchpad, the coordinate returned are based on the touchpad and not the screen.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onTouchStart.md Edit}
    
    * @readonly
    */
    onTouchStart: event1<TouchStartEventArgs, void>
    
    /**
    * Gets called when the user triggers the primary input on their device. For example touch on touch screens.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InteractionComponent/properties/InteractionComponent-onTriggerPrimary.md Edit}
    
    * @readonly
    */
    onTriggerPrimary: event1<TriggerPrimaryEventArgs, void>
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InternalMeshBuilderConfig/InternalMeshBuilderConfig-description.md Edit}

* @private
*/
interface InternalMeshBuilderConfig extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InternalMeshBuilderConfig/properties/InternalMeshBuilderConfig-colorEnabled.md Edit}
    
    * @private
    */
    colorEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InternalMeshBuilderConfig/properties/InternalMeshBuilderConfig-emptySpaceUpdatesEnabled.md Edit}
    
    * @private
    */
    emptySpaceUpdatesEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InternalMeshBuilderConfig/properties/InternalMeshBuilderConfig-maxDepth.md Edit}
    
    * @private
    */
    maxDepth: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InternalMeshBuilderConfig/properties/InternalMeshBuilderConfig-minDepth.md Edit}
    
    * @private
    */
    minDepth: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InternalMeshBuilderConfig/properties/InternalMeshBuilderConfig-minDepthConfidence.md Edit}
    
    * @private
    */
    minDepthConfidence: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InternalMeshBuilderConfig/properties/InternalMeshBuilderConfig-voxelSize.md Edit}
    
    * @private
    */
    voxelSize: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/InternetModule/InternetModule-description.md Edit}

* @private
*/
interface InternetModule extends Asset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepAnimationPropertyTrack/IntStepAnimationPropertyTrack-description.md Edit}

* @private
*/
interface IntStepAnimationPropertyTrack extends AnimationPropertyTrack {
}

/**
* Represents an animation track using stepped integer value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepAnimationTrackKeyFramed/IntStepAnimationTrackKeyFramed-description.md Edit}

* @deprecated
*/
interface IntStepAnimationTrackKeyFramed extends IntAnimationTrack {
    /**
    * Adds a key with value `value` at time `time`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepAnimationTrackKeyFramed/methods/IntStepAnimationTrackKeyFramed-addKey.md Edit}
    */
    addKey(time: number, value: number): void
    
    /**
    * Removes all keys.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepAnimationTrackKeyFramed/methods/IntStepAnimationTrackKeyFramed-removeAllKeys.md Edit}
    */
    removeAllKeys(): void
    
    /**
    * Removes key at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepAnimationTrackKeyFramed/methods/IntStepAnimationTrackKeyFramed-removeKeyAt.md Edit}
    */
    removeKeyAt(index: number): void
    
}

/**
* Represents an animation track using stepped integer value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepNoLerpAnimationTrackKeyFramed/IntStepNoLerpAnimationTrackKeyFramed-description.md Edit}

* @deprecated
*/
interface IntStepNoLerpAnimationTrackKeyFramed extends IntAnimationTrack {
    /**
    * Adds a key with value `value` at time `time`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepNoLerpAnimationTrackKeyFramed/methods/IntStepNoLerpAnimationTrackKeyFramed-addKey.md Edit}
    */
    addKey(time: number, value: number): void
    
    /**
    * Removes all keys.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepNoLerpAnimationTrackKeyFramed/methods/IntStepNoLerpAnimationTrackKeyFramed-removeAllKeys.md Edit}
    */
    removeAllKeys(): void
    
    /**
    * Removes key at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/IntStepNoLerpAnimationTrackKeyFramed/methods/IntStepNoLerpAnimationTrackKeyFramed-removeKeyAt.md Edit}
    */
    removeKeyAt(index: number): void
    
}

/**
* Triggered when the tracked face ends a kiss.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/KissFinishedEvent/KissFinishedEvent-description.md Edit}
*/
interface KissFinishedEvent extends FaceTrackingEvent {
}

/**
* Triggered when the tracked face starts a kiss.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/KissStartedEvent/KissStartedEvent-description.md Edit}
*/
interface KissStartedEvent extends FaceTrackingEvent {
}

/**
* Displays text in the scene.
* This is now deprecated in favor of [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text).
* See the [Text guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/text/2d-text) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/Label-description.md Edit}

* @deprecated
*/
interface Label extends SpriteVisual {
    /**
    * Returns the potential width and height of the Label if it were to display the input text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/methods/Label-measureText.md Edit}
    */
    measureText(text: string): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/methods/Label-setTextInfo.md Edit}
    
    * @deprecated
    
    * @private
    */
    setTextInfo(text: string, font: string, size: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-dropshadowColor.md Edit}
    
    * @deprecated
    
    * @private
    */
    dropshadowColor: vec2
    
    /**
    * The horizontal and vertical offset used for dropshadow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-dropshadowOffset.md Edit}
    
    * @deprecated
    
    * @private
    */
    dropshadowOffset: vec2
    
    /**
    * The font used to display text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-fontAsset.md Edit}
    */
    fontAsset: Font
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-fontName.md Edit}
    
    * @deprecated
    
    * @private
    */
    fontName: string
    
    /**
    * The color used for the outline effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-outlineColor.md Edit}
    */
    outlineColor: vec4
    
    /**
    * The strength of the outline effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-outlineSize.md Edit}
    */
    outlineSize: number
    
    /**
    * The color used for dropshadow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-shadowColor.md Edit}
    */
    shadowColor: vec4
    
    /**
    * The horizontal and vertical offset used for dropshadow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-shadowOffset.md Edit}
    */
    shadowOffset: vec2
    
    /**
    * The font size being used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-size.md Edit}
    */
    size: number
    
    /**
    * The text displayed by the Label.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-text.md Edit}
    */
    text: string
    
    /**
    * The color used for drawing text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-textColor.md Edit}
    */
    textColor: vec4
    
    /**
    * If enabled, adds a dropshadow to the text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-useDropshadow.md Edit}
    */
    useDropshadow: boolean
    
    /**
    * If enabled, adds an outline around the text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Label/properties/Label-useOutline.md Edit}
    */
    useOutline: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LandmarkersSystem/LandmarkersSystem-description.md Edit}

* @private
*/
interface LandmarkersSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LandmarkersSystem/methods/LandmarkersSystem-downloadLocalizationModel.md Edit}
    
    * @private
    */
    downloadLocalizationModel(location: LocationAsset, successCallback: (localizationModel: LocalizationModel) => void, failureCallback: (error: string) => void): void
    
}

/**
* This event is triggered at the end of every frame, after normal [UpdateEvents](https://lensstudio.snapchat.com/api/lens-studio/Classes/Events#UpdateEvent) trigger
* but before rendering occurs.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LateUpdateEvent/LateUpdateEvent-description.md Edit}
*/
interface LateUpdateEvent extends SceneEvent {
    /**
    * Returns the time elapsed (in seconds) between the current frame and previous frame.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LateUpdateEvent/methods/LateUpdateEvent-getDeltaTime.md Edit}
    */
    getDeltaTime(): number
    
}

/**
* Used to describe a set of layers that an object belongs to or interacts with.

* See [SceneObject's](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) `layer` property, [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `renderLayer` property, and [LightSource's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#LightSource) `renderLayer` property.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/LayerSet-description.md Edit}
*/
interface LayerSet {
    /**
    * Returns true if all layers in the `other` LayerSet are also present in this one.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/methods/LayerSet-contains.md Edit}
    */
    contains(other: LayerSet): boolean
    
    /**
    * Returns a new LayerSet that contains layers present in this LayerSet but not present in `other`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/methods/LayerSet-except.md Edit}
    */
    except(other: LayerSet): LayerSet
    
    /**
    * Returns a new LayerSet that only contains layers present in both this LayerSet and `other`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/methods/LayerSet-intersect.md Edit}
    */
    intersect(other: LayerSet): LayerSet
    
    /**
    * Returns true if this LayerSet contains no layers.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/methods/LayerSet-isEmpty.md Edit}
    */
    isEmpty(): boolean
    
    /**
    * Returns a string representation of this LayerSet.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/methods/LayerSet-toString.md Edit}
    */
    toString(): string
    
    /**
    * Returns a new LayerSet combining this LayerSet and `other`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/methods/LayerSet-union.md Edit}
    */
    union(other: LayerSet): LayerSet
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/properties/LayerSet-numbers.md Edit}
    */
    numbers: number[]
    
}
declare namespace LayerSet {
    /**
    * Returns a new LayerSet based on the passed in number.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/methods/LayerSet-fromNumber.md Edit}
    */
    export function fromNumber(layerId: number): LayerSet
    
    /**
    * Creates a new LayerSet that is guaranteed to be empty and not intersect existing layers. This bypasses the normal 32 layer limit in Studio, allowing for around 65,000 unique layers.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LayerSet/methods/LayerSet-makeUnique.md Edit}
    */
    export function makeUnique(): LayerSet
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard/Leaderboard-description.md Edit}
*/
interface Leaderboard extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard/methods/Leaderboard-getLeaderboardInfo.md Edit}
    */
    getLeaderboardInfo(options: Leaderboard.RetrievalOptions, successCallback: (othersInfo: Leaderboard.UserRecord[], currentUserInfo?: Leaderboard.UserRecord) => void, failureCallback: (status: number) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard/methods/Leaderboard-submitScore.md Edit}
    */
    submitScore(score: number, successCallback: (currentUserInfo: Leaderboard.UserRecord) => void, failureCallback: (status: number) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard/properties/Leaderboard-leaderboardId.md Edit}
    
    * @readonly
    
    * @private
    */
    leaderboardId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard/properties/Leaderboard-name.md Edit}
    
    * @readonly
    */
    name: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard/properties/Leaderboard-orderingType.md Edit}
    
    * @readonly
    */
    orderingType: Leaderboard.OrderingType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard/properties/Leaderboard-ttlSeconds.md Edit}
    
    * @readonly
    */
    ttlSeconds: number
    
}

declare namespace Leaderboard {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.CreateOptions/Leaderboard.CreateOptions-description.md Edit}
    */
    interface CreateOptions extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.CreateOptions/properties/Leaderboard.CreateOptions-name.md Edit}
        */
        name: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.CreateOptions/properties/Leaderboard.CreateOptions-orderingType.md Edit}
        */
        orderingType: Leaderboard.OrderingType
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.CreateOptions/properties/Leaderboard.CreateOptions-ttlSeconds.md Edit}
        */
        ttlSeconds: number
        
    }

}
declare namespace Leaderboard {
    namespace CreateOptions {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.CreateOptions/methods/Leaderboard.CreateOptions-create.md Edit}
        */
        export function create(): Leaderboard.CreateOptions
        
    
    }

}

declare namespace Leaderboard {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.OrderingType/Leaderboard.OrderingType-description.md Edit}
    */
    enum OrderingType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.OrderingType/properties/Leaderboard.OrderingType-Descending.md Edit}
        */
        Descending,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.OrderingType/properties/Leaderboard.OrderingType-Ascending.md Edit}
        */
        Ascending
    }

}

declare namespace Leaderboard {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.RetrievalOptions/Leaderboard.RetrievalOptions-description.md Edit}
    */
    interface RetrievalOptions extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.RetrievalOptions/properties/Leaderboard.RetrievalOptions-usersLimit.md Edit}
        */
        usersLimit: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.RetrievalOptions/properties/Leaderboard.RetrievalOptions-usersType.md Edit}
        */
        usersType: Leaderboard.UsersType
        
    }

}
declare namespace Leaderboard {
    namespace RetrievalOptions {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.RetrievalOptions/methods/Leaderboard.RetrievalOptions-create.md Edit}
        */
        export function create(): Leaderboard.RetrievalOptions
        
    
    }

}

declare namespace Leaderboard {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.UserRecord/Leaderboard.UserRecord-description.md Edit}
    */
    interface UserRecord extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.UserRecord/properties/Leaderboard.UserRecord-globalExactRank.md Edit}
        
        * @readonly
        */
        globalExactRank?: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.UserRecord/properties/Leaderboard.UserRecord-globalRankPercentile.md Edit}
        
        * @readonly
        */
        globalRankPercentile: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.UserRecord/properties/Leaderboard.UserRecord-score.md Edit}
        
        * @readonly
        */
        score: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.UserRecord/properties/Leaderboard.UserRecord-snapchatUser.md Edit}
        
        * @readonly
        */
        snapchatUser: SnapchatUser
        
    }

}

declare namespace Leaderboard {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.UsersType/Leaderboard.UsersType-description.md Edit}
    */
    enum UsersType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.UsersType/properties/Leaderboard.UsersType-Friends.md Edit}
        */
        Friends,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Leaderboard.UsersType/properties/Leaderboard.UsersType-Global.md Edit}
        */
        Global
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LeaderboardModule/LeaderboardModule-description.md Edit}
*/
interface LeaderboardModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LeaderboardModule/methods/LeaderboardModule-getLeaderboard.md Edit}
    
    * @exposesUserData
    */
    getLeaderboard(options: Leaderboard.CreateOptions, successCallback: (leaderboard: Leaderboard) => void, failureCallback: (message: string) => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LegacyFaceMeshProvider/LegacyFaceMeshProvider-description.md Edit}

* @deprecated

* @private
*/
interface LegacyFaceMeshProvider extends RenderObjectProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LegacyFaceMeshProvider/properties/LegacyFaceMeshProvider-externalMesh.md Edit}
    
    * @private
    */
    externalMesh: RenderMesh
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LegacyFaceMeshProvider/properties/LegacyFaceMeshProvider-faceIndex.md Edit}
    
    * @private
    */
    faceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LegacyFaceMeshProvider/properties/LegacyFaceMeshProvider-vertexMatchingMode.md Edit}
    
    * @private
    */
    vertexMatchingMode: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LegacyFaceMeshProvider/properties/LegacyFaceMeshProvider-vertexMatchingRadius.md Edit}
    
    * @private
    */
    vertexMatchingRadius: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataKey/LensDataKey-description.md Edit}

* @private
*/
interface LensDataKey {
}
declare namespace LensDataKey {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataKey/properties/LensDataKey-SnapReceivedWithLens.md Edit}
    
    * @private
    */
    let SnapReceivedWithLens: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataKey/properties/LensDataKey-SnapSavedWithLens.md Edit}
    
    * @private
    */
    let SnapSavedWithLens: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataKey/properties/LensDataKey-SnapSendWithLens.md Edit}
    
    * @private
    */
    let SnapSendWithLens: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataKey/properties/LensDataKey-StoryPostWithLens.md Edit}
    
    * @private
    */
    let StoryPostWithLens: string
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataSystem/LensDataSystem-description.md Edit}

* @private
*/
interface LensDataSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataSystem/methods/LensDataSystem-getLensData.md Edit}
    
    * @private
    */
    getLensData(key: string): AnyData
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataSystem/methods/LensDataSystem-isLensDataReady.md Edit}
    
    * @private
    */
    isLensDataReady(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensDataSystem/methods/LensDataSystem-requestLensData.md Edit}
    
    * @private
    */
    requestLensData(callback: () => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/LensEntryPoint-description.md Edit}

* @private
*/
declare enum LensEntryPoint {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-LiveCamera.md Edit}
    
    * @private
    */
    LiveCamera,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-StoryReply.md Edit}
    
    * @private
    */
    StoryReply,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-ChatReply.md Edit}
    
    * @private
    */
    ChatReply,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-Restart.md Edit}
    
    * @private
    */
    Restart,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-PreviewCancel.md Edit}
    
    * @private
    */
    PreviewCancel,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-Map.md Edit}
    
    * @private
    */
    Map,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-BitmojiStickers.md Edit}
    
    * @private
    */
    BitmojiStickers,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-PostCapturePreview.md Edit}
    
    * @private
    */
    PostCapturePreview,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LensEntryPoint/properties/LensEntryPoint-PostCaptureTranscoding.md Edit}
    
    * @private
    */
    PostCaptureTranscoding
}

/**
* Collider asset generated from a mesh to be used with the [Hair Visual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#HairVisual) as part of the hair simulation.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LevelsetColliderAsset/LevelsetColliderAsset-description.md Edit}
*/
interface LevelsetColliderAsset extends BinAsset {
}

/**
* A levelset collision shape. A levelset is an asset that is generated to approximate a mesh.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LevelsetShape/LevelsetShape-description.md Edit}
*/
interface LevelsetShape extends Shape {
    /**
    * Reference to the levelset asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LevelsetShape/properties/LevelsetShape-asset.md Edit}
    */
    asset: LevelsetColliderAsset
    
}

/**
* Acts as a source of light in the scene.
* See the [Light and Shadows](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/graphics/light-and-shadow) guide for more information about lighting.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/LightSource-description.md Edit}
*/
interface LightSource extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/methods/LightSource-addRenderLayer.md Edit}
    
    * @deprecated
    
    * @private
    */
    addRenderLayer(id: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/methods/LightSource-checkRenderLayer.md Edit}
    
    * @deprecated
    
    * @private
    */
    checkRenderLayer(id: number): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/methods/LightSource-getAllRenderLayers.md Edit}
    
    * @deprecated
    
    * @private
    */
    getAllRenderLayers(): number[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/methods/LightSource-removeRenderLayer.md Edit}
    
    * @deprecated
    
    * @private
    */
    removeRenderLayer(id: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/methods/LightSource-resetDynamicEnvMap.md Edit}
    
    * @private
    */
    resetDynamicEnvMap(): void
    
    /**
    * If enabled, the LightSource will be automatically positioned based on its orientation relative to any shadow casting meshes in the scene.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-autoLightSourcePosition.md Edit}
    */
    autoLightSourcePosition: boolean
    
    /**
    * If enabled, `shadowFrustumSize` will be automatically updated based on its orientation relative to any shadow casting meshes in the scene.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-autoShadowFrustumSize.md Edit}
    */
    autoShadowFrustumSize: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-autoShadowFrustumSizeExtend.md Edit}
    
    * @private
    */
    autoShadowFrustumSizeExtend: number
    
    /**
    * If enabled, the LightSource will be able to cast shadows.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-castsShadows.md Edit}
    */
    castsShadows: boolean
    
    /**
    * The color of the light.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-color.md Edit}
    */
    color: vec3
    
    /**
    * A color image applied to an imaginary skybox the light source will use for color information.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-diffuseEnvTexture.md Edit}
    
    * @deprecated
    
    * @private
    */
    diffuseEnvTexture: Texture
    
    /**
    * A color image applied to an imaginary skybox the LightSource will use for color information.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-diffuseEnvmapTexture.md Edit}
    */
    diffuseEnvmapTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-dynamicEnvLight.md Edit}
    
    * @private
    */
    dynamicEnvLight: DynamicEnvLight
    
    /**
    * A value used to increase the intensity of light information derived from the `diffuseEnvmapTexture` exponentially.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-envmapExposure.md Edit}
    */
    envmapExposure: number
    
    /**
    * Controls the amount of rotation applied to the `diffuseEnvmapTexture`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-envmapRotation.md Edit}
    */
    envmapRotation: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-estimationIntensity.md Edit}
    
    * @private
    */
    estimationIntensity: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-estimationModel.md Edit}
    
    * @private
    */
    estimationModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-falloffEndDistance.md Edit}
    
    * @private
    */
    falloffEndDistance: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-gaussianBlurKernelSize.md Edit}
    
    * @deprecated
    
    * @private
    */
    gaussianBlurKernelSize: number
    
    /**
    * Controls the strength of blurring done to shadows cast by this LightSource.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-gaussianBlurSigma.md Edit}
    
    * @deprecated
    */
    gaussianBlurSigma: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-gaussianBlurStep.md Edit}
    
    * @deprecated
    
    * @private
    */
    gaussianBlurStep: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-innerConeAngleDegrees.md Edit}
    
    * @private
    */
    innerConeAngleDegrees: number
    
    /**
    * The strength of the light on a scale of 0.0  1.0.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-intensity.md Edit}
    */
    intensity: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-lightEstimationCustomModel.md Edit}
    
    * @private
    */
    lightEstimationCustomModel: Asset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-lightEstimationIntensity.md Edit}
    
    * @private
    */
    lightEstimationIntensity: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-lightEstimationSharpness.md Edit}
    
    * @private
    */
    lightEstimationSharpness: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-outerConeAngleDegrees.md Edit}
    
    * @private
    */
    outerConeAngleDegrees: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-rangeEnabled.md Edit}
    
    * @private
    */
    rangeEnabled: boolean
    
    /**
    * The set of layers this LightSource will affect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-renderLayer.md Edit}
    */
    renderLayer: LayerSet
    
    /**
    * Controls the blurring size used when casting shadows from this LightSource.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-shadowBlurRadius.md Edit}
    */
    shadowBlurRadius: number
    
    /**
    * Controls the color used when casting shadows from this LightSource.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-shadowColor.md Edit}
    */
    shadowColor: vec4
    
    /**
    * The lightness and darkness value of the shadow cast by objects from this light source.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-shadowDensity.md Edit}
    */
    shadowDensity: number
    
    /**
    * The maximum distance at which shadows will be calculated for this LightSource.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-shadowFrustumFarClipPlane.md Edit}
    */
    shadowFrustumFarClipPlane: number
    
    /**
    * The minimum distance at which shadows will be calculated for this LightSource.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-shadowFrustumNearClipPlane.md Edit}
    */
    shadowFrustumNearClipPlane: number
    
    /**
    * The simulated distance of the light source from objects to calculate the softness of the shadow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-shadowFrustumSize.md Edit}
    */
    shadowFrustumSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-shadowTextureSize.md Edit}
    
    * @private
    */
    shadowTextureSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-specularEnvTexture.md Edit}
    
    * @deprecated
    
    * @private
    */
    specularEnvTexture: Texture
    
    /**
    * A color image applied to an imaginary skybox the light source will use for specular and reflection information.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-specularEnvmapTexture.md Edit}
    */
    specularEnvmapTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-useDynamicEnvmap.md Edit}
    
    * @private
    */
    useDynamicEnvmap: boolean
    
    /**
    * Enable if you would like the LightSource to use information from the `diffuseEnvmapTexture` for light color information.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-useEnvmap.md Edit}
    */
    useEnvmap: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LightSource/properties/LightSource-useEstimation.md Edit}
    
    * @private
    */
    useEstimation: boolean
    
}

/**
* Applies a liquify effect to anything rendered behind it.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiquifyVisual/LiquifyVisual-description.md Edit}
*/
interface LiquifyVisual extends BaseMeshVisual {
    /**
    * How strong the liquify effect is.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiquifyVisual/properties/LiquifyVisual-intensity.md Edit}
    */
    intensity: number
    
    /**
    * The radius of the liquify effect circle.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiquifyVisual/properties/LiquifyVisual-radius.md Edit}
    */
    radius: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiveVideoStreamTextureProvider/LiveVideoStreamTextureProvider-description.md Edit}

* @private
*/
interface LiveVideoStreamTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiveVideoStreamTextureProvider/methods/LiveVideoStreamTextureProvider-pause.md Edit}
    
    * @private
    */
    pause(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiveVideoStreamTextureProvider/methods/LiveVideoStreamTextureProvider-play.md Edit}
    
    * @private
    */
    play(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiveVideoStreamTextureProvider/properties/LiveVideoStreamTextureProvider-liveStreamUrl.md Edit}
    
    * @private
    */
    liveStreamUrl: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiveVideoStreamTextureProvider/properties/LiveVideoStreamTextureProvider-onStreamResolutionChanged.md Edit}
    
    * @readonly
    
    * @private
    */
    onStreamResolutionChanged: event2<number, number, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LiveVideoStreamTextureProvider/properties/LiveVideoStreamTextureProvider-volume.md Edit}
    
    * @private
    */
    volume: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LoadStatus/LoadStatus-description.md Edit}
*/
declare enum LoadStatus {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LoadStatus/properties/LoadStatus-Idle.md Edit}
    */
    Idle,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LoadStatus/properties/LoadStatus-Loading.md Edit}
    */
    Loading,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LoadStatus/properties/LoadStatus-Loaded.md Edit}
    */
    Loaded
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationModel/LocalizationModel-description.md Edit}

* @private
*/
interface LocalizationModel extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationModel/properties/LocalizationModel-landmarkPositions.md Edit}
    
    * @readonly
    
    * @private
    */
    landmarkPositions: vec3[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationModel/properties/LocalizationModel-poses.md Edit}
    
    * @readonly
    
    * @private
    */
    poses: BasicTransform[]
    
}

/**
* Asset used with the Localizations system to support custom localization strings.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationsAsset/LocalizationsAsset-description.md Edit}
*/
interface LocalizationsAsset extends Asset {
}

/**
* Helps convert data types to localized string representations. Accessible through `global.localizationSystem`.

* Note that formatted or localized strings may appear differently to users depending on their region.
* The example results given here are representative of a user in the United States, but may appear differently for users in other regions.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/LocalizationSystem-description.md Edit}
*/
interface LocalizationSystem extends ScriptObject {
    /**
    * Returns a localized string for the date and time of the passed in `Date` object.
    
    * Example: "Jan 1, 2019 at 12:34 AM"
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getDateAndTimeFormatted.md Edit}
    */
    getDateAndTimeFormatted(date: Date): string
    
    /**
    * Returns a localized string for the date of the passed in `Date` object.
    
    * Example: "Jan 1, 2019"
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getDateFormatted.md Edit}
    */
    getDateFormatted(date: Date): string
    
    /**
    * Returns a short, localized string for the date of the passed in `Date` object.
    
    * Example: "1/1/19"
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getDateShortFormatted.md Edit}
    */
    getDateShortFormatted(date: Date): string
    
    /**
    * Returns a localized string for the day of the week of the passed in `Date` object.
    
    * Example: "Tuesday"
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getDayOfWeek.md Edit}
    */
    getDayOfWeek(date: Date): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedDate.md Edit}
    
    * @deprecated
    
    * @private
    */
    getFormattedDate(date: Date): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedDateAndTime.md Edit}
    
    * @deprecated
    
    * @private
    */
    getFormattedDateAndTime(date: Date): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedDateShort.md Edit}
    
    * @deprecated
    
    * @private
    */
    getFormattedDateShort(date: Date): string
    
    /**
    * Returns a localized, formatted string representation of the distance in meters passed in.
    
    * Example: "39.4 in" (from 1 passed in)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedDistanceFromMeters.md Edit}
    */
    getFormattedDistanceFromMeters(meters: number): string
    
    /**
    * Returns a localized, formatted string representation of the number passed in.
    
    * Example: "1,234" (from 1234 passed in)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedNumber.md Edit}
    */
    getFormattedNumber(number: number): string
    
    /**
    * Returns a localized, formatted string representing the number of seconds passed in.
    
    * Example: "2:06" (from 126 passed in)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedSeconds.md Edit}
    */
    getFormattedSeconds(seconds: number): string
    
    /**
    * Returns a localized, formatted string representation of the celsius temperature passed in.
    
    * Example: "32F" (from 0 passed in)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedTemperatureFromCelsius.md Edit}
    */
    getFormattedTemperatureFromCelsius(temperature: number): string
    
    /**
    * Returns a localized, formatted string representation of the fahrenheit temperature passed in.
    
    * Example: "32F" (from 32 passed in)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedTemperatureFromFahrenheit.md Edit}
    */
    getFormattedTemperatureFromFahrenheit(temperature: number): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getFormattedTime.md Edit}
    
    * @deprecated
    
    * @private
    */
    getFormattedTime(date: Date): string
    
    /**
    * Returns the language code of the language being used on the device.
    
    * Example: "en" (for English)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getLanguage.md Edit}
    
    * @exposesUserData
    */
    getLanguage(): string
    
    /**
    * Returns a localized string for the month of the passed in `Date` object.
    
    * Example: "January"
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getMonth.md Edit}
    */
    getMonth(date: Date): string
    
    /**
    * Returns a localized string for the time of the passed in `Date` object.
    
    * Example: "12:34 AM"
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-getTimeFormatted.md Edit}
    */
    getTimeFormatted(date: Date): string
    
    /**
    * The method takes a [localization key](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/text/localization) and returns the localized string according to device language. Useful for localizing strings before formatting them and assigning them to Text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/methods/LocalizationSystem-localize.md Edit}
    
    * @exposesUserData
    */
    localize(key: string): string
    
    /**
    * Use this property to set the language. Intended for debugging.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocalizationSystem/properties/LocalizationSystem-language.md Edit}
    
    * @exposesUserData
    */
    language: string
    
}

/**
* A component which modifies the [Transform](https://lensstudio.snapchat.com/api/classes/Transform) of the object it is on to a position in the real world, based on a `LocationAsset` and a `position`.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/LocatedAtComponent-description.md Edit}
*/
interface LocatedAtComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-alignment.md Edit}
    
    * @private
    */
    alignment: LocatedAtComponent.Alignment
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-distanceToLocation.md Edit}
    
    * @readonly
    */
    distanceToLocation: number
    
    /**
    * The LocationAsset which contains the position this object should be anchored to.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-location.md Edit}
    */
    location: LocationAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-onCanTrack.md Edit}
    
    * @readonly
    */
    onCanTrack: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-onCannotTrack.md Edit}
    
    * @readonly
    */
    onCannotTrack: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-onError.md Edit}
    
    * @readonly
    */
    onError: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-onFound.md Edit}
    
    * @readonly
    */
    onFound: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-onLost.md Edit}
    
    * @readonly
    */
    onLost: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-onReady.md Edit}
    
    * @readonly
    */
    onReady: event0<void>
    
    /**
    * The geo anchored position within a LocationAsset that this object should be anchored to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-position.md Edit}
    */
    position: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/properties/LocatedAtComponent-proximityStatus.md Edit}
    
    * @readonly
    */
    proximityStatus: LocationProximityStatus
    
}
declare namespace LocatedAtComponent {
    /**
    * Creates an option object for the `LocatedAtComponent`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/methods/LocatedAtComponent-createMappingOptions.md Edit}
    */
    export function createMappingOptions(): MappingOptions
    
    /**
    * Creates a mapping session.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent/methods/LocatedAtComponent-createMappingSession.md Edit}
    */
    export function createMappingSession(options: MappingOptions): MappingSession
    

}

declare namespace LocatedAtComponent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent.Alignment/LocatedAtComponent.Alignment-description.md Edit}
    
    * @private
    */
    enum Alignment {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent.Alignment/properties/LocatedAtComponent.Alignment-Auto.md Edit}
        
        * @private
        */
        Auto,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent.Alignment/properties/LocatedAtComponent.Alignment-EllipsoidSeaLevel.md Edit}
        
        * @private
        */
        EllipsoidSeaLevel,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent.Alignment/properties/LocatedAtComponent.Alignment-Terrain.md Edit}
        
        * @private
        */
        Terrain,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocatedAtComponent.Alignment/properties/LocatedAtComponent.Alignment-RoofTop.md Edit}
        
        * @private
        */
        RoofTop
    }

}

/**
* Allows you to access a user's location information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/Location-description.md Edit}

* @private
*/
interface Location extends AbstractData {
    /**
    * Returns the user's altitude in meters.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getAltitude.md Edit}
    
    * @private
    */
    getAltitude(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getCourse.md Edit}
    
    * @private
    */
    getCourse(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getDistanceFrom.md Edit}
    
    * @private
    */
    getDistanceFrom(latitude: number, longitude: number): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getHeading.md Edit}
    
    * @private
    */
    getHeading(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getHeadingAccuracy.md Edit}
    
    * @private
    */
    getHeadingAccuracy(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getHorizontalAccuracy.md Edit}
    
    * @private
    */
    getHorizontalAccuracy(): number
    
    /**
    * Returns the user's latitude.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getLatitude.md Edit}
    
    * @private
    */
    getLatitude(): number
    
    /**
    * Returns the local time in the user's location in ISO format.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getLocalTimeISOFormat.md Edit}
    
    * @private
    */
    getLocalTimeISOFormat(): string
    
    /**
    * Returns the user's longitude.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getLongitude.md Edit}
    
    * @private
    */
    getLongitude(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getProvider.md Edit}
    
    * @private
    */
    getProvider(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getRotationFrom.md Edit}
    
    * @private
    */
    getRotationFrom(latitude: number, longitude: number): number
    
    /**
    * Returns the speed at which the user is moving in meters per second.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getSpeed.md Edit}
    
    * @private
    */
    getSpeed(): number
    
    /**
    * Returns the temperature in the user's location in degrees Celsius.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getTemperatureCelsius.md Edit}
    
    * @deprecated
    
    * @private
    */
    getTemperatureCelsius(): number
    
    /**
    * Returns the temperature in the user's location in degrees Fahrenheit.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getTemperatureFahrenheit.md Edit}
    
    * @deprecated
    
    * @private
    */
    getTemperatureFahrenheit(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getTimestamp.md Edit}
    
    * @private
    */
    getTimestamp(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getVerticalAccuracy.md Edit}
    
    * @private
    */
    getVerticalAccuracy(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-getWeatherCondition.md Edit}
    
    * @deprecated
    
    * @private
    */
    getWeatherCondition(): string
    
    /**
    * Returns whether or not the user's compass is currently available.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-isCompassAvailable.md Edit}
    
    * @private
    */
    isCompassAvailable(): boolean
    
    /**
    * Returns whether or not the user's location is currently available.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-isLocationAvailable.md Edit}
    
    * @private
    */
    isLocationAvailable(): boolean
    
    /**
    * Returns whether or not the weather in the user's location is available.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-isWeatherAvailable.md Edit}
    
    * @deprecated
    
    * @private
    */
    isWeatherAvailable(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-setDesiredAccuracy.md Edit}
    
    * @private
    */
    setDesiredAccuracy(accuracy: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-setDistanceFilterMeters.md Edit}
    
    * @private
    */
    setDistanceFilterMeters(filter: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Location/methods/Location-setLocationUpdateIntervalMillis.md Edit}
    
    * @private
    */
    setLocationUpdateIntervalMillis(millis: number): void
    
}

/**
* Provides a frame of reference in which to localize objects to the real world. Use with [LocatedAtComponent](https://lensstudio.snapchat.com/api/classes/LocatedAtComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/LocationAsset-description.md Edit}
*/
interface LocationAsset extends Asset {
    /**
    * Returns the `LocationAsset` Tile that is  specified by the containing tile and the specified `xOffset`, `yOffset` and `zoomOffset`. When zooming in, index offset is relative to the center. When zooming out or not zooming, index offset is relative to the containing tile.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/methods/LocationAsset-adjacentTile.md Edit}
    */
    adjacentTile(xOffset: number, yOffset: number, zoomOffset: number): LocationAsset
    
    /**
    * Gets the Proxy LocationID if the LocationAsset is a proxyLocation; returns null otherwise. This is useful in instances where a callback may return a mix of different location assets, and the creator of the proxy asset has specific handling in mind for particular proxy locations.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/methods/LocationAsset-getProxyId.md Edit}
    */
    getProxyId(): string | undefined
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/properties/LocationAsset-locationId.md Edit}
    
    * @private
    */
    locationId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/properties/LocationAsset-locationType.md Edit}
    
    * @private
    */
    locationType: LocationType
    
}
declare namespace LocationAsset {
    /**
    * Gets the origin position of the `LocationAsset`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/methods/LocationAsset-getAROrigin.md Edit}
    */
    export function getAROrigin(): LocationAsset
    
    /**
    * Get an [Anchor](https://lensstudio.snapchat.com/api/classes/anchor) based on the given GPS coordinate.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/methods/LocationAsset-getGeoAnchoredPosition.md Edit}
    */
    export function getGeoAnchoredPosition(longitude: number, latitude: number): Anchor
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/methods/LocationAsset-getLensWorld.md Edit}
    
    * @private
    */
    export function getLensWorld(): LocationAsset
    
    /**
    * Gets nearby LocationAsset tiles, where each argument represents the x,y,z position relative to the current LocationAsset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/methods/LocationAsset-getNearby.md Edit}
    */
    export function getNearby(xOffset: number, yOffset: number, zoomOffset: number): LocationAsset
    
    /**
    * Get a Proxy LocationAsset with the proxyId embedded in the locationId. proxyId must not be null, must start with an alpha char, and consist only of alphanumerics or ".".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationAsset/methods/LocationAsset-getProxy.md Edit}
    */
    export function getProxy(proxyId: string): LocationAsset
    

}

/**
* Provides access to location cloud storage depending upon the LocationCloudStorageOptions.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageModule/LocationCloudStorageModule-description.md Edit}
*/
interface LocationCloudStorageModule extends Asset {
    /**
    * Request discovery of LocationCloudStores based on the user location.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageModule/methods/LocationCloudStorageModule-getNearbyLocationStores.md Edit}
    */
    getNearbyLocationStores(options: LocationCloudStorageOptions): void
    
    /**
    * Retrieves the specified `LocationAsset`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageModule/methods/LocationCloudStorageModule-retrieveLocation.md Edit}
    */
    retrieveLocation(persistedLocationId: string, onRetrievedLocation: (location: LocationAsset) => void, onError: (error: string) => void): void
    
    /**
    * Stores the specified `LocationAsset`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageModule/methods/LocationCloudStorageModule-storeLocation.md Edit}
    */
    storeLocation(location: LocationAsset, onStoredLocation: (persistedLocationId: string) => void, onError: (error: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageModule/properties/LocationCloudStorageModule-session.md Edit}
    
    * @private
    */
    session: MultiplayerSession
    
}

/**
* Used to configure LocationCloudStorage module with various options. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageOptions/LocationCloudStorageOptions-description.md Edit}
*/
interface LocationCloudStorageOptions extends ScriptObject {
    /**
    * Tag to represent a collection of objects/entities
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageOptions/properties/LocationCloudStorageOptions-collection.md Edit}
    */
    collection: string
    
    /**
    * Provides a frame of reference in which to localize objects to the real world. Could be any location type.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageOptions/properties/LocationCloudStorageOptions-location.md Edit}
    */
    location: LocationAsset
    
    /**
    * Event raised on discovery of nearby cloud stores.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageOptions/properties/LocationCloudStorageOptions-onDiscoveredNearby.md Edit}
    
    * @readonly
    */
    onDiscoveredNearby: event2<LocationAsset, LocationCloudStore, void>
    
    /**
    * Error event raised when failing to instantiate a location cloud store associated with that location asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageOptions/properties/LocationCloudStorageOptions-onError.md Edit}
    
    * @readonly
    */
    onError: event3<LocationAsset, string, string, void>
    
}
declare namespace LocationCloudStorageOptions {
    /**
    * Create options to provide to LocationCloudStorageModule  
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStorageOptions/methods/LocationCloudStorageOptions-create.md Edit}
    */
    export function create(): LocationCloudStorageOptions
    

}

/**
* Instance of location cloud store which has a similar interface as cloud store.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStore/LocationCloudStore-description.md Edit}
*/
interface LocationCloudStore extends ScriptObject {
    /**
    * Deletes a value on the location cloud store. Note: when updating a value, the scope and collection must match that of the original value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStore/methods/LocationCloudStore-deleteValue.md Edit}
    */
    deleteValue(key: string, readOptions: CloudStorageReadOptions, onDeleted: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * Gets a value on the location cloud store. Note: when updating a value, the scope and collection must match that of the original value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStore/methods/LocationCloudStore-getValue.md Edit}
    */
    getValue(key: string, readOptions: CloudStorageReadOptions, onRetrieved: (key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string), collection: string) => void, onError: (code: string, description: string) => void): void
    
    /**
    * List values on the location cloud store. Note: when updating a value, the scope and collection must match that of the original value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStore/methods/LocationCloudStore-listValues.md Edit}
    */
    listValues(listOptions: CloudStorageListOptions, onRetrieved: (values: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)[][], cursor: string, collection: string) => void, onError: (code: string, description: string) => void): void
    
    /**
    * Create/update a value on the location cloud store. Note: when updating a value, the scope and collection must match that of the original value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationCloudStore/methods/LocationCloudStore-setValue.md Edit}
    */
    setValue(key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string), writeOptions: CloudStorageWriteOptions, onSaved: () => void, onError: (code: string, description: string) => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationLandmarksRenderObjectProvider/LocationLandmarksRenderObjectProvider-description.md Edit}

* @private
*/
interface LocationLandmarksRenderObjectProvider extends RenderObjectProvider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationMarkerProvider/LocationMarkerProvider-description.md Edit}

* @unreleased
*/
interface LocationMarkerProvider extends NaturalFeatureMarkerProvider {
}

/**
* Used by [DeviceLocationTrackingComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceLocationTrackingComponent) to indicate the user's distance from the landmarker location.
* See the [Landmarker guide](https://lensstudio.snapchat.com/templates/landmarker) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationProximityStatus/LocationProximityStatus-description.md Edit}
*/
declare enum LocationProximityStatus {
    /**
    * User's distance cannot be determined or has not been determined yet.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationProximityStatus/properties/LocationProximityStatus-Unknown.md Edit}
    */
    Unknown,
    /**
    * User is close enough to the landmarker location to begin tracking.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationProximityStatus/properties/LocationProximityStatus-WithinRange.md Edit}
    */
    WithinRange,
    /**
    * User is too far away from the landmarker location to track it.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationProximityStatus/properties/LocationProximityStatus-OutOfRange.md Edit}
    */
    OutOfRange
}

/**
* Provides access to a location's Mesh--such as when working with City Scale AR. Usually used in conjunction with `LocationTextureProvider`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationRenderObjectProvider/LocationRenderObjectProvider-description.md Edit}
*/
interface LocationRenderObjectProvider extends RenderObjectProvider {
    /**
    * The Render Object's `LocationAsset` nearby tile.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationRenderObjectProvider/properties/LocationRenderObjectProvider-location.md Edit}
    */
    location: LocationAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationRenderObjectProvider/properties/LocationRenderObjectProvider-onLocationDataDownloadFailed.md Edit}
    
    * @readonly
    */
    onLocationDataDownloadFailed: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationRenderObjectProvider/properties/LocationRenderObjectProvider-onLocationDataDownloaded.md Edit}
    
    * @readonly
    */
    onLocationDataDownloaded: event0<void>
    
}
declare namespace LocationRenderObjectProvider {
    /**
    * Creates the location mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationRenderObjectProvider/methods/LocationRenderObjectProvider-create.md Edit}
    */
    export function create(): RenderMesh
    

}

/**
* The LocationService allows the user to provide their location to lens applications if they so desire. For privacy reasons, the user is asked for permission to report location information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationService/LocationService-description.md Edit}
*/
interface LocationService extends ScriptObject {
    /**
    * Retrieves the device's current location.
    * `onSuccess`: a callback function that takes a GeoPosition object as its sole input parameter.
    * `onError`: a callback function that takes a string error message as its sole input parameter.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationService/methods/LocationService-getCurrentPosition.md Edit}
    
    * @exposesUserData
    */
    getCurrentPosition(onSucess: (geoPosition: GeoPosition) => void, onError: (error: string) => void): void
    
    /**
    * The accuracy of the provided position.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationService/properties/LocationService-accuracy.md Edit}
    */
    accuracy: GeoLocationAccuracy
    
    /**
    * Event to notify when north aligned orientation data is available to use.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationService/properties/LocationService-onNorthAlignedOrientationUpdate.md Edit}
    
    * @readonly
    */
    onNorthAlignedOrientationUpdate: event1<quat, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationService/properties/LocationService-timestampSeconds.md Edit}
    
    * @readonly
    
    * @private
    */
    timestampSeconds: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationService/properties/LocationService-updateIntervalMillis.md Edit}
    
    * @private
    */
    updateIntervalMillis: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationSystem/LocationSystem-description.md Edit}

* @private
*/
interface LocationSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationSystem/methods/LocationSystem-requestLocationOfUser.md Edit}
    
    * @private
    */
    requestLocationOfUser(user: SnapchatUser, successCallback: (location: UserLocationInfo) => void, failureCallback: (error: string) => void): void
    
}

/**
* Provides access to a location's texture--such as when working with City Scale AR.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationTextureProvider/LocationTextureProvider-description.md Edit}
*/
interface LocationTextureProvider extends TextureProvider {
    /**
    * The location texture's `LocationAsset` nearby tile.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationTextureProvider/properties/LocationTextureProvider-location.md Edit}
    */
    location: LocationAsset
    
}
declare namespace LocationTextureProvider {
    /**
    * Create location texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationTextureProvider/methods/LocationTextureProvider-create.md Edit}
    */
    export function create(): Texture
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/LocationType-description.md Edit}

* @private
*/
declare enum LocationType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/properties/LocationType-Snap.md Edit}
    
    * @private
    */
    Snap,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/properties/LocationType-Custom.md Edit}
    
    * @private
    */
    Custom,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/properties/LocationType-World.md Edit}
    
    * @private
    */
    World,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/properties/LocationType-Tile.md Edit}
    
    * @private
    */
    Tile,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/properties/LocationType-RelativeTile.md Edit}
    
    * @private
    */
    RelativeTile,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/properties/LocationType-Proxy.md Edit}
    
    * @private
    */
    Proxy,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/properties/LocationType-NativeAR.md Edit}
    
    * @private
    */
    NativeAR,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LocationType/properties/LocationType-LensWorld.md Edit}
    
    * @private
    */
    LensWorld
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LongPressEndEvent/LongPressEndEvent-description.md Edit}

* @private
*/
interface LongPressEndEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LongPressEndEvent/methods/LongPressEndEvent-getLongPressPosition.md Edit}
    
    * @private
    */
    getLongPressPosition(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LongPressEndEventArgs/LongPressEndEventArgs-description.md Edit}

* @private
*/
interface LongPressEndEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LongPressEndEventArgs/properties/LongPressEndEventArgs-position.md Edit}
    
    * @readonly
    
    * @private
    */
    position: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LongPressStartEvent/LongPressStartEvent-description.md Edit}

* @private
*/
interface LongPressStartEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LongPressStartEvent/methods/LongPressStartEvent-getLongPressPosition.md Edit}
    
    * @private
    */
    getLongPressPosition(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LongPressStartEventArgs/LongPressStartEventArgs-description.md Edit}

* @private
*/
interface LongPressStartEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LongPressStartEventArgs/properties/LongPressStartEventArgs-position.md Edit}
    
    * @readonly
    
    * @private
    */
    position: vec2
    
}

/**
* Every frame, LookAtComponent rotates its SceneObject to face towards a target SceneObject.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent/LookAtComponent-description.md Edit}
*/
interface LookAtComponent extends Component {
    /**
    * The "aim" and "up" vectors used when determining rotation.
    * LookAtComponent will try to point the `Aim` axis of the SceneObject towards the target,
    * while keeping the `Up` axis of the SceneObject pointing towards `worldUpVector`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent/properties/LookAtComponent-aimVectors.md Edit}
    */
    aimVectors: LookAtComponent.AimVectors
    
    /**
    * Controls the method of rotation being used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent/properties/LookAtComponent-lookAtMode.md Edit}
    */
    lookAtMode: LookAtComponent.LookAtMode
    
    /**
    * Adds an additional rotation offset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent/properties/LookAtComponent-offsetRotation.md Edit}
    */
    offsetRotation: quat
    
    /**
    * The SceneObject this LookAtComponent targets.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent/properties/LookAtComponent-target.md Edit}
    */
    target: SceneObject
    
    /**
    * The vector to be considered the "up" vector when determining rotation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent/properties/LookAtComponent-worldUpVector.md Edit}
    */
    worldUpVector: LookAtComponent.WorldUpVector
    
}

declare namespace LookAtComponent {
    /**
    * The "aim" and "up" vectors used with [LookAtComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#LookAtComponent) when determining rotation.
    * LookAtComponent will try to point the `Aim` axis of the SceneObject towards the target,
    * while keeping the `Up` axis of the SceneObject pointing towards `worldUpVector`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/LookAtComponent.AimVectors-description.md Edit}
    */
    enum AimVectors {
        /**
        * X Aim, Y Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-XAimYUp.md Edit}
        */
        XAimYUp,
        /**
        * X Aim, Z Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-XAimZUp.md Edit}
        */
        XAimZUp,
        /**
        * Y Aim, X Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-YAimXUp.md Edit}
        */
        YAimXUp,
        /**
        * Y Aim, Z Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-YAimZUp.md Edit}
        */
        YAimZUp,
        /**
        * Z Aim, X Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-ZAimXUp.md Edit}
        */
        ZAimXUp,
        /**
        * Z Aim, Y Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-ZAimYUp.md Edit}
        */
        ZAimYUp,
        /**
        * X Aim, -Y Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-XAimNegativeYUp.md Edit}
        */
        XAimNegativeYUp,
        /**
        * X Aim, -Z Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-XAimNegativeZUp.md Edit}
        */
        XAimNegativeZUp,
        /**
        * Y Aim, -X Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-YAimNegativeXUp.md Edit}
        */
        YAimNegativeXUp,
        /**
        * Y Aim, -Z Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-YAimNegativeZUp.md Edit}
        */
        YAimNegativeZUp,
        /**
        * Z Aim, -X Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-ZAimNegativeXUp.md Edit}
        */
        ZAimNegativeXUp,
        /**
        * Z Aim, -Y Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-ZAimNegativeYUp.md Edit}
        */
        ZAimNegativeYUp,
        /**
        * -X Aim, Y Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeXAimYUp.md Edit}
        */
        NegativeXAimYUp,
        /**
        * -X Aim, Z Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeXAimZUp.md Edit}
        */
        NegativeXAimZUp,
        /**
        * -Y Aim, X Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeYAimXUp.md Edit}
        */
        NegativeYAimXUp,
        /**
        * -Y Aim, Z Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeYAimZUp.md Edit}
        */
        NegativeYAimZUp,
        /**
        * -Z Aim, X Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeZAimXUp.md Edit}
        */
        NegativeZAimXUp,
        /**
        * -Z Aim, Y Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeZAimYUp.md Edit}
        */
        NegativeZAimYUp,
        /**
        * -X Aim, -Y Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeXAimNegativeYUp.md Edit}
        */
        NegativeXAimNegativeYUp,
        /**
        * -X Aim, -Z Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeXAimNegativeZUp.md Edit}
        */
        NegativeXAimNegativeZUp,
        /**
        * -Y Aim, -X Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeYAimNegativeXUp.md Edit}
        */
        NegativeYAimNegativeXUp,
        /**
        * -Y Aim, -Z Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeYAimNegativeZUp.md Edit}
        */
        NegativeYAimNegativeZUp,
        /**
        * -Z Aim, -X Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeZAimNegativeXUp.md Edit}
        */
        NegativeZAimNegativeXUp,
        /**
        * -Z Aim, -Y Up
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.AimVectors/properties/LookAtComponent.AimVectors-NegativeZAimNegativeYUp.md Edit}
        */
        NegativeZAimNegativeYUp
    }

}

declare namespace LookAtComponent {
    /**
    * Modes used in `LookAtComponent.lookAtMode` to determine the rotation method being used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.LookAtMode/LookAtComponent.LookAtMode-description.md Edit}
    */
    enum LookAtMode {
        /**
        * Rotation is based on the target object's position
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.LookAtMode/properties/LookAtComponent.LookAtMode-LookAtPoint.md Edit}
        */
        LookAtPoint,
        /**
        * Rotation is based on the target object's rotation
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.LookAtMode/properties/LookAtComponent.LookAtMode-LookAtDirection.md Edit}
        */
        LookAtDirection
    }

}

declare namespace LookAtComponent {
    /**
    * Used with [LookAtComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#LookAtComponent) to set the "up" vector when determining rotation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/LookAtComponent.WorldUpVector-description.md Edit}
    */
    enum WorldUpVector {
        /**
        * Scene's X vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-SceneX.md Edit}
        */
        SceneX,
        /**
        * Scene's Y vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-SceneY.md Edit}
        */
        SceneY,
        /**
        * Scene's Y vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-SceneUp.md Edit}
        */
        SceneUp,
        /**
        * Scene's Z vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-SceneZ.md Edit}
        */
        SceneZ,
        /**
        * Target object's X vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-TargetX.md Edit}
        */
        TargetX,
        /**
        * Target object's Y vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-TargetY.md Edit}
        */
        TargetY,
        /**
        * Target object's Z vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-TargetZ.md Edit}
        */
        TargetZ,
        /**
        * Current object's X vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-ObjectX.md Edit}
        */
        ObjectX,
        /**
        * Current object's Y vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-ObjectY.md Edit}
        */
        ObjectY,
        /**
        * Current object's Z vector
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/LookAtComponent.WorldUpVector/properties/LookAtComponent.WorldUpVector-ObjectZ.md Edit}
        */
        ObjectZ
    }

}

/**
* Namespace for Machine Learning related classes and methods.
* For more information, see the [Machine Learning Overview](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-overview).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/MachineLearning-description.md Edit}
*/
interface MachineLearning {
}
declare namespace MachineLearning {
    /**
    * Creates a new DelayBuilder object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createDelayBuilder.md Edit}
    */
    export function createDelayBuilder(): DelayBuilder
    
    /**
    * Creates a new DeltaBuilder object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createDeltaBuilder.md Edit}
    */
    export function createDeltaBuilder(): DeltaBuilder
    
    /**
    * Creates a new InputBuilder object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createInputBuilder.md Edit}
    */
    export function createInputBuilder(): InputBuilder
    
    /**
    * Creates a new MFCCBuilder object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createMFCCBuilder.md Edit}
    */
    export function createMFCCBuilder(): MFCCBuilder
    
    /**
    * Creates a new MelSpectrogramBuilder object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createMelSpectrogramBuilder.md Edit}
    */
    export function createMelSpectrogramBuilder(): MelSpectrogramBuilder
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createNoiseReductionBuilder.md Edit}
    */
    export function createNoiseReductionBuilder(): NoiseReductionBuilder
    
    /**
    * Creates a new OutputBuilder object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createOutputBuilder.md Edit}
    */
    export function createOutputBuilder(): OutputBuilder
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createPitchShifterBuilder.md Edit}
    */
    export function createPitchShifterBuilder(): PitchShifterBuilder
    
    /**
    * Creates SamplerBuilder.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createSamplerBuilder.md Edit}
    */
    export function createSamplerBuilder(): SamplerBuilder
    
    /**
    * Creates a new SpectrogramBuilder object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createSpectrogramBuilder.md Edit}
    */
    export function createSpectrogramBuilder(): SpectrogramBuilder
    
    /**
    * Creates a new TransformerBuilder object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning/methods/MachineLearning-createTransformerBuilder.md Edit}
    */
    export function createTransformerBuilder(): TransformerBuilder
    

}

declare namespace MachineLearning {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/MachineLearning.AlignmentType-description.md Edit}
    
    * @private
    */
    enum AlignmentType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-CelebAHQ.md Edit}
        
        * @private
        */
        CelebAHQ,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-RotationSquare.md Edit}
        
        * @private
        */
        RotationSquare,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-RotationRect.md Edit}
        
        * @private
        */
        RotationRect,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-FaceSegmentation.md Edit}
        
        * @private
        */
        FaceSegmentation,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-EyeSegmentation.md Edit}
        
        * @private
        */
        EyeSegmentation,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-NeutralityClassifier.md Edit}
        
        * @private
        */
        NeutralityClassifier,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-NeutralityGenerator.md Edit}
        
        * @private
        */
        NeutralityGenerator,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-FaceMeshBased.md Edit}
        
        * @private
        */
        FaceMeshBased,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.AlignmentType/properties/MachineLearning.AlignmentType-FaceSwap.md Edit}
        
        * @private
        */
        FaceSwap
    }

}

declare namespace MachineLearning {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.DataLayout/MachineLearning.DataLayout-description.md Edit}
    
    * @private
    */
    enum DataLayout {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.DataLayout/properties/MachineLearning.DataLayout-NCHW.md Edit}
        
        * @private
        */
        NCHW,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.DataLayout/properties/MachineLearning.DataLayout-NHWC.md Edit}
        
        * @private
        */
        NHWC
    }

}

declare namespace MachineLearning {
    /**
    * Timing options for when MLComponent should start or stop running. Used with `MLComponent.runScheduled()`.
    * For more information, see the [MLComponent Scripting](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/scripting-ml-component) guide.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.FrameTiming/MachineLearning.FrameTiming-description.md Edit}
    */
    enum FrameTiming {
        /**
        * Only valid as an end timing. There is no exact time specified when MLComponent should finish its run.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.FrameTiming/properties/MachineLearning.FrameTiming-None.md Edit}
        */
        None,
        /**
        * Run during MLComponent update, before script update.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.FrameTiming/properties/MachineLearning.FrameTiming-Update.md Edit}
        */
        Update,
        /**
        * Run in MLComponent LateUpdate, after all scripts update, but before they get LateUpdate.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.FrameTiming/properties/MachineLearning.FrameTiming-LateUpdate.md Edit}
        */
        LateUpdate,
        /**
        * Run at a specific point during frame rendering.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.FrameTiming/properties/MachineLearning.FrameTiming-OnRender.md Edit}
        */
        OnRender
    }

}

declare namespace MachineLearning {
    /**
    * Inference modes used by `MLComponent.inferenceMode`. Each mode describes how the neural network will be run.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.InferenceMode/MachineLearning.InferenceMode-description.md Edit}
    */
    enum InferenceMode {
        /**
        * MLComponent will run the neural network on CPU. Available on all devices.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.InferenceMode/properties/MachineLearning.InferenceMode-CPU.md Edit}
        */
        CPU,
        /**
        * MLComponent will attempt to run the neural network on GPU. If the device doesn't support it, CPU mode will be used instead.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.InferenceMode/properties/MachineLearning.InferenceMode-GPU.md Edit}
        */
        GPU,
        /**
        * MLComponent will attempt to use a dedicated hardware accelerator to run the neural network. If the device doesn't support it, GPU mode will be used instead.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.InferenceMode/properties/MachineLearning.InferenceMode-Accelerator.md Edit}
        */
        Accelerator,
        /**
        * MLComponent will automatically decide how to run the neural network based on what is supported. It will start with Accelerator, then fall back to GPU, then CPU.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.InferenceMode/properties/MachineLearning.InferenceMode-Auto.md Edit}
        */
        Auto,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.InferenceMode/properties/MachineLearning.InferenceMode-NativeCPU.md Edit}
        */
        NativeCPU,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.InferenceMode/properties/MachineLearning.InferenceMode-Libdnn.md Edit}
        */
        Libdnn,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.InferenceMode/properties/MachineLearning.InferenceMode-DSP.md Edit}
        */
        DSP
    }

}

declare namespace MachineLearning {
    /**
    * Describes the current state of the MLComponent model.
    * For more information, see the [MLComponent Scripting](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/scripting-ml-component) guide.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.ModelState/MachineLearning.ModelState-description.md Edit}
    */
    enum ModelState {
        /**
        * Model is running
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.ModelState/properties/MachineLearning.ModelState-Running.md Edit}
        */
        Running,
        /**
        * Model is loading
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.ModelState/properties/MachineLearning.ModelState-Loading.md Edit}
        */
        Loading,
        /**
        * Model is built and ready to run
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.ModelState/properties/MachineLearning.ModelState-Idle.md Edit}
        */
        Idle,
        /**
        * Model is not ready to run
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.ModelState/properties/MachineLearning.ModelState-NotReady.md Edit}
        */
        NotReady
    }

}

declare namespace MachineLearning {
    /**
    * Types of output used by OutputPlaceholder.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.OutputMode/MachineLearning.OutputMode-description.md Edit}
    */
    enum OutputMode {
        /**
        * The output will be in the form of a Texture.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.OutputMode/properties/MachineLearning.OutputMode-Texture.md Edit}
        */
        Texture,
        /**
        * The output will be in the form of a Float32Array.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MachineLearning.OutputMode/properties/MachineLearning.OutputMode-Data.md Edit}
        */
        Data
    }

}

/**
* Handles input information from user touch input via the [TouchComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TouchComponent) to control Scale, Rotation, and Translation of objects.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/ManipulateComponent-description.md Edit}
*/
interface ManipulateComponent extends Component {
    /**
    * Repositions the object to be within the bounds of `minDistance`, `maxDistance`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/methods/ManipulateComponent-clampWorldPosition.md Edit}
    */
    clampWorldPosition(): void
    
    /**
    * Enables or disables the specified ManipulateType for this ManipulateComponent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/methods/ManipulateComponent-enableManipulateType.md Edit}
    */
    enableManipulateType(type: ManipulateType, enable: boolean): void
    
    /**
    * Checks for an intersection point between the manipulation plane and a line extending
    * from the camera through the specified screen space point. The screen point is passed in as (x, y) with both values
    * ranging from ([0-1], [0-1]), (0,0) being left-top and (1,1) being right-bottom. The result is returned as a
    * [ManipulateFrameIntersectResult](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#ManipulateFrameIntersectResult) object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/methods/ManipulateComponent-intersectManipulateFrame.md Edit}
    */
    intersectManipulateFrame(screenSpacePoint: vec2): ManipulateFrameIntersectResult
    
    /**
    * Returns whether the specified ManipulateType is enabled for this ManipulateComponent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/methods/ManipulateComponent-isManipulateTypeEnabled.md Edit}
    */
    isManipulateTypeEnabled(type: ManipulateType): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/methods/ManipulateComponent-setCamera.md Edit}
    
    * @deprecated
    
    * @private
    */
    setCamera(camera: Camera): void
    
    /**
    * Changes swivel behavior based on the object's height relative to the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-isContextualSwivel.md Edit}
    */
    isContextualSwivel: boolean
    
    /**
    * Returns whether the object that the Manipulate Component is on is currently being manipulated
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-isManipulating.md Edit}
    
    * @readonly
    */
    isManipulating: boolean
    
    /**
    * The maximum distance the object can travel from the user.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-maxDistance.md Edit}
    */
    maxDistance: number
    
    /**
    * The maximum height of the object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-maxHeight.md Edit}
    */
    maxHeight: number
    
    /**
    * The maximum size the object can scale to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-maxScale.md Edit}
    */
    maxScale: number
    
    /**
    * The minimum distance the object can be from the user.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-minDistance.md Edit}
    */
    minDistance: number
    
    /**
    * The minimum height of the object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-minHeight.md Edit}
    */
    minHeight: number
    
    /**
    * The minimum size the object can shrink to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-minScale.md Edit}
    */
    minScale: number
    
    /**
    * Event fired when manipulation ends.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-onManipulateEnd.md Edit}
    
    * @readonly
    */
    onManipulateEnd: event1<ManipulateEndEventArgs, void>
    
    /**
    * Event fired when manipulation starts.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-onManipulateStart.md Edit}
    
    * @readonly
    */
    onManipulateStart: event1<ManipulateStartEventArgs, void>
    
    /**
    * Multiplier for swivel rotation speed.
    * For example, a value of 0.5 will cut rotation speed in half,
    * and a value of 2.0 will double rotation speed.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateComponent/properties/ManipulateComponent-rotationScale.md Edit}
    */
    rotationScale: number
    
}

/**
* This event is triggered when manipulation on the object ends.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateEndEvent/ManipulateEndEvent-description.md Edit}
*/
interface ManipulateEndEvent extends SceneObjectEvent {
    /**
    * Sets the type of manipulation this event reacts to. Possible values are: "scale", "swivel", "translatesurface", "translatesphericalwithdepthadjust".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateEndEvent/methods/ManipulateEndEvent-setManipulateType.md Edit}
    
    * @private
    */
    setManipulateType(manipulateType: string): void
    
}

/**
* Arguments used with the `ManipulateComponent.onManipulateEnd` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateEndEventArgs/ManipulateEndEventArgs-description.md Edit}
*/
interface ManipulateEndEventArgs extends ScriptObject {
}

/**
* Result object returned from [ManipulateComponent.intersectManipulateFrame()](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ManipulateComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateFrameIntersectResult/ManipulateFrameIntersectResult-description.md Edit}
*/
interface ManipulateFrameIntersectResult {
    /**
    * If there was a valid intersection, returns the intersection point in world space.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateFrameIntersectResult/methods/ManipulateFrameIntersectResult-getIntersectionPoint.md Edit}
    */
    getIntersectionPoint(): vec3
    
    /**
    * Returns whether there was a valid intersection.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateFrameIntersectResult/methods/ManipulateFrameIntersectResult-isValid.md Edit}
    */
    isValid(): boolean
    
}

/**
* This event is triggered when manipulation on the object begins.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateStartEvent/ManipulateStartEvent-description.md Edit}
*/
interface ManipulateStartEvent extends SceneObjectEvent {
    /**
    * Sets the type of manipulation this event reacts to. Possible values are: "scale", "swivel", "translatesurface", "translatesphericalwithdepthadjust".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateStartEvent/methods/ManipulateStartEvent-setManipulateType.md Edit}
    
    * @private
    */
    setManipulateType(value: string): void
    
}

/**
* Arguments used with the `ManipulateComponent.onManipulateStart` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateStartEventArgs/ManipulateStartEventArgs-description.md Edit}
*/
interface ManipulateStartEventArgs extends ScriptObject {
}

/**
* Enum values specifying each type of manipulation. See [ManipulateComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ManipulateComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateType/ManipulateType-description.md Edit}
*/
declare enum ManipulateType {
    /**
    * The object can be scaled by pinching with two fingers.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateType/properties/ManipulateType-Scale.md Edit}
    */
    Scale,
    /**
    * The object can be rotated by swiveling with two fingers.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateType/properties/ManipulateType-Swivel.md Edit}
    */
    Swivel,
    /**
    * The object can be moved by touching and dragging.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateType/properties/ManipulateType-Drag.md Edit}
    */
    Drag,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateType/properties/ManipulateType-DragVertical.md Edit}
    */
    DragVertical,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ManipulateType/properties/ManipulateType-Pan.md Edit}
    */
    Pan
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandler/MapHandler-description.md Edit}

* @private
*/
interface MapHandler extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandler/methods/MapHandler-getGeoObjectCount.md Edit}
    
    * @private
    */
    getGeoObjectCount(request: MapHandlerRequest, onSuccess: (geoObjectCount: number) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandler/methods/MapHandler-getLayer.md Edit}
    
    * @private
    */
    getLayer(request: MapHandlerRequest, onSuccess: (layerData: GeoObject[]) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandler/properties/MapHandler-onError.md Edit}
    
    * @readonly
    
    * @private
    */
    onError: event0<void>
    
}
declare namespace MapHandler {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandler/methods/MapHandler-create.md Edit}
    
    * @private
    */
    export function create(): MapHandler
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandler/methods/MapHandler-createRequest.md Edit}
    
    * @private
    */
    export function createRequest(): MapHandlerRequest
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandlerRequest/MapHandlerRequest-description.md Edit}

* @private
*/
interface MapHandlerRequest extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandlerRequest/properties/MapHandlerRequest-latitude.md Edit}
    
    * @private
    */
    latitude: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandlerRequest/properties/MapHandlerRequest-layerType.md Edit}
    
    * @private
    */
    layerType: MapLayerType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandlerRequest/properties/MapHandlerRequest-limit.md Edit}
    
    * @private
    */
    limit: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandlerRequest/properties/MapHandlerRequest-longitude.md Edit}
    
    * @private
    */
    longitude: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandlerRequest/properties/MapHandlerRequest-radius.md Edit}
    
    * @private
    */
    radius: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapHandlerRequest/properties/MapHandlerRequest-start.md Edit}
    
    * @private
    */
    start: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/MapLayerType-description.md Edit}

* @private
*/
declare enum MapLayerType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Unsupported.md Edit}
    
    * @private
    */
    Unsupported,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Boundaries.md Edit}
    
    * @private
    */
    Boundaries,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Buildings.md Edit}
    
    * @private
    */
    Buildings,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Earth.md Edit}
    
    * @private
    */
    Earth,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Landuse.md Edit}
    
    * @private
    */
    Landuse,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Places.md Edit}
    
    * @private
    */
    Places,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-PointsOfInterest.md Edit}
    
    * @private
    */
    PointsOfInterest,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Roads.md Edit}
    
    * @private
    */
    Roads,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Transit.md Edit}
    
    * @private
    */
    Transit,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapLayerType/properties/MapLayerType-Water.md Edit}
    
    * @private
    */
    Water
}

/**
* Module for providing Map utils. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapModule/MapModule-description.md Edit}
*/
interface MapModule extends Asset {
    /**
    * Creates a new texture which holds a `MapTextureProvider`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapModule/methods/MapModule-createMapTextureProvider.md Edit}
    */
    createMapTextureProvider(): Texture
    
    /**
    * Returns the position of the marker (relative to the associated map tile) based on the specified `longitude`, `latitude` and `location`. The top left corner of the provided `location` has a value of `[0,0]` and the right down corner has a value of `[1.1]`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapModule/methods/MapModule-longLatToImageRatio.md Edit}
    */
    longLatToImageRatio(longitude: number, latitude: number, location: LocationAsset): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingOptions/MappingOptions-description.md Edit}
*/
interface MappingOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingOptions/properties/MappingOptions-location.md Edit}
    */
    location: LocationAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingOptions/properties/MappingOptions-locationCloudStorageModule.md Edit}
    */
    locationCloudStorageModule: LocationCloudStorageModule
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingOptions/properties/MappingOptions-policy.md Edit}
    */
    policy: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/MappingSession-description.md Edit}
*/
interface MappingSession extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/methods/MappingSession-cancel.md Edit}
    */
    cancel(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/methods/MappingSession-checkpoint.md Edit}
    */
    checkpoint(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-canCheckpoint.md Edit}
    
    * @readonly
    */
    canCheckpoint: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-capacityUsed.md Edit}
    
    * @readonly
    */
    capacityUsed: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-handheldMaximumSize.md Edit}
    */
    handheldMaximumSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-handheldMinimumSize.md Edit}
    */
    handheldMinimumSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-onCapacityUsedAtLimit.md Edit}
    
    * @readonly
    
    * @private
    */
    onCapacityUsedAtLimit: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-onMapped.md Edit}
    
    * @readonly
    */
    onMapped: event1<LocationAsset, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-onQualityAcceptable.md Edit}
    
    * @readonly
    
    * @private
    */
    onQualityAcceptable: event0<void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-quality.md Edit}
    
    * @readonly
    */
    quality: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-throttling.md Edit}
    */
    throttling: MappingSession.MappingThrottling
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-wearableAcceptableRawCapacity.md Edit}
    
    * @private
    */
    wearableAcceptableRawCapacity: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-wearableAllowEarlyCheckpoint.md Edit}
    
    * @private
    */
    wearableAllowEarlyCheckpoint: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-wearableMaximumSize.md Edit}
    */
    wearableMaximumSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession/properties/MappingSession-wearableMinimumSize.md Edit}
    */
    wearableMinimumSize: number
    
}

declare namespace MappingSession {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession.MappingThrottling/MappingSession.MappingThrottling-description.md Edit}
    */
    enum MappingThrottling {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession.MappingThrottling/properties/MappingSession.MappingThrottling-Auto.md Edit}
        */
        Auto,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession.MappingThrottling/properties/MappingSession.MappingThrottling-Foreground.md Edit}
        */
        Foreground,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession.MappingThrottling/properties/MappingSession.MappingThrottling-Background.md Edit}
        */
        Background,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MappingSession.MappingThrottling/properties/MappingSession.MappingThrottling-Off.md Edit}
        */
        Off
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapTextureProvider/MapTextureProvider-description.md Edit}
*/
interface MapTextureProvider extends TextureProvider {
    /**
    * The location asset associated with the `MapTextureProvider`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapTextureProvider/properties/MapTextureProvider-location.md Edit}
    */
    location: LocationAsset
    
    /**
    * A function that gets called when location data fails to download.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapTextureProvider/properties/MapTextureProvider-onFailed.md Edit}
    
    * @readonly
    */
    onFailed: event0<void>
    
    /**
    * A function that gets called when location data is downloaded.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MapTextureProvider/properties/MapTextureProvider-onReady.md Edit}
    
    * @readonly
    */
    onReady: event0<void>
    
}

/**
* Defines a marker to use for Marker Tracking with [MarkerTrackingComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MarkerTrackingComponent).
* For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerAsset/MarkerAsset-description.md Edit}
*/
interface MarkerAsset extends Asset {
    /**
    * Returns the aspect ratio (width / height) of the texture used by the marker asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerAsset/methods/MarkerAsset-getAspectRatio.md Edit}
    */
    getAspectRatio(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerAsset/methods/MarkerAsset-setExtendedTrackingFilterWeights.md Edit}
    
    * @private
    */
    setExtendedTrackingFilterWeights(measurementWeights: number[], recursiveWeights: number[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerAsset/methods/MarkerAsset-setTrackingDebugConfig.md Edit}
    
    * @private
    */
    setTrackingDebugConfig(json: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerAsset/properties/MarkerAsset-allowExtendedTracking.md Edit}
    
    * @deprecated
    
    * @private
    */
    allowExtendedTracking: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerAsset/properties/MarkerAsset-extendedTrackingMode.md Edit}
    
    * @private
    */
    extendedTrackingMode: ExtendedTrackingMode
    
    /**
    * The height of the marker asset in real-life centimeters. Used to provide accurate transformation.
    * A [MarkerTrackingComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MarkerTrackingComponent) using this MarkerAsset will be scaled so that
    * one unit in the SceneObject's local space is equal to one centimeter in real life.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerAsset/properties/MarkerAsset-height.md Edit}
    */
    height: number
    
}

/**
* Base class for marker providers.
* For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerProvider/MarkerProvider-description.md Edit}
*/
interface MarkerProvider extends Provider {
}

/**
* Used to track images in the camera. Moves the containing object's transform to match the detected image.
* For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerTrackingComponent/MarkerTrackingComponent-description.md Edit}
*/
interface MarkerTrackingComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerTrackingComponent/methods/MarkerTrackingComponent-isMarkerTracking.md Edit}
    
    * @private
    */
    isMarkerTracking(): boolean
    
    /**
    * Returns whether the marker image is currently being tracked in camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerTrackingComponent/methods/MarkerTrackingComponent-isTracking.md Edit}
    */
    isTracking(): boolean
    
    /**
    * If true, child objects of this Component's [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) will be disabled when the marker image is not being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerTrackingComponent/properties/MarkerTrackingComponent-autoEnableWhenTracking.md Edit}
    */
    autoEnableWhenTracking: boolean
    
    /**
    * The marker asset describing the tracking target.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerTrackingComponent/properties/MarkerTrackingComponent-marker.md Edit}
    */
    marker: MarkerAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerTrackingComponent/properties/MarkerTrackingComponent-markerIndex.md Edit}
    
    * @private
    */
    markerIndex: number
    
    /**
    * A function that gets called when marker tracking begins.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerTrackingComponent/properties/MarkerTrackingComponent-onMarkerFound.md Edit}
    */
    onMarkerFound: () => void
    
    /**
    * A function that gets called when marker tracking is lost.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MarkerTrackingComponent/properties/MarkerTrackingComponent-onMarkerLost.md Edit}
    */
    onMarkerLost: () => void
    
}

/**
* Clips visuals and Interaction Component events within a tree hierarchy. Any Visual or Interaction Components will be clipped user defined 2D bounds. These 2D bounds are defined by a Screen Transform. Useful for clipping some screen transforms--for example a scroll view. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaskingComponent/MaskingComponent-description.md Edit}
*/
interface MaskingComponent extends BaseMeshVisual {
    /**
    * The radius of the mask's corner.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaskingComponent/properties/MaskingComponent-cornerRadius.md Edit}
    */
    cornerRadius: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaskTextureProvider/MaskTextureProvider-description.md Edit}

* @private
*/
interface MaskTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaskTextureProvider/methods/MaskTextureProvider-setKey.md Edit}
    
    * @private
    */
    setKey(name: string): void
    
}

/**
* A 2x2 matrix.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/mat2-description.md Edit}
*/
declare class mat2 {
    /**
    * Creates a new mat2, defaulting to identity values.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-mat2.md Edit}
    */
    constructor()
    
    /**
    * Returns the result of adding the two matrices together.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-add.md Edit}
    */
    add(mat: mat2): mat2
    
    /**
    * Returns the determinant of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-determinant.md Edit}
    */
    determinant(): number
    
    /**
    * Returns the result of dividing the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-div.md Edit}
    */
    div(mat: mat2): mat2
    
    /**
    * Returns whether the two matrices are equal.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-equal.md Edit}
    */
    equal(mat: mat2): boolean
    
    /**
    * Returns the inverse of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-inverse.md Edit}
    */
    inverse(): mat2
    
    /**
    * Returns the result of multiplying the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-mult.md Edit}
    */
    mult(mat: mat2): mat2
    
    /**
    * Returns the result of scalar multiplying the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-multiplyScalar.md Edit}
    */
    multiplyScalar(scalar: number): mat2
    
    /**
    * Returns the result of subtracting the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-sub.md Edit}
    */
    sub(mat: mat2): mat2
    
    /**
    * Returns a string representation of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-toString.md Edit}
    */
    toString(): string
    
    /**
    * Returns the transpose of this matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-transpose.md Edit}
    */
    transpose(): mat2
    
    /**
    * The first column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/properties/mat2-column0.md Edit}
    */
    column0: vec2
    
    /**
    * The second column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/properties/mat2-column1.md Edit}
    */
    column1: vec2
    
    /**
    * Returns a string representation of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/properties/mat2-description.md Edit}
    */
    description: string
    
}
declare namespace mat2 {
    /**
    * Returns the identity matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-identity.md Edit}
    */
    export function identity(): mat2
    
    /**
    * Returns a matrix with all zero values.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat2/methods/mat2-zero.md Edit}
    */
    export function zero(): mat2
    

}

/**
* A 3x3 matrix.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/mat3-description.md Edit}
*/
declare class mat3 {
    /**
    * Creates a new mat3, defaulting to identity values.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-mat3.md Edit}
    */
    constructor()
    
    /**
    * Returns the result of adding the two matrices together.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-add.md Edit}
    */
    add(mat: mat3): mat3
    
    /**
    * Returns the determinant of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-determinant.md Edit}
    */
    determinant(): number
    
    /**
    * Returns the result of dividing the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-div.md Edit}
    */
    div(mat: mat3): mat3
    
    /**
    * Returns whether the two matrices are equal.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-equal.md Edit}
    */
    equal(mat: mat3): boolean
    
    /**
    * Returns the inverse of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-inverse.md Edit}
    */
    inverse(): mat3
    
    /**
    * Returns the result of multiplying the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-mult.md Edit}
    */
    mult(mat: mat3): mat3
    
    /**
    * Returns the result of scalar multiplying the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-multiplyScalar.md Edit}
    */
    multiplyScalar(scalar: number): mat3
    
    /**
    * Returns the result of subtracting the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-sub.md Edit}
    */
    sub(mat: mat3): mat3
    
    /**
    * Returns a string representation of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-toString.md Edit}
    */
    toString(): string
    
    /**
    * Returns the transpose of this matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-transpose.md Edit}
    */
    transpose(): mat3
    
    /**
    * The first column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/properties/mat3-column0.md Edit}
    */
    column0: vec3
    
    /**
    * The second column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/properties/mat3-column1.md Edit}
    */
    column1: vec3
    
    /**
    * The third column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/properties/mat3-column2.md Edit}
    */
    column2: vec3
    
    /**
    * Returns a string representation of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/properties/mat3-description.md Edit}
    */
    description: string
    
}
declare namespace mat3 {
    /**
    * Returns the identity matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-identity.md Edit}
    */
    export function identity(): mat3
    
    /**
    * Returns a matrix representing the specified rotation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-makeFromRotation.md Edit}
    */
    export function makeFromRotation(arg1: quat): mat3
    
    /**
    * Returns a matrix with all zero values.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat3/methods/mat3-zero.md Edit}
    */
    export function zero(): mat3
    

}

/**
* A 4x4 matrix.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/mat4-description.md Edit}
*/
declare class mat4 {
    /**
    * Creates a new mat4, defaulting to identity values.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-mat4.md Edit}
    */
    constructor()
    
    /**
    * Returns the result of adding the two matrices together.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-add.md Edit}
    */
    add(mat: mat4): mat4
    
    /**
    * Returns the determinant of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-determinant.md Edit}
    */
    determinant(): number
    
    /**
    * Returns the result of dividing the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-div.md Edit}
    */
    div(mat: mat4): mat4
    
    /**
    * Returns whether the two matrices are equal.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-equal.md Edit}
    */
    equal(mat: mat4): boolean
    
    /**
    * Returns an euler angle representation of this matrix's rotation, in radians.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-extractEulerAngles.md Edit}
    */
    extractEulerAngles(): vec3
    
    /**
    * Returns an euler angle representation of this matrix's rotation, in radians.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-extractEulerXYZ.md Edit}
    
    * @deprecated
    */
    extractEulerXYZ(): vec3
    
    /**
    * Returns the inverse of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-inverse.md Edit}
    */
    inverse(): mat4
    
    /**
    * Returns the result of multiplying the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-mult.md Edit}
    */
    mult(mat: mat4): mat4
    
    /**
    * Returns the direction vector multiplied by this matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-multiplyDirection.md Edit}
    */
    multiplyDirection(direction: vec3): vec3
    
    /**
    * Returns the point `point` multiplied by this matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-multiplyPoint.md Edit}
    */
    multiplyPoint(point: vec3): vec3
    
    /**
    * Returns the result of scalar multiplying the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-multiplyScalar.md Edit}
    */
    multiplyScalar(scalar: number): mat4
    
    /**
    * Returns the vector multiplied by this matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-multiplyVector.md Edit}
    */
    multiplyVector(vector: vec4): vec4
    
    /**
    * Returns the result of subtracting the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-sub.md Edit}
    */
    sub(mat: mat4): mat4
    
    /**
    * Returns a string representation of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-toString.md Edit}
    */
    toString(): string
    
    /**
    * Returns the transpose of this matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-transpose.md Edit}
    */
    transpose(): mat4
    
    /**
    * The first column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/properties/mat4-column0.md Edit}
    */
    column0: vec4
    
    /**
    * The second column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/properties/mat4-column1.md Edit}
    */
    column1: vec4
    
    /**
    * The third column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/properties/mat4-column2.md Edit}
    */
    column2: vec4
    
    /**
    * The fourth column of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/properties/mat4-column3.md Edit}
    */
    column3: vec4
    
    /**
    * Returns a string representation of the matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/properties/mat4-description.md Edit}
    */
    description: string
    
}
declare namespace mat4 {
    /**
    * Returns the two matrices multiplied component-wise.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-compMult.md Edit}
    */
    export function compMult(arg1: mat4, arg2: mat4): mat4
    
    /**
    * Returns a new matrix with translation `translation`, rotation `rotation`, and scale `scale`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-compose.md Edit}
    */
    export function compose(translation: vec3, rotation: quat, scale: vec3): mat4
    
    /**
    * Returns a new matrix with the specified euler angles (in radians).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromEulerAngles.md Edit}
    */
    export function fromEulerAngles(euler: vec3): mat4
    
    /**
    * Returns a new matrix with euler angles `euler` (in radians).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromEulerAnglesYXZ.md Edit}
    
    * @deprecated
    */
    export function fromEulerAnglesYXZ(euler: vec3): mat4
    
    /**
    * Returns a new matrix with x euler angle `xAngle` (in radians).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromEulerX.md Edit}
    */
    export function fromEulerX(xAngle: number): mat4
    
    /**
    * Returns a new matrix with y euler angle `yAngle` (in radians).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromEulerY.md Edit}
    */
    export function fromEulerY(yAngle: number): mat4
    
    /**
    * Returns a new matrix with z euler angle `zAngle` (in radians).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromEulerZ.md Edit}
    */
    export function fromEulerZ(zAngle: number): mat4
    
    /**
    * Returns a new matrix with rotation `rotation`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromRotation.md Edit}
    */
    export function fromRotation(rotation: quat): mat4
    
    /**
    * Returns a new matrix with scale `scale`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromScale.md Edit}
    */
    export function fromScale(scale: vec3): mat4
    
    /**
    * Returns a new matrix with the translation `translation`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromTranslation.md Edit}
    */
    export function fromTranslation(translation: vec3): mat4
    
    /**
    * Returns a new matrix with the yaw, pitch, and roll radians found in `yawPitchRoll`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-fromYawPitchRoll.md Edit}
    
    * @deprecated
    */
    export function fromYawPitchRoll(yawPitchRoll: vec3): mat4
    
    /**
    * Returns the identity matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-identity.md Edit}
    */
    export function identity(): mat4
    
    /**
    * Returns a new matrix generated using the provided arguments.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-lookAt.md Edit}
    */
    export function lookAt(eye: vec3, center: vec3, up: vec3): mat4
    
    /**
    * Returns a new matrix using the provided vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-makeBasis.md Edit}
    */
    export function makeBasis(x: vec3, y: vec3, z: vec3): mat4
    
    /**
    * Returns a new matrix generated using the provided arguments.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-orthographic.md Edit}
    */
    export function orthographic(left: number, right: number, bottom: number, top: number, zNear: number, zFar: number): mat4
    
    /**
    * Returns the outer product of the two matrices.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-outerProduct.md Edit}
    */
    export function outerProduct(arg1: vec4, arg2: vec4): mat4
    
    /**
    * Returns a new matrix generated using the provided arguments.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-perspective.md Edit}
    */
    export function perspective(fovY: number, aspect: number, zNear: number, zFar: number): mat4
    
    /**
    * Returns a matrix with all zero values.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/mat4/methods/mat4-zero.md Edit}
    */
    export function zero(): mat4
    

}

/**
* An asset that describes how visual objects should appear.
* Each Material is a collection of [Passes](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Pass) which define the actual rendering passes.
* Materials are used by [MeshVisuals](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual) for drawing meshes in the scene.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Material/Material-description.md Edit}
*/
interface Material extends Asset {
    /**
    * Returns a copy of the Material.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Material/methods/Material-clone.md Edit}
    */
    clone(): Material
    
    /**
    * Returns the [Pass](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Pass) of the Material at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Material/methods/Material-getPass.md Edit}
    */
    getPass(index: number): Pass
    
    /**
    * Returns the number of [Passes](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Pass) for the Material.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Material/methods/Material-getPassCount.md Edit}
    */
    getPassCount(): number
    
    /**
    * The first Pass of the Material.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Material/properties/Material-mainPass.md Edit}
    */
    mainPass: Pass
    
}

/**
* Base class for all MeshVisual components using [Materials](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#Material) to render.
* Comparable to the former class "MeshVisual", which was split into the classes:
* [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual),
* [MaterialMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#MaterialMeshVisual),
* and [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaterialMeshVisual/MaterialMeshVisual-description.md Edit}
*/
interface MaterialMeshVisual extends BaseMeshVisual {
    /**
    * Adds a Material to use for rendering.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaterialMeshVisual/methods/MaterialMeshVisual-addMaterial.md Edit}
    */
    addMaterial(material: Material): void
    
    /**
    * Clears all Materials.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaterialMeshVisual/methods/MaterialMeshVisual-clearMaterials.md Edit}
    */
    clearMaterials(): void
    
    /**
    * Returns the Material at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaterialMeshVisual/methods/MaterialMeshVisual-getMaterial.md Edit}
    */
    getMaterial(index: number): Material
    
    /**
    * Returns the number of Materials used for rendering.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaterialMeshVisual/methods/MaterialMeshVisual-getMaterialsCount.md Edit}
    */
    getMaterialsCount(): number
    
    /**
    * Returns the first Material.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaterialMeshVisual/properties/MaterialMeshVisual-mainMaterial.md Edit}
    */
    mainMaterial: Material
    
    /**
    * Returns the `mainPass` of the `mainMaterial`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaterialMeshVisual/properties/MaterialMeshVisual-mainPass.md Edit}
    */
    mainPass: Pass
    
    /**
    * Get the array of materials used by the MaterialMeshVisual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MaterialMeshVisual/properties/MaterialMeshVisual-materials.md Edit}
    */
    materials: Material[]
    
}

/**
* Provides useful math utility functions.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MathUtils/MathUtils-description.md Edit}
*/
interface MathUtils {
}
declare namespace MathUtils {
    /**
    * Clamp floating-point value `v` in the range `[lo, hi]` (inclusive).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MathUtils/methods/MathUtils-clamp.md Edit}
    */
    export function clamp(v: number, lo: number, hi: number): number
    
    /**
    * Linearly interpolate from floating-point `a` to `b`, based on fraction `t` (where t=0.0 returns a, and t=1.0 returns b). This is equivalent to the vec2 and vec3 lerp() functions, but operates on scalar floating-point values.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MathUtils/methods/MathUtils-lerp.md Edit}
    */
    export function lerp(a: number, b: number, time: number): number
    
    /**
    * Generate a random floating-point value in the range `[lo, hi)`. Note, the range is inclusive at the lower end, and exclusive at the upper.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MathUtils/methods/MathUtils-randomRange.md Edit}
    */
    export function randomRange(lo: number, hi: number): number
    
    /**
    * Map floating-point `v` from range [inMin, inMax] to [outMin, outMax].
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MathUtils/methods/MathUtils-remap.md Edit}
    */
    export function remap(v: number, inMin: number, inMax: number, outMin: number, outMax: number): number
    
    /**
    * Constant mapping degrees to radians. This equals pi/180.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MathUtils/properties/MathUtils-DegToRad.md Edit}
    */
    let DegToRad: number
    
    /**
    * Constant mapping radians to degrees. This equals 180/pi.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MathUtils/properties/MathUtils-RadToDeg.md Edit}
    */
    let RadToDeg: number
    

}

/**
* Settings for the physical substance, such as friction and bounciness, of a collider. If unset, uses the default matter from the world settings.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Matter/Matter-description.md Edit}
*/
interface Matter extends Asset {
    /**
    * Bounciness, or restitution, for dynamic bodies. This is the proportion of energy preserved after a collision, in the range 0 to 1. 
    * This defaults to 0.0. Dynamic bounciness should usually be less than 1.0, to prevent energy from accumulating excessively (there is a certain amount of energy gained due to collision response). 
    * The effective bounciness for a collision is the product of both colliding objects. So if your bounciness setting appears to have no effect, it probably means the object it's colliding with has 0 bounciness.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Matter/properties/Matter-dynamicBounciness.md Edit}
    */
    dynamicBounciness: number
    
    /**
    * Coefficient of friction. 
    * The effective friction between two objects is the product of both objects' friction. So for example, the default between two objects is 0.5*0.5=0.25. 
    * Typical ranges are between 0 and 1, but larger values (up to 10) are allowed. This may be used to increase the effective friction when colliding against another object with low friction. 
    * This is a very simplified approximation of realistic friction, since it does not correctly take into account the combined surface characteristics of both objects. It also doesn't distinguish between static and dynamic friction.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Matter/properties/Matter-friction.md Edit}
    */
    friction: number
    
    /**
    * Friction applied to rolling objects. This isn't physically realistic, but helps prevent objects from rolling indefinitely.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Matter/properties/Matter-rollingFriction.md Edit}
    */
    rollingFriction: number
    
    /**
    * Friction applied to spinning objects. This isn't physically realistic, but helps prevent objects from spinning indefinitely.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Matter/properties/Matter-spinningFriction.md Edit}
    */
    spinningFriction: number
    
    /**
    * Bounciness (AKA restitution), for static colliders. This is the proportion of energy preserved after a collision, in the range 0 to 1. 
    * This defaults to 1.0. Typically we use high bounciness for static colliders because they are unaffected by collision, and thus maximally preserve energy. 
    * The effective bounciness for a collision is the product of both colliding objects. So if your bounciness setting appears to have no effect, it probably means the object it's colliding with has 0 bounciness.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Matter/properties/Matter-staticBounciness.md Edit}
    */
    staticBounciness: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaContentType/MediaContentType-description.md Edit}

* @private
*/
declare enum MediaContentType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaContentType/properties/MediaContentType-None.md Edit}
    
    * @private
    */
    None,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaContentType/properties/MediaContentType-Image.md Edit}
    
    * @private
    */
    Image,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaContentType/properties/MediaContentType-Video.md Edit}
    
    * @private
    */
    Video
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerMode/MediaPickerMode-description.md Edit}

* @private
*/
declare enum MediaPickerMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerMode/properties/MediaPickerMode-PickImage.md Edit}
    
    * @private
    */
    PickImage,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerMode/properties/MediaPickerMode-PickFaceImage.md Edit}
    
    * @private
    */
    PickFaceImage,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerMode/properties/MediaPickerMode-PickVideo.md Edit}
    
    * @private
    */
    PickVideo,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerMode/properties/MediaPickerMode-PickMultipleFacesImage.md Edit}
    
    * @private
    */
    PickMultipleFacesImage
}

/**
* Base class for Texture Providers based on selectable media.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/MediaPickerTextureProvider-description.md Edit}
*/
interface MediaPickerTextureProvider extends TextureProvider {
    /**
    * Requests SDK to hide media picking UI.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/methods/MediaPickerTextureProvider-hideMediaPicker.md Edit}
    */
    hideMediaPicker(): void
    
    /**
    * Requests face mesh and sets a callback to fire when it's ready.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/methods/MediaPickerTextureProvider-setFaceMeshReadyCallback.md Edit}
    */
    setFaceMeshReadyCallback(callback: () => void): void
    
    /**
    * Sets a callback to fire when a file is picked through media picking UI.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/methods/MediaPickerTextureProvider-setFilePickedCallback.md Edit}
    */
    setFilePickedCallback(callback: () => void): void
    
    /**
    * Requests SDK to show media picking UI.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/methods/MediaPickerTextureProvider-showMediaPicker.md Edit}
    */
    showMediaPicker(): void
    
    /**
    * If set to true, MediaPickerTextureProvider will request media picker UI automatically during loading.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-autoShowMediaPicker.md Edit}
    */
    autoShowMediaPicker: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-contentType.md Edit}
    
    * @readonly
    
    * @private
    */
    contentType: MediaContentType
    
    /**
    * If set to true, MediaPickerTextureProvider will provide a proper texture transform for image with face(s), that will "zoom" UVs to the first found face on the image.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-cropFace.md Edit}
    */
    cropFace: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-faceCount.md Edit}
    
    * @readonly
    
    * @private
    */
    faceCount: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-faceFound.md Edit}
    
    * @readonly
    
    * @private
    */
    faceFound: boolean
    
    /**
    * Returns underlying TextureProvider for the last selected media file. If the last media file was not image with at least one face, null is returned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-faceImageControl.md Edit}
    */
    faceImageControl: FaceTextureProvider
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-faceIndex.md Edit}
    
    * @private
    */
    faceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-faceRect.md Edit}
    
    * @deprecated
    
    * @readonly
    */
    faceRect: vec4
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-faceTextureControl.md Edit}
    
    * @private
    */
    faceTextureControl: FaceTextureProvider
    
    /**
    * Returns underlying TextureProvider for the last selected media file. If the last media file was not image, null is returned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-imageControl.md Edit}
    
    * @readonly
    */
    imageControl: TextureProvider
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-imageTextureControl.md Edit}
    
    * @readonly
    
    * @private
    */
    imageTextureControl: TextureProvider
    
    /**
    * Returns true if an image is selected, or a video file has been loaded and is ready for decoding, false otherwise.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-isContentReady.md Edit}
    
    * @readonly
    */
    isContentReady: boolean
    
    /**
    * MediaPickerTextureProvider will allow users to select only images with detected faces through media picker UI. See also "cropFace" option.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-isFaceImagePickingEnabled.md Edit}
    */
    isFaceImagePickingEnabled: boolean
    
    /**
    * MediaPickerTextureProvider will allow users to select all images files through media picker UI.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-isImagePickingEnabled.md Edit}
    */
    isImagePickingEnabled: boolean
    
    /**
    * MediaPickerTextureProvider will allow users to select video files through media picker UI.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-isVideoPickingEnabled.md Edit}
    */
    isVideoPickingEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-multipleFaces.md Edit}
    
    * @private
    */
    multipleFaces: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-pickerMode.md Edit}
    
    * @private
    */
    pickerMode: MediaPickerMode
    
    /**
    * Returns underlying VideoTextureProvider for the last selected media file. If the last media file was not video, null is returned. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-videoControl.md Edit}
    
    * @readonly
    */
    videoControl: VideoTextureProvider
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MediaPickerTextureProvider/properties/MediaPickerTextureProvider-videoTextureControl.md Edit}
    
    * @readonly
    
    * @private
    */
    videoTextureControl: TextureProvider
    
}

/**
* Computes a mel scale spectrogram - a spectrogram where the frequencies are converted to the mel scale.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogram/MelSpectrogram-description.md Edit}
*/
interface MelSpectrogram extends ScriptObject {
    /**
    * Process in tensor with shape, write result to the outTensor and return the shape of outTensor.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogram/methods/MelSpectrogram-process.md Edit}
    */
    process(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): vec3
    
}

/**
* A builder class for MelSpectrogram.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/MelSpectrogramBuilder-description.md Edit}
*/
interface MelSpectrogramBuilder extends ScriptObject {
    /**
    * Create new MelSpectrogram object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/methods/MelSpectrogramBuilder-build.md Edit}
    */
    build(): MelSpectrogram
    
    /**
    * Set length of the fft window.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/methods/MelSpectrogramBuilder-setFFTSize.md Edit}
    */
    setFFTSize(fftSize: number): MelSpectrogramBuilder
    
    /**
    * Length of the window, which is the length of frameSize and then padded with zeros to match fftSize.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/methods/MelSpectrogramBuilder-setFrameSize.md Edit}
    */
    setFrameSize(frameSize: number): MelSpectrogramBuilder
    
    /**
    * Set number of samples between successive fft segments.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/methods/MelSpectrogramBuilder-setHopSize.md Edit}
    */
    setHopSize(hopSize: number): MelSpectrogramBuilder
    
    /**
    * Set max frequency.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/methods/MelSpectrogramBuilder-setMaxFreq.md Edit}
    */
    setMaxFreq(maxFreq: number): MelSpectrogramBuilder
    
    /**
    * Set min frequency.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/methods/MelSpectrogramBuilder-setMinFreq.md Edit}
    */
    setMinFreq(minFreq: number): MelSpectrogramBuilder
    
    /**
    * Set number of mel bins.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/methods/MelSpectrogramBuilder-setNumMel.md Edit}
    */
    setNumMel(numMel: number): MelSpectrogramBuilder
    
    /**
    * Set number of samples per second.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MelSpectrogramBuilder/methods/MelSpectrogramBuilder-setSampleRate.md Edit}
    */
    setSampleRate(sampleRate: number): MelSpectrogramBuilder
    
}

/**
* A class for generating meshes at runtime.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/MeshBuilder-description.md Edit}
*/
declare class MeshBuilder {
    /**
    * Creates a new MeshBuilder with the specified vertex layout.
    
    * Layout is given as a list of "attribute" objects with the following properties:
    
    * __name__ - Attribute name
    * __components__ - Size of the attribute (how many float values it uses)
    * __normalized__ (optional) - Optional property declaring that the attribute should be normalized
    
    * ```js
    * var builder = new MeshBuilder([
    *     // vertex position (x,y,z)
    *     { name: "position", components: 3 },
    *     // normal vector (x,y,z)
    *     { name: "normal", components: 3, normalized: true },
    *     // texture UV (u,v)
    *     { name: "texture0", components: 2 },
    * ]);
    * ```
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-MeshBuilder.md Edit}
    */
    constructor(layout: any[])
    
    /**
    * Appends indices to the index list.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-appendIndices.md Edit}
    */
    appendIndices(indices: number[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-appendIndicesFromTypedArray.md Edit}
    
    * @private
    */
    appendIndicesFromTypedArray(indices: Uint16Array, usedSize: number): void
    
    /**
    * Takes a list of list of vertex values according to the layout.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-appendVertices.md Edit}
    */
    appendVertices(verts: number[][]): void
    
    /**
    * Similar to `appendVertices`, but takes all values in one large array.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-appendVerticesInterleaved.md Edit}
    */
    appendVerticesInterleaved(verts: number[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-appendVerticesInterleavedFromTypedArray.md Edit}
    
    * @private
    */
    appendVerticesInterleavedFromTypedArray(verts: Float32Array, usedSize: number): void
    
    /**
    * Removes all indices starting at index `from` and ending before index `to`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-eraseIndices.md Edit}
    */
    eraseIndices(from: number, to: number): void
    
    /**
    * Removes all vertex data starting at vertex index `from` and ending before vertex index `to`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-eraseVertices.md Edit}
    */
    eraseVertices(from: number, to: number): void
    
    /**
    * Returns the number of indices in the index list.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-getIndicesCount.md Edit}
    */
    getIndicesCount(): number
    
    /**
    * Returns a RenderMesh asset that can be applied to a MeshVisual's `mesh` property. This asset stays linked to the MeshBuilder that provided it, so making changes to the mesh data and calling `updateMesh()` will update the RenderMesh as well.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-getMesh.md Edit}
    */
    getMesh(): RenderMesh
    
    /**
    * Returns the number of vertices in the vertex list.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-getVerticesCount.md Edit}
    */
    getVerticesCount(): number
    
    /**
    * Checks whether the current data entered will create a valid mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-isValid.md Edit}
    */
    isValid(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-setParameters.md Edit}
    
    * @private
    */
    setParameters(params: any): void
    
    /**
    * Sets data for a single vertex at vertex index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-setVertexInterleaved.md Edit}
    */
    setVertexInterleaved(index: number, verts: number[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-toString.md Edit}
    
    * @private
    */
    toString(): string
    
    /**
    * Rebuilds the MeshAsset controlled by this MeshBuilder using the current mesh data.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/methods/MeshBuilder-updateMesh.md Edit}
    */
    updateMesh(): void
    
    /**
    * The index data type used by this MeshBuilder. `MeshIndexType.UInt16` is the value normally used for this.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/properties/MeshBuilder-indexType.md Edit}
    */
    indexType: MeshIndexType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/properties/MeshBuilder-meshSerializationEnabled.md Edit}
    
    * @private
    */
    meshSerializationEnabled: boolean
    
    /**
    * The topology type used for the mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshBuilder/properties/MeshBuilder-topology.md Edit}
    */
    topology: MeshTopology
    
}

/**
* Formats of mesh classification used by WorldRenderObjectProvider.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshClassificationFormat/MeshClassificationFormat-description.md Edit}
*/
declare enum MeshClassificationFormat {
    /**
    * Do not bake classifications to mesh
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshClassificationFormat/properties/MeshClassificationFormat-None.md Edit}
    */
    None,
    /**
    * Classifications are baked per vertex - vertices with multiple classes will use the value from the last face
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshClassificationFormat/properties/MeshClassificationFormat-PerVertexFast.md Edit}
    */
    PerVertexFast
}

/**
* Possible index data types used by [MeshBuilder](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#MeshBuilder). `MeshIndexType.UInt16` is the value normally used.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshIndexType/MeshIndexType-description.md Edit}
*/
declare enum MeshIndexType {
    /**
    * No index data type
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshIndexType/properties/MeshIndexType-None.md Edit}
    */
    None,
    /**
    * Unsigned integer, this is the value normally used
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshIndexType/properties/MeshIndexType-UInt16.md Edit}
    */
    UInt16
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshRenderObjectProvider/MeshRenderObjectProvider-description.md Edit}
*/
interface MeshRenderObjectProvider extends RenderObjectProvider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshShadowMode/MeshShadowMode-description.md Edit}
*/
declare enum MeshShadowMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshShadowMode/properties/MeshShadowMode-None.md Edit}
    */
    None,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshShadowMode/properties/MeshShadowMode-Caster.md Edit}
    */
    Caster,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshShadowMode/properties/MeshShadowMode-Receiver.md Edit}
    */
    Receiver
}

/**
* Allows meshes to be used as collision shapes, for ColliderComponent and BodyComponent.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshShape/MeshShape-description.md Edit}
*/
interface MeshShape extends Shape {
    /**
    * Bake mesh as a convex hull, generated from mesh colliders. This allows for irregular shapes to be used as dynamic bodies.
    
    **Limitations:**
    
    * They are non-deforming. A hull may be generated from a deforming render mesh, but it will not deform with it. Because of this, intrinsically deforming mesh types will not work as convex hulls. For instance world and face meshes. In these cases the convex hull will exist, but be empty and wont simulate.
    
    * It produces an approximation of the source mesh, reducing triangle count and eliminating concave areas.
    * Concave shapes may be composed of convex hulls in the scene graph. Splitting a concave mesh into convex hulls is known as "convex decomposition". It is an expensive process not supported by Studio, but there are many standalone tools available for this purpose (including plugins for 3D modeling apps). The resulting split mesh can be imported into Studio as a prefab.
    
    * Original triangle data is lost, so it is not available to script in ray casts.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshShape/properties/MeshShape-convex.md Edit}
    */
    convex: boolean
    
    /**
    * Sets geometry from a render mesh. The render mesh is automatically converted to a collision mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshShape/properties/MeshShape-mesh.md Edit}
    */
    mesh: RenderMesh
    
    /**
    * Specifies skinning component used to animate skinned meshes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshShape/properties/MeshShape-skin.md Edit}
    */
    skin: Skin
    
}

/**
* Mesh topology types used by [MeshBuilder](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#MeshBuilder).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshTopology/MeshTopology-description.md Edit}
*/
declare enum MeshTopology {
    /**
    * Draws unconnected line segments. Each group of two vertices specifies a new line segment.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshTopology/properties/MeshTopology-Lines.md Edit}
    */
    Lines,
    /**
    * Draws connected line segments. Starting with the second vertex, a line is drawn between each vertex and the preceding one.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshTopology/properties/MeshTopology-LineStrip.md Edit}
    */
    LineStrip,
    /**
    * Draws individual points. Each vertex specifies a new point to draw.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshTopology/properties/MeshTopology-Points.md Edit}
    */
    Points,
    /**
    * Draws unconnected triangles. Each group of three vertices specifies a new triangle.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshTopology/properties/MeshTopology-Triangles.md Edit}
    */
    Triangles,
    /**
    * Draws connected triangles sharing one central vertex. The first vertex is the shared one, or "hub" vertex. Starting with the third vertex, each vertex forms a triangle connecting with the previous vertex and hub vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshTopology/properties/MeshTopology-TriangleFan.md Edit}
    */
    TriangleFan,
    /**
    * Draws connected triangles in a strip. After the first two vertices, each vertex defines the third point on a new triangle extending from the previous one.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshTopology/properties/MeshTopology-TriangleStrip.md Edit}
    */
    TriangleStrip
}

/**
* This class has been DEPRECATED starting in Lens Studio 2.3.
* The `Component.MeshVisual` typename is now an alias for [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual).
* When upgrading a project to Lens Studio 2.3 or higher, any instances of the MeshVisual component will be upgraded to [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).

* This class was split into the following three classes, to better distinguish the behaviors of child classes.

* [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual): Base class for all visual classes using meshes to render

* [MaterialMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#MaterialMeshVisual): Child class of BaseMeshVisual, gives access to the [Materials](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#Material) used to render

* [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual): Child class of MaterialMeshVisual, gives access to the [RenderMesh](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#RenderMesh) used to render

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MeshVisual/MeshVisual-description.md Edit}
*/
interface MeshVisual extends Component {
}

/**
* Mel-frequency cepstral coefficients.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCC/MFCC-description.md Edit}
*/
interface MFCC extends ScriptObject {
    /**
    * Process in tensor with `shape`, write result to the `outTensor`, and returns the shape of `outTensor`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCC/methods/MFCC-process.md Edit}
    */
    process(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): vec3
    
    /**
    * Max tensor size.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCC/properties/MFCC-maxTensorSize.md Edit}
    
    * @readonly
    */
    maxTensorSize: number
    
}

/**
* Builder class for the MFCC (Mel Frequency Cepstral Co-efficients).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/MFCCBuilder-description.md Edit}
*/
interface MFCCBuilder extends ScriptObject {
    /**
    * Create a new MFCC object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-build.md Edit}
    */
    build(): MFCC
    
    /**
    * Sets the length of the FFT window.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setFFTSize.md Edit}
    */
    setFFTSize(fftSize: number): MFCCBuilder
    
    /**
    * Length of the window, the window will be the length of frameSize and then padded with zeros to mach FFTSize.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setFrameSize.md Edit}
    */
    setFrameSize(frameSize: number): MFCCBuilder
    
    /**
    * Sets the number of samples between successive FFT segments.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setHopSize.md Edit}
    */
    setHopSize(hopSize: number): MFCCBuilder
    
    /**
    * If lifter > 0, apply liftering to the MFCCs.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setLifter.md Edit}
    */
    setLifter(lifter: number): MFCCBuilder
    
    /**
    * Sets the max frequency.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setMaxFreq.md Edit}
    */
    setMaxFreq(maxFreq: number): MFCCBuilder
    
    /**
    * Sets the min frequency.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setMinFreq.md Edit}
    */
    setMinFreq(minFreq: number): MFCCBuilder
    
    /**
    * Sets the number of MFCCs to return.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setNumMFCC.md Edit}
    */
    setNumMFCC(numMFCC: number): MFCCBuilder
    
    /**
    * Sets number of mel bins.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setNumMel.md Edit}
    */
    setNumMel(numMel: number): MFCCBuilder
    
    /**
    * Sets the number of samples per second.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MFCCBuilder/methods/MFCCBuilder-setSampleRate.md Edit}
    */
    setSampleRate(sampleRate: number): MFCCBuilder
    
}

/**
* The Audio Track Provider of the audio from microphone.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MicrophoneAudioProvider/MicrophoneAudioProvider-description.md Edit}
*/
interface MicrophoneAudioProvider extends AudioTrackProvider {
    /**
    * Writes current frame audio data to the passed in `Float32Array` and returns its shape. The length of the array can't be more than `maxFrameSize`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MicrophoneAudioProvider/methods/MicrophoneAudioProvider-getAudioFrame.md Edit}
    
    * @exposesUserData
    */
    getAudioFrame(audioFrame: Float32Array): vec3
    
    /**
    * Start processing audio from microphone. Useful to avoid redundant processing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MicrophoneAudioProvider/methods/MicrophoneAudioProvider-start.md Edit}
    */
    start(): void
    
    /**
    * Stop processing audio from microphone.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MicrophoneAudioProvider/methods/MicrophoneAudioProvider-stop.md Edit}
    */
    stop(): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MicrophoneRawModule/MicrophoneRawModule-description.md Edit}

* @private
*/
interface MicrophoneRawModule extends Asset {
}

/**
* Binary ML model supplied by the user.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLAsset/MLAsset-description.md Edit}
*/
interface MLAsset extends BinAsset {
    /**
    * Returns model metadata as JSON object. 
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLAsset/methods/MLAsset-getMetadata.md Edit}
    */
    getMetadata(): object
    
}

/**
* Transforms inputs (Textures or Float32Array) into outputs (Textures or Float32Array) using a neural network.
* The neural network is represented by an MLAsset, which is set as the `model` property.
* For more information, see the [MLComponent Overview](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/ml-component-overview).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/MLComponent-description.md Edit}
*/
interface MLComponent extends Component {
    /**
    * Builds the MLComponent model when all placeholders are determined. Config is an array of Input and Output placeholders.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-build.md Edit}
    */
    build(placeholders: BasePlaceholder[]): void
    
    /**
    * Stops running the MLComponent. The `onRunningFinished` callback will not be executed.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-cancel.md Edit}
    */
    cancel(): void
    
    /**
    * Returns the InputPlaceholder with the matching name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-getInput.md Edit}
    */
    getInput(name: string): InputPlaceholder
    
    /**
    * Returns an array of InputPlaceholders of the MLComponent's model with default settings. Returns empty array if the model asset is not set.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-getInputs.md Edit}
    */
    getInputs(): InputPlaceholder[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-getLoadedBackend.md Edit}
    
    * @private
    */
    getLoadedBackend(): string
    
    /**
    * Returns the OutputPlaceholder with the matching name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-getOutput.md Edit}
    */
    getOutput(name: string): OutputPlaceholder
    
    /**
    * Returns an array of OutputPlaceholders of MLComponent's model with default settings. Returns empty array if the model is not set.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-getOutputs.md Edit}
    */
    getOutputs(): OutputPlaceholder[]
    
    /**
    * Returns the end time of the scheduled MLComponent run.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-getScheduledEnd.md Edit}
    */
    getScheduledEnd(): MachineLearning.FrameTiming
    
    /**
    * Returns the start time of the scheduled MLComponent run.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-getScheduledStart.md Edit}
    */
    getScheduledStart(): MachineLearning.FrameTiming
    
    /**
    * Returns true if running is requested on each frame.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-isRecurring.md Edit}
    */
    isRecurring(): boolean
    
    /**
    * Runs the MLComponent once.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-runImmediate.md Edit}
    */
    runImmediate(sync: boolean): void
    
    /**
    * Schedules the MLComponent to run at the start timing and terminate at the end timing. The scheduled running will recur if `recurring` is true.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-runScheduled.md Edit}
    */
    runScheduled(recurring: boolean, startTiming: MachineLearning.FrameTiming, endTiming: MachineLearning.FrameTiming): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-setBackendPriorityList.md Edit}
    
    * @private
    */
    setBackendPriorityList(backendPriorityList: string[]): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-setBinModel.md Edit}
    
    * @deprecated
    
    * @private
    */
    setBinModel(effectFolderAsset: BinAsset): void
    
    /**
    * Stops running the MLComponent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-stop.md Edit}
    */
    stop(): void
    
    /**
    * If loading asynchronously, makes the entire system wait until loading is finished.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-waitOnLoading.md Edit}
    */
    waitOnLoading(): void
    
    /**
    * If running asynchronously, makes the entire system wait until the last run is finished.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/methods/MLComponent-waitOnRunning.md Edit}
    */
    waitOnRunning(): void
    
    /**
    * Runs the MLComponent automatically when the object or component it's on is enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/properties/MLComponent-autoRun.md Edit}
    */
    autoRun: boolean
    
    /**
    * Controls the inference mode that MLComponent will run in. For example, GPU, CPU, etc.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/properties/MLComponent-inferenceMode.md Edit}
    */
    inferenceMode: MachineLearning.InferenceMode
    
    /**
    * Binary ML model supplied by the user.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/properties/MLComponent-model.md Edit}
    */
    model: MLAsset
    
    /**
    * Function that gets called when model loading is finished.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/properties/MLComponent-onLoadingFinished.md Edit}
    */
    onLoadingFinished: () => void
    
    /**
    * Function that gets called when the model stops running.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/properties/MLComponent-onRunningFinished.md Edit}
    */
    onRunningFinished: () => void
    
    /**
    * Render order of the MLComponent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/properties/MLComponent-renderOrder.md Edit}
    */
    renderOrder: number
    
    /**
    * Returns the current status of the neural network model.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/properties/MLComponent-state.md Edit}
    
    * @readonly
    */
    state: MachineLearning.ModelState
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MLComponent/properties/MLComponent-stoppable.md Edit}
    
    * @unreleased
    
    * @private
    */
    stoppable: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/MotionController-description.md Edit}

* @wearableOnly
*/
interface MotionController extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/methods/MotionController-getMotionState.md Edit}
    */
    getMotionState(): MotionController.MotionType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/methods/MotionController-getTouchpadPhysicalSize.md Edit}
    */
    getTouchpadPhysicalSize(): vec2 | undefined
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/methods/MotionController-getTouchpadPointSize.md Edit}
    */
    getTouchpadPointSize(): vec2 | undefined
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/methods/MotionController-getTrackingQuality.md Edit}
    */
    getTrackingQuality(): MotionController.TrackingQuality
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/methods/MotionController-getWorldPosition.md Edit}
    */
    getWorldPosition(): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/methods/MotionController-getWorldRotation.md Edit}
    */
    getWorldRotation(): quat
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/methods/MotionController-invokeHaptic.md Edit}
    */
    invokeHaptic(hapticRequest: MotionController.HapticRequest): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/methods/MotionController-isControllerAvailable.md Edit}
    */
    isControllerAvailable(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/properties/MotionController-onControllerStateChange.md Edit}
    
    * @readonly
    */
    onControllerStateChange: event1<boolean, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/properties/MotionController-onMotionTypeChange.md Edit}
    
    * @readonly
    */
    onMotionTypeChange: event1<MotionController.MotionType, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/properties/MotionController-onTouchEvent.md Edit}
    
    * @readonly
    */
    onTouchEvent: event4<vec2, number, number, MotionController.TouchPhase, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/properties/MotionController-onTouchpadSizeChange.md Edit}
    
    * @readonly
    */
    onTouchpadSizeChange: event2<vec2, vec2, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/properties/MotionController-onTrackingQualityChange.md Edit}
    
    * @readonly
    */
    onTrackingQualityChange: event1<MotionController.TrackingQuality, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/properties/MotionController-onTransformEvent.md Edit}
    
    * @readonly
    */
    onTransformEvent: event2<vec3, quat, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController/properties/MotionController-options.md Edit}
    
    * @readonly
    */
    options: MotionController.MotionControllerOptions
    
}

declare namespace MotionController {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/MotionController.HapticFeedback-description.md Edit}
    
    * @wearableOnly
    */
    enum HapticFeedback {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/properties/MotionController.HapticFeedback-Default.md Edit}
        */
        Default,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/properties/MotionController.HapticFeedback-Tick.md Edit}
        */
        Tick,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/properties/MotionController.HapticFeedback-Select.md Edit}
        */
        Select,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/properties/MotionController.HapticFeedback-Success.md Edit}
        */
        Success,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/properties/MotionController.HapticFeedback-Error.md Edit}
        */
        Error,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/properties/MotionController.HapticFeedback-VibrationLow.md Edit}
        */
        VibrationLow,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/properties/MotionController.HapticFeedback-VibrationMedium.md Edit}
        */
        VibrationMedium,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticFeedback/properties/MotionController.HapticFeedback-VibrationHigh.md Edit}
        */
        VibrationHigh
    }

}

declare namespace MotionController {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticRequest/MotionController.HapticRequest-description.md Edit}
    
    * @wearableOnly
    */
    interface HapticRequest extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticRequest/properties/MotionController.HapticRequest-duration.md Edit}
        */
        duration: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticRequest/properties/MotionController.HapticRequest-hapticFeedback.md Edit}
        */
        hapticFeedback: MotionController.HapticFeedback
        
    }

}
declare namespace MotionController {
    namespace HapticRequest {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.HapticRequest/methods/MotionController.HapticRequest-create.md Edit}
        
        * @wearableOnly
        */
        export function create(): MotionController.HapticRequest
        
    
    }

}

declare namespace MotionController {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.MotionControllerOptions/MotionController.MotionControllerOptions-description.md Edit}
    
    * @wearableOnly
    */
    interface MotionControllerOptions extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.MotionControllerOptions/properties/MotionController.MotionControllerOptions-controllerId.md Edit}
        */
        controllerId: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.MotionControllerOptions/properties/MotionController.MotionControllerOptions-motionType.md Edit}
        */
        motionType: MotionController.MotionType
        
    }

}

declare namespace MotionController {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.MotionType/MotionController.MotionType-description.md Edit}
    
    * @wearableOnly
    */
    enum MotionType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.MotionType/properties/MotionController.MotionType-NoMotion.md Edit}
        */
        NoMotion,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.MotionType/properties/MotionController.MotionType-ThreeDoF.md Edit}
        */
        ThreeDoF,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.MotionType/properties/MotionController.MotionType-SixDoF.md Edit}
        */
        SixDoF
    }

}

declare namespace MotionController {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.Options/MotionController.Options-description.md Edit}
    */
    interface Options {
    }

}
declare namespace MotionController {
    namespace Options {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.Options/methods/MotionController.Options-create.md Edit}
        
        * @wearableOnly
        */
        export function create(): MotionController.MotionControllerOptions
        
    
    }

}

declare namespace MotionController {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TouchPhase/MotionController.TouchPhase-description.md Edit}
    
    * @wearableOnly
    */
    enum TouchPhase {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TouchPhase/properties/MotionController.TouchPhase-Began.md Edit}
        */
        Began,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TouchPhase/properties/MotionController.TouchPhase-Moved.md Edit}
        */
        Moved,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TouchPhase/properties/MotionController.TouchPhase-Ended.md Edit}
        */
        Ended,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TouchPhase/properties/MotionController.TouchPhase-Canceled.md Edit}
        */
        Canceled
    }

}

declare namespace MotionController {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TrackingQuality/MotionController.TrackingQuality-description.md Edit}
    
    * @wearableOnly
    */
    enum TrackingQuality {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TrackingQuality/properties/MotionController.TrackingQuality-Unknown.md Edit}
        */
        Unknown,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TrackingQuality/properties/MotionController.TrackingQuality-Normal.md Edit}
        */
        Normal,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionController.TrackingQuality/properties/MotionController.TrackingQuality-Limited.md Edit}
        */
        Limited
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionControllerModule/MotionControllerModule-description.md Edit}

* @wearableOnly
*/
interface MotionControllerModule extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MotionControllerModule/methods/MotionControllerModule-getController.md Edit}
    */
    getController(options: MotionController.MotionControllerOptions): MotionController
    
}

/**
* Triggered when the tracked face's mouth closes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MouthClosedEvent/MouthClosedEvent-description.md Edit}
*/
interface MouthClosedEvent extends FaceTrackingEvent {
}

/**
* Triggered when the tracked face's mouth opens.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MouthOpenedEvent/MouthOpenedEvent-description.md Edit}
*/
interface MouthOpenedEvent extends FaceTrackingEvent {
}

/**
* An instance of a Connected Lens session among a group of participants who were successfully invited into the experience. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/MultiplayerSession-description.md Edit}
*/
interface MultiplayerSession extends ScriptObject {
    /**
    * Sets the realtime store to unowned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-clearRealtimeStoreOwnership.md Edit}
    */
    clearRealtimeStoreOwnership(store: GeneralDataStore, onSuccess: (store: GeneralDataStore) => void, onError: (message: string) => void): void
    
    /**
    * Creates a realtime store to share data within a multiplayer session. The realtime store will allow you to pass data between multiple connected users in the same experience, such as: syncing the position of objects in the scene, syncing the current game score, etc.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-createRealtimeStore.md Edit}
    */
    createRealtimeStore(options: RealtimeStoreCreateOptions, onSuccess: (store: GeneralDataStore) => void, onError: (message: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-deletePersistedValue.md Edit}
    
    * @deprecated
    
    * @private
    */
    deletePersistedValue(collection: string, key: string, scope: StorageScope, onDeleted: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * Deletes a realtime store. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-deleteRealtimeStore.md Edit}
    */
    deleteRealtimeStore(store: GeneralDataStore, onSuccess: (store: GeneralDataStore) => void, onError: (message: string) => void): void
    
    /**
    * Deletes the value from the specified scope.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-deleteStoredValue.md Edit}
    
    * @deprecated
    */
    deleteStoredValue(key: string, scope: StorageScope, onDeleted: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getAppInstanceId.md Edit}
    
    * @private
    */
    getAppInstanceId(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getLastUpdatedServerTimestamp.md Edit}
    
    * @private
    */
    getLastUpdatedServerTimestamp(store: GeneralDataStore): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getLocalUserId.md Edit}
    */
    getLocalUserId(localUserIdCallback: (userId: string) => void): void
    
    /**
    * Gets information about the current user, which includes their display name and unique `userID` which can be used to identify them in session.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getLocalUserInfo.md Edit}
    */
    getLocalUserInfo(localUserInfoCallback: (userInfo: ConnectedLensModule.UserInfo) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getMatchId.md Edit}
    
    * @private
    */
    getMatchId(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getPersistedAsset.md Edit}
    
    * @deprecated
    
    * @private
    */
    getPersistedAsset(collection: string, key: string, scope: StorageScope, onRetrieved: (collection: string, key: string, asset: Asset) => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getPersistedValue.md Edit}
    
    * @deprecated
    
    * @private
    */
    getPersistedValue(collection: string, key: string, scope: StorageScope, onRetrieved: (collection: string, key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)) => void, onError: (code: string, description: string) => void): void
    
    /**
    * Returns information about the passed in RealtimeStore.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getRealtimeStoreInfo.md Edit}
    */
    getRealtimeStoreInfo(store: GeneralDataStore): ConnectedLensModule.RealtimeStoreCreationInfo
    
    /**
    * Returns a unix timestamp in milliseconds of the current time according to the server. Useful for synchronizing time-based game events across devices.
    * `-1` will be returned if session is not connected to the server.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getServerTimestamp.md Edit}
    */
    getServerTimestamp(): number
    
    /**
    * Get a value stored within the specified scope.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-getStoredValue.md Edit}
    
    * @deprecated
    */
    getStoredValue(key: string, scope: StorageScope, onRetrieved: (key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)) => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-isValidTimestamp.md Edit}
    
    * @private
    */
    isValidTimestamp(timestamp: number): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-leave.md Edit}
    
    * @private
    */
    leave(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-listPersistedValues.md Edit}
    
    * @deprecated
    
    * @private
    */
    listPersistedValues(collection: string, scope: StorageScope, limit: number, cursor: string, onRetrieved: (collection: string, values: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)[][], cursor: string) => void, onError: (code: string, description: string) => void): void
    
    /**
    * List all values stored within the specified scope.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-listStoredValues.md Edit}
    
    * @deprecated
    */
    listStoredValues(scope: StorageScope, cursor: string, onRetrieved: (values: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string)[][], cursor: string) => void, onError: (code: string, description: string) => void): void
    
    /**
    * Requests for ownership of the realtime store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-requestRealtimeStoreOwnership.md Edit}
    */
    requestRealtimeStoreOwnership(store: GeneralDataStore, onSuccess: (store: GeneralDataStore) => void, onError: (message: string) => void): void
    
    /**
    * Sends a string message via the realtime backend.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-sendMessage.md Edit}
    */
    sendMessage(message: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-sendMessageBytes.md Edit}
    
    * @private
    */
    sendMessageBytes(message: Uint8Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-sendMessageBytesWithTimeout.md Edit}
    
    * @private
    */
    sendMessageBytesWithTimeout(message: Uint8Array, timeoutMs: number): void
    
    /**
    * Sends a string message with a timeout in milliseconds. Allows messages to be dropped from the outgoing message queue when they become too old. Useful to ensure the quick delivery of subsequent messages.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-sendMessageWithTimeout.md Edit}
    */
    sendMessageWithTimeout(message: string, timeoutMs: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-sendRPC.md Edit}
    
    * @private
    */
    sendRPC(rpcName: string, payload: string, onResponse: (response: string) => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-setPersistedAsset.md Edit}
    
    * @deprecated
    
    * @private
    */
    setPersistedAsset(collection: string, key: string, asset: Asset, options: StorageOptions, onSaved: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-setPersistedValue.md Edit}
    
    * @deprecated
    
    * @private
    */
    setPersistedValue(collection: string, key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string), options: StorageOptions, onSaved: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * Saves the value to the specified scope.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/methods/MultiplayerSession-setStoredValue.md Edit}
    
    * @deprecated
    */
    setStoredValue(key: string, value: (mat4|mat3|mat2|vec4|vec2|vec3|boolean|quat|number|string), options: StorageOptions, onSaved: () => void, onError: (code: string, description: string) => void): void
    
    /**
    * Get the number of active users in the Session.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/properties/MultiplayerSession-activeUserCount.md Edit}
    
    * @readonly
    */
    activeUserCount: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/properties/MultiplayerSession-activeUsersInfo.md Edit}
    
    * @readonly
    */
    activeUsersInfo: ConnectedLensModule.UserInfo[]
    
    /**
    * Get all the Realtime Stores in the current session.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSession/properties/MultiplayerSession-allRealtimeStores.md Edit}
    
    * @readonly
    */
    allRealtimeStores: GeneralDataStore[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSystem/MultiplayerSystem-description.md Edit}

* @private
*/
interface MultiplayerSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/MultiplayerSystem/methods/MultiplayerSystem-createSession.md Edit}
    
    * @private
    */
    createSession(options: BaseMultiplayerSessionOptions, creationCallback: (session: MultiplayerSession, sessionCreationType: ConnectedLensSessionOptions.SessionCreationType) => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/NativeARTrackingState-description.md Edit}

* @private
*/
declare enum NativeARTrackingState {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-Unsupported.md Edit}
    
    * @private
    */
    Unsupported,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-NotRunning.md Edit}
    
    * @private
    */
    NotRunning,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-NotAvailable.md Edit}
    
    * @private
    */
    NotAvailable,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-Initializing.md Edit}
    
    * @private
    */
    Initializing,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-LimitedExcessiveMotion.md Edit}
    
    * @private
    */
    LimitedExcessiveMotion,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-LimitedInsufficientFeatures.md Edit}
    
    * @private
    */
    LimitedInsufficientFeatures,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-LimitedRelocalizing.md Edit}
    
    * @private
    */
    LimitedRelocalizing,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-Limited.md Edit}
    
    * @private
    */
    Limited,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativeARTrackingState/properties/NativeARTrackingState-Normal.md Edit}
    
    * @private
    */
    Normal
}

/**
* Tracking type used by the [Device Tracking](https://lensstudio.snapchat.com/api/classes/devicetracking) component to specify what type of plane to detect. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativePlaneTrackingType/NativePlaneTrackingType-description.md Edit}
*/
declare enum NativePlaneTrackingType {
    /**
    * No planes will be detected.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativePlaneTrackingType/properties/NativePlaneTrackingType-None.md Edit}
    */
    None,
    /**
    * Only horizontal planes will be detected.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativePlaneTrackingType/properties/NativePlaneTrackingType-Horizontal.md Edit}
    */
    Horizontal,
    /**
    * Only vertical planes will be detected.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativePlaneTrackingType/properties/NativePlaneTrackingType-Vertical.md Edit}
    */
    Vertical,
    /**
    * Both horizontal and vertical planes will be detected. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NativePlaneTrackingType/properties/NativePlaneTrackingType-Both.md Edit}
    */
    Both
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NaturalFeatureMarkerProvider/NaturalFeatureMarkerProvider-description.md Edit}
*/
interface NaturalFeatureMarkerProvider extends MarkerProvider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/NeuralFaceEffectTextureProvider-description.md Edit}

* @private
*/
interface NeuralFaceEffectTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-applyEffect.md Edit}
    
    * @private
    */
    applyEffect(faceIndex: number, effectName: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-computeResultingPlainFaceLandmarks.md Edit}
    
    * @private
    */
    computeResultingPlainFaceLandmarks(faceIndex: number, onFinished: (landmarks: number[]) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-getTrackedFaceBoundingBoxes.md Edit}
    
    * @private
    */
    getTrackedFaceBoundingBoxes(): vec4[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-process.md Edit}
    
    * @private
    */
    process(onFinished: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-registerEffect.md Edit}
    
    * @private
    */
    registerEffect(effectName: string, effectFolder: BinAsset): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-removeEffect.md Edit}
    
    * @private
    */
    removeEffect(faceIndex: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-setInput.md Edit}
    
    * @private
    */
    setInput(inputTexture: Texture): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-trackFaces.md Edit}
    
    * @private
    */
    trackFaces(onFinished: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/methods/NeuralFaceEffectTextureProvider-unregisterEffect.md Edit}
    
    * @private
    */
    unregisterEffect(effectName: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/properties/NeuralFaceEffectTextureProvider-faceTrackingMode.md Edit}
    
    * @private
    */
    faceTrackingMode: FaceTrackingMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/properties/NeuralFaceEffectTextureProvider-numberOfFacesToTrack.md Edit}
    
    * @private
    */
    numberOfFacesToTrack: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralFaceEffectTextureProvider/properties/NeuralFaceEffectTextureProvider-processingMode.md Edit}
    
    * @private
    */
    processingMode: ProcessingMode
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralSnapEffectTextureProvider/NeuralSnapEffectTextureProvider-description.md Edit}

* @private
*/
interface NeuralSnapEffectTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralSnapEffectTextureProvider/methods/NeuralSnapEffectTextureProvider-process.md Edit}
    
    * @private
    */
    process(onFinishedCallback: (success: boolean) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralSnapEffectTextureProvider/properties/NeuralSnapEffectTextureProvider-input.md Edit}
    
    * @private
    */
    input: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralSnapEffectTextureProvider/properties/NeuralSnapEffectTextureProvider-minSide.md Edit}
    
    * @private
    */
    minSide: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NeuralSnapEffectTextureProvider/properties/NeuralSnapEffectTextureProvider-model.md Edit}
    
    * @private
    */
    model: BinAsset
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NoiseReduction/NoiseReduction-description.md Edit}
*/
interface NoiseReduction extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NoiseReduction/methods/NoiseReduction-process.md Edit}
    */
    process(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NoiseReduction/properties/NoiseReduction-amount.md Edit}
    */
    amount: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NoiseReduction/properties/NoiseReduction-maxTensorSize.md Edit}
    
    * @readonly
    */
    maxTensorSize: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NoiseReductionBuilder/NoiseReductionBuilder-description.md Edit}
*/
interface NoiseReductionBuilder extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NoiseReductionBuilder/methods/NoiseReductionBuilder-build.md Edit}
    */
    build(): NoiseReduction
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/NoiseReductionBuilder/methods/NoiseReductionBuilder-setSampleRate.md Edit}
    */
    setSampleRate(sampleRate: number): NoiseReductionBuilder
    
}

/**
* Base class for configuring object tracking in the [ObjectTracking3D](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ObjectTracking3D) component.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Object3DAsset/Object3DAsset-description.md Edit}
*/
interface Object3DAsset extends Asset {
}

/**
* A reusable object hierarchy stored as a resource.
* Can be instantiated through script or brought into the scene through Lens Studio.
* For more information, see the [Prefabs](https://lensstudio.snapchat.com/lens-studio/references/guides/general/prefabs) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectPrefab/ObjectPrefab-description.md Edit}
*/
interface ObjectPrefab extends Asset {
    /**
    * Creates and returns a new instance of this object hierarchy underneath the specified parent object.
    * If parent is null, the object will be created with no parent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectPrefab/methods/ObjectPrefab-instantiate.md Edit}
    */
    instantiate(parent: SceneObject): SceneObject
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectPrefab/methods/ObjectPrefab-instantiateAsync.md Edit}
    */
    instantiateAsync(parent: SceneObject, onSuccess: (sceneObject: SceneObject) => void, onFailure: (error: string) => void, onProgress: (progress: number) => void): void
    
}
declare namespace ObjectPrefab {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectPrefab/methods/ObjectPrefab-createFromSceneObject.md Edit}
    
    * @private
    */
    export function createFromSceneObject(sceneObject: SceneObject): ObjectPrefab
    

}

/**
* Provides additional data for the tracked object. For example, with hand tracking, you can figure out whether the tracked hand is the left hand by accessing the `isLeft` property [true/false], as well as the probability of this data through the `isLeftProbability` property [0-1]. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectSpecificData/ObjectSpecificData-description.md Edit}
*/
interface ObjectSpecificData extends ScriptObject {
}

/**
* Used to track objects in the camera. Moves the local [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) to match the detected image.

* See the [Object Tracking guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/object-tracking) and the [Hand Gestures Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/body/hand-gestures) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/ObjectTracking-description.md Edit}
*/
interface ObjectTracking extends Component {
    /**
    * Returns true if the object is currently being tracked on camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/methods/ObjectTracking-isTracking.md Edit}
    */
    isTracking(): boolean
    
    /**
    * Registers a callback to be executed when the passed in descriptor ends for this tracked object. For example, the possible descriptors for hand tracking are: "victory", "open", "index_finger", "horns", "close", "thumb". 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/methods/ObjectTracking-registerDescriptorEnd.md Edit}
    */
    registerDescriptorEnd(descriptor: string, callback: (descriptor: string) => void): void
    
    /**
    * Registers a callback to be executed when the passed in descriptor starts for this tracked object. For example, the possible descriptors for hand tracking are: "victory", "open", "index_finger", "horns", "close", "thumb".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/methods/ObjectTracking-registerDescriptorStart.md Edit}
    */
    registerDescriptorStart(descriptor: string, callback: (descriptor: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/methods/ObjectTracking-setModelAsset.md Edit}
    
    * @deprecated
    
    * @private
    */
    setModelAsset(asset: BinAsset): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-attachIndex.md Edit}
    
    * @deprecated
    
    * @private
    */
    attachIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-attachLabel.md Edit}
    
    * @deprecated
    
    * @private
    */
    attachLabel: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-attachLandmarkLabel.md Edit}
    
    * @deprecated
    
    * @private
    */
    attachLandmarkLabel: string
    
    /**
    * If true, child objects of this Component's [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) will be disabled when the object is not being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-autoEnableWhenTracking.md Edit}
    */
    autoEnableWhenTracking: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-model.md Edit}
    
    * @private
    */
    model: ObjectTrackingAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-objectAttachmentPointLabel.md Edit}
    
    * @private
    */
    objectAttachmentPointLabel: string
    
    /**
    * The index of the object being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-objectIndex.md Edit}
    */
    objectIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-objectLabel.md Edit}
    
    * @private
    */
    objectLabel: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-objectRotationLabel.md Edit}
    
    * @private
    */
    objectRotationLabel: string
    
    /**
    * Gets additional data of the current object being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-objectSpecificData.md Edit}
    
    * @readonly
    */
    objectSpecificData: ObjectSpecificData
    
    /**
    * Function that gets called when the tracked object is found.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-onObjectFound.md Edit}
    */
    onObjectFound: () => void
    
    /**
    * Function that gets called when the tracked object is lost.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-onObjectLost.md Edit}
    */
    onObjectLost: () => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-rotationVectorLabel.md Edit}
    
    * @deprecated
    
    * @private
    */
    rotationVectorLabel: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking/properties/ObjectTracking-trackedObject.md Edit}
    
    * @unreleased
    */
    trackedObject: TrackedObject
    
}

/**
* Component used for tracking objects in 3D space.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/ObjectTracking3D-description.md Edit}
*/
interface ObjectTracking3D extends Component {
    /**
    * Attaches the SceneObject to the specified attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/methods/ObjectTracking3D-addAttachmentPoint.md Edit}
    */
    addAttachmentPoint(name: string, object: SceneObject): void
    
    /**
    * Creates a SceneObject which is attached to the specified attachment point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/methods/ObjectTracking3D-createAttachmentPoint.md Edit}
    */
    createAttachmentPoint(name: string): SceneObject
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/methods/ObjectTracking3D-getAnnotationBytes.md Edit}
    
    * @private
    */
    getAnnotationBytes(): Uint8Array
    
    /**
    * Returns all SceneObjects currently attached to the specified point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/methods/ObjectTracking3D-getAttachedObjects.md Edit}
    */
    getAttachedObjects(name: string): SceneObject[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/methods/ObjectTracking3D-getInternalBlendShapeWeights.md Edit}
    
    * @private
    */
    getInternalBlendShapeWeights(): Float32Array
    
    /**
    * Returns whether the specified attachment point is being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/methods/ObjectTracking3D-isAttachmentPointTracking.md Edit}
    */
    isAttachmentPointTracking(name: string): boolean
    
    /**
    * Returns whether this object is currently being tracked.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/methods/ObjectTracking3D-isTracking.md Edit}
    */
    isTracking(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/methods/ObjectTracking3D-removeAttachmentPoint.md Edit}
    */
    removeAttachmentPoint(object: SceneObject): void
    
    /**
    * Whether world rotation is applied or not.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-attachmentModeInheritRotation.md Edit}
    */
    attachmentModeInheritRotation: boolean
    
    /**
    * Whether world scale is applied or not.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-attachmentModeInheritScale.md Edit}
    */
    attachmentModeInheritScale: boolean
    
    /**
    * Index of the object to track, starting at 0. Useful when tracking multiple instances of the same type of object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-objectIndex.md Edit}
    */
    objectIndex: number
    
    /**
    * Function called when tracking is lost.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-onTrackingLost.md Edit}
    */
    onTrackingLost: () => void
    
    /**
    * Function called when tracking begins.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-onTrackingStarted.md Edit}
    */
    onTrackingStarted: () => void
    
    /**
    * When true, the attached root SceneObject's world position will be updated to match the tracked object's world position.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-trackPosition.md Edit}
    */
    trackPosition: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-trackedObject.md Edit}
    
    * @readonly
    
    * @private
    */
    trackedObject: TrackedObject
    
    /**
    * Asset containing tracking parameters, such as the tracking model and specific options.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-trackingAsset.md Edit}
    */
    trackingAsset: Object3DAsset
    
    /**
    * Strategy for updating attached SceneObjects.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D/properties/ObjectTracking3D-trackingMode.md Edit}
    */
    trackingMode: ObjectTracking3D.TrackingMode
    
}

declare namespace ObjectTracking3D {
    /**
    * Strategies for updating attached objects. Used by the [ObjectTracking3D](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ObjectTracking3D) component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D.TrackingMode/ObjectTracking3D.TrackingMode-description.md Edit}
    */
    enum TrackingMode {
        /**
        * Update the local transform's rotation and scale
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D.TrackingMode/properties/ObjectTracking3D.TrackingMode-ProportionsAndPose.md Edit}
        */
        ProportionsAndPose,
        /**
        * Update the local transform's rotation only
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D.TrackingMode/properties/ObjectTracking3D.TrackingMode-PoseOnly.md Edit}
        */
        PoseOnly,
        /**
        * Applies world position and world rotation by default, and optionally world scale. Additionally, the world rotation can be opt-out via the `attachmentModeInheritRotation` property
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTracking3D.TrackingMode/properties/ObjectTracking3D.TrackingMode-Attachment.md Edit}
        */
        Attachment
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingAsset/ObjectTrackingAsset-description.md Edit}

* @unreleased
*/
interface ObjectTrackingAsset extends BinAsset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingAsset/properties/ObjectTrackingAsset-eventLabels.md Edit}
    
    * @private
    */
    eventLabels: string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingAsset/properties/ObjectTrackingAsset-landmarkLabels.md Edit}
    
    * @private
    */
    landmarkLabels: string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingAsset/properties/ObjectTrackingAsset-maxNumberOfObjectsToTrack.md Edit}
    
    * @private
    */
    maxNumberOfObjectsToTrack: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingAsset/properties/ObjectTrackingAsset-objectLabels.md Edit}
    
    * @private
    */
    objectLabels: string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingAsset/properties/ObjectTrackingAsset-rotationLabels.md Edit}
    
    * @private
    */
    rotationLabels: string[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingEndEvent/ObjectTrackingEndEvent-description.md Edit}

* @private
*/
interface ObjectTrackingEndEvent extends ObjectTrackingEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingEvent/ObjectTrackingEvent-description.md Edit}

* @private
*/
interface ObjectTrackingEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingEvent/methods/ObjectTrackingEvent-setBinAssetModel.md Edit}
    
    * @private
    */
    setBinAssetModel(asset: BinAsset): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingEvent/properties/ObjectTrackingEvent-eventLabel.md Edit}
    
    * @private
    */
    eventLabel: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingEvent/properties/ObjectTrackingEvent-model.md Edit}
    
    * @private
    */
    model: ObjectTrackingAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingEvent/properties/ObjectTrackingEvent-objectIndex.md Edit}
    
    * @private
    */
    objectIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingEvent/properties/ObjectTrackingEvent-objectLabel.md Edit}
    
    * @private
    */
    objectLabel: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingMaskedTextureProvider/ObjectTrackingMaskedTextureProvider-description.md Edit}
*/
interface ObjectTrackingMaskedTextureProvider extends CropTextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingMaskedTextureProvider/properties/ObjectTrackingMaskedTextureProvider-maskLabel.md Edit}
    
    * @private
    */
    maskLabel: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingMaskedTextureProvider/properties/ObjectTrackingMaskedTextureProvider-model.md Edit}
    
    * @private
    */
    model: ObjectTrackingAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingMaskedTextureProvider/properties/ObjectTrackingMaskedTextureProvider-objectIndex.md Edit}
    */
    objectIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingMaskedTextureProvider/properties/ObjectTrackingMaskedTextureProvider-objectLabel.md Edit}
    
    * @private
    */
    objectLabel: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingNormalsTextureProvider/ObjectTrackingNormalsTextureProvider-description.md Edit}
*/
interface ObjectTrackingNormalsTextureProvider extends ObjectTrackingMaskedTextureProvider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingStartEvent/ObjectTrackingStartEvent-description.md Edit}

* @private
*/
interface ObjectTrackingStartEvent extends ObjectTrackingEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/ObjectTrackingSystem-description.md Edit}

* @private
*/
interface ObjectTrackingSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/methods/ObjectTrackingSystem-setModelAsset.md Edit}
    
    * @private
    */
    setModelAsset(asset: BinAsset): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/methods/ObjectTrackingSystem-startTrackingFromPoint.md Edit}
    
    * @private
    */
    startTrackingFromPoint(point: vec2): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/methods/ObjectTrackingSystem-startTrackingFromPointWithSize.md Edit}
    
    * @private
    */
    startTrackingFromPointWithSize(point: vec2, size: vec2): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/methods/ObjectTrackingSystem-stopTrackingObjectId.md Edit}
    
    * @private
    */
    stopTrackingObjectId(id: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/properties/ObjectTrackingSystem-activeTrackedObjects.md Edit}
    
    * @readonly
    
    * @private
    */
    activeTrackedObjects: TrackedObject[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/properties/ObjectTrackingSystem-config.md Edit}
    
    * @private
    */
    config: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/properties/ObjectTrackingSystem-onObjectFound.md Edit}
    
    * @private
    */
    onObjectFound: (object: TrackedObject) => void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingSystem/properties/ObjectTrackingSystem-onObjectLost.md Edit}
    
    * @private
    */
    onObjectLost: (object: TrackedObject) => void
    
}

/**
* Controls a segmentation texture and its placement using information provided by Object tracking.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ObjectTrackingTextureProvider/ObjectTrackingTextureProvider-description.md Edit}
*/
interface ObjectTrackingTextureProvider extends ObjectTrackingMaskedTextureProvider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OffsetAdjustType/OffsetAdjustType-description.md Edit}

* @private
*/
declare enum OffsetAdjustType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OffsetAdjustType/properties/OffsetAdjustType-LegacyNoAdjust.md Edit}
    
    * @private
    */
    LegacyNoAdjust,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OffsetAdjustType/properties/OffsetAdjustType-AdjustOffset.md Edit}
    
    * @private
    */
    AdjustOffset
}

/**
* Triggered when the Lens starts, earlier than all OnStart events. Also fires immediately on a newly instantiated or copied object.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OnAwakeEvent/OnAwakeEvent-description.md Edit}
*/
interface OnAwakeEvent extends SceneEvent {
}

/**
* Triggered when the associated ScriptComponent is destroyed while the lens is running.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OnDestroyEvent/OnDestroyEvent-description.md Edit}
*/
interface OnDestroyEvent extends SceneEvent {
}

/**
* Triggered when the `ScriptComponent` this event is bound to is disabled.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OnDisableEvent/OnDisableEvent-description.md Edit}
*/
interface OnDisableEvent extends SceneEvent {
}

/**
* Triggered when the `ScriptComponent` this event is bound to is enabled.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OnEnableEvent/OnEnableEvent-description.md Edit}
*/
interface OnEnableEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OnPauseEvent/OnPauseEvent-description.md Edit}

* @private
*/
interface OnPauseEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OnResumeEvent/OnResumeEvent-description.md Edit}

* @private
*/
interface OnResumeEvent extends SceneEvent {
}

/**
* Triggered when the Lens starts, after all OnAwakeEvents have triggered. Also triggers later on newly instantiated or copied objects.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OnStartEvent/OnStartEvent-description.md Edit}
*/
interface OnStartEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OnTimeStartEvent/OnTimeStartEvent-description.md Edit}
*/
interface OnTimeStartEvent extends SceneEvent {
}

/**
* Types of operating system that may be running on the device.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OS/OS-description.md Edit}
*/
declare enum OS {
    /**
    * Android device
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OS/properties/OS-Android.md Edit}
    */
    Android,
    /**
    * iOS device
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OS/properties/OS-iOS.md Edit}
    */
    iOS,
    /**
    * MacOS device
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OS/properties/OS-MacOS.md Edit}
    */
    MacOS,
    /**
    * Windows device
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OS/properties/OS-Windows.md Edit}
    */
    Windows,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OS/properties/OS-Linux.md Edit}
    */
    Linux,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OS/properties/OS-Hawaii.md Edit}
    */
    Hawaii
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutlineGlyph/OutlineGlyph-description.md Edit}

* @private
*/
interface OutlineGlyph extends Glyph {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutlineGlyph/methods/OutlineGlyph-getOutlinePath.md Edit}
    
    * @private
    */
    getOutlinePath(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutlineGlyph/methods/OutlineGlyph-getOutlineShapes.md Edit}
    
    * @private
    */
    getOutlineShapes(curveSegmentPrecision: number): GlyphOutlineShapes[]
    
}

/**
* Used in [Text's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `outlineSettings` property.
* Configures how text outlining will appear on a Text component.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutlineSettings/OutlineSettings-description.md Edit}
*/
interface OutlineSettings extends ScriptObject {
    /**
    * Whether outline is enabled on the Text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutlineSettings/properties/OutlineSettings-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * Settings for how the outline is drawn.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutlineSettings/properties/OutlineSettings-fill.md Edit}
    */
    fill: TextFill
    
    /**
    * The strength of the outline effect, ranging from 0.0 (no outline) to 1.0 (very strong outline).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutlineSettings/properties/OutlineSettings-size.md Edit}
    */
    size: number
    
}

/**
* Builds OutputPlaceholders for MLComponent.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputBuilder/OutputBuilder-description.md Edit}
*/
interface OutputBuilder extends ScriptObject {
    /**
    * Builds and returns a new OutputPlaceholder.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputBuilder/methods/OutputBuilder-build.md Edit}
    */
    build(): OutputPlaceholder
    
    /**
    * Sets the name of the OutputPlaceholder to be built.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputBuilder/methods/OutputBuilder-setName.md Edit}
    */
    setName(name: string): OutputBuilder
    
    /**
    * Sets the OutputMode of the OutputPlaceholder to be built.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputBuilder/methods/OutputBuilder-setOutputMode.md Edit}
    */
    setOutputMode(outputMode: MachineLearning.OutputMode): OutputBuilder
    
    /**
    * Sets the shape of the OutputPlaceholder to be built.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputBuilder/methods/OutputBuilder-setShape.md Edit}
    
    * @deprecated
    */
    setShape(shape: vec3): OutputBuilder
    
    /**
    * Sets the Transformer of the OutputPlaceholder to be built.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputBuilder/methods/OutputBuilder-setTransformer.md Edit}
    */
    setTransformer(transformer: Transformer): OutputBuilder
    
}

/**
* Provides output data from the neural network used by an MLComponent.
* For more information, see the [MLComponent Scripting](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/scripting-ml-component) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputPlaceholder/OutputPlaceholder-description.md Edit}
*/
interface OutputPlaceholder extends BasePlaceholder {
    /**
    * Output as a Float32Array. Usable when `mode` is set to `MachineLearning.OutputMode.Data`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputPlaceholder/properties/OutputPlaceholder-data.md Edit}
    
    * @readonly
    
    * @exposesUserData
    */
    data: Float32Array
    
    /**
    * Which type of data the output is provided as. For example, Texture or Data.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputPlaceholder/properties/OutputPlaceholder-mode.md Edit}
    */
    mode: MachineLearning.OutputMode
    
    /**
    * Output as a Texture. Usable when `mode` is set to `MachineLearning.OutputMode.Texture`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OutputPlaceholder/properties/OutputPlaceholder-texture.md Edit}
    
    * @readonly
    */
    texture: Texture
    
}

/**
* Exposes state generated for ColliderComponent overlap events.  See also: [ColliderComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), [OverlapEnterEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#OverlapEnterEventArgs), [OverlapExitEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#OverlapExitEventArgs), [OverlapStayEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#OverlapStayEventArgs).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Overlap/Overlap-description.md Edit}
*/
interface Overlap extends ScriptObject {
    /**
    * The collider which is overlapping.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Overlap/properties/Overlap-collider.md Edit}
    
    * @readonly
    */
    collider: ColliderComponent
    
    /**
    * ID of the overlap, unique for this overlap.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Overlap/properties/Overlap-id.md Edit}
    
    * @readonly
    */
    id: number
    
}

/**
* Args used for [ColliderComponent.onOverlapEnter](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered when the collider begins overlapping another object. Typically used for volume triggers.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapEnterEventArgs/OverlapEnterEventArgs-description.md Edit}
*/
interface OverlapEnterEventArgs extends ScriptObject {
    /**
    * Number of objects currently overlapping.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapEnterEventArgs/properties/OverlapEnterEventArgs-currentOverlapCount.md Edit}
    
    * @readonly
    */
    currentOverlapCount: number
    
    /**
    * Array of all current overlaps.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapEnterEventArgs/properties/OverlapEnterEventArgs-currentOverlaps.md Edit}
    
    * @readonly
    */
    currentOverlaps: Overlap[]
    
    /**
    * Structure containing information about the current overlap.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapEnterEventArgs/properties/OverlapEnterEventArgs-overlap.md Edit}
    
    * @readonly
    */
    overlap: Overlap
    
}

/**
* Args used for [ColliderComponent.onOverlapEnd](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered when the collider stops overlapping another object. Typically used for volume triggers.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapExitEventArgs/OverlapExitEventArgs-description.md Edit}
*/
interface OverlapExitEventArgs extends ScriptObject {
    /**
    * Number of objects currently overlapping.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapExitEventArgs/properties/OverlapExitEventArgs-currentOverlapCount.md Edit}
    
    * @readonly
    */
    currentOverlapCount: number
    
    /**
    * Array of all current overlaps.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapExitEventArgs/properties/OverlapExitEventArgs-currentOverlaps.md Edit}
    
    * @readonly
    */
    currentOverlaps: Overlap[]
    
    /**
    * Structure containing information about the current overlap.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapExitEventArgs/properties/OverlapExitEventArgs-overlap.md Edit}
    
    * @readonly
    */
    overlap: Overlap
    
}

/**
* Args used for [ColliderComponent.onOverlapStay](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered every frame while the collider continues overlapping another object. Typically used for volume triggers.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapStayEventArgs/OverlapStayEventArgs-description.md Edit}
*/
interface OverlapStayEventArgs extends ScriptObject {
    /**
    * Number of objects currently overlapping.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapStayEventArgs/properties/OverlapStayEventArgs-currentOverlapCount.md Edit}
    
    * @readonly
    */
    currentOverlapCount: number
    
    /**
    * Array of all current overlaps.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapStayEventArgs/properties/OverlapStayEventArgs-currentOverlaps.md Edit}
    
    * @readonly
    */
    currentOverlaps: Overlap[]
    
    /**
    * Structure containing information about the current overlap.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/OverlapStayEventArgs/properties/OverlapStayEventArgs-overlap.md Edit}
    
    * @readonly
    */
    overlap: Overlap
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PalmTapDownArgs/PalmTapDownArgs-description.md Edit}

* @wearableOnly
*/
interface PalmTapDownArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PalmTapDownArgs/properties/PalmTapDownArgs-confidence.md Edit}
    
    * @readonly
    */
    confidence: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PalmTapUpArgs/PalmTapUpArgs-description.md Edit}

* @wearableOnly
*/
interface PalmTapUpArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PalmTapUpArgs/properties/PalmTapUpArgs-confidence.md Edit}
    
    * @readonly
    */
    confidence: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanEndEventArgs/PanEndEventArgs-description.md Edit}

* @private
*/
interface PanEndEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanEndEventArgs/properties/PanEndEventArgs-touches.md Edit}
    
    * @readonly
    
    * @private
    */
    touches: vec2[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanEndEventArgs/properties/PanEndEventArgs-translation.md Edit}
    
    * @readonly
    
    * @private
    */
    translation: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureEndEvent/PanGestureEndEvent-description.md Edit}

* @private
*/
interface PanGestureEndEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureEndEvent/methods/PanGestureEndEvent-getTouches.md Edit}
    
    * @private
    */
    getTouches(): vec2[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureEndEvent/methods/PanGestureEndEvent-getTranslation.md Edit}
    
    * @private
    */
    getTranslation(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureMoveEvent/PanGestureMoveEvent-description.md Edit}

* @private
*/
interface PanGestureMoveEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureMoveEvent/methods/PanGestureMoveEvent-getTouches.md Edit}
    
    * @private
    */
    getTouches(): vec2[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureMoveEvent/methods/PanGestureMoveEvent-getTranslation.md Edit}
    
    * @private
    */
    getTranslation(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureStartEvent/PanGestureStartEvent-description.md Edit}

* @private
*/
interface PanGestureStartEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureStartEvent/methods/PanGestureStartEvent-getTouches.md Edit}
    
    * @private
    */
    getTouches(): vec2[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanGestureStartEvent/methods/PanGestureStartEvent-getTranslation.md Edit}
    
    * @private
    */
    getTranslation(): vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanMoveEventArgs/PanMoveEventArgs-description.md Edit}

* @private
*/
interface PanMoveEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanMoveEventArgs/properties/PanMoveEventArgs-touches.md Edit}
    
    * @readonly
    
    * @private
    */
    touches: vec2[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanMoveEventArgs/properties/PanMoveEventArgs-translation.md Edit}
    
    * @readonly
    
    * @private
    */
    translation: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanStartEventArgs/PanStartEventArgs-description.md Edit}

* @private
*/
interface PanStartEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanStartEventArgs/properties/PanStartEventArgs-touches.md Edit}
    
    * @readonly
    
    * @private
    */
    touches: vec2[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PanStartEventArgs/properties/PanStartEventArgs-translation.md Edit}
    
    * @readonly
    
    * @private
    */
    translation: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesAsset/ParticlesAsset-description.md Edit}

* @private
*/
interface ParticlesAsset extends Asset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/ParticlesVisual-description.md Edit}

* @private
*/
interface ParticlesVisual extends BaseMeshVisual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/methods/ParticlesVisual-pause.md Edit}
    
    * @private
    */
    pause(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/methods/ParticlesVisual-play.md Edit}
    
    * @private
    */
    play(reset: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/methods/ParticlesVisual-resumeEmitting.md Edit}
    
    * @private
    */
    resumeEmitting(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/methods/ParticlesVisual-stop.md Edit}
    
    * @private
    */
    stop(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/methods/ParticlesVisual-stopEmitting.md Edit}
    
    * @private
    */
    stopEmitting(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/properties/ParticlesVisual-emitterName.md Edit}
    
    * @private
    */
    emitterName: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/properties/ParticlesVisual-forceDepthTest.md Edit}
    
    * @private
    */
    forceDepthTest: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/properties/ParticlesVisual-forceLooped.md Edit}
    
    * @private
    */
    forceLooped: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/properties/ParticlesVisual-local.md Edit}
    
    * @private
    */
    local: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ParticlesVisual/properties/ParticlesVisual-particlesAsset.md Edit}
    
    * @private
    */
    particlesAsset: ParticlesAsset
    
}

/**
* Controls how a mesh will get rendered. Each Pass acts as an interface for the shader it's associated with.
* Any properties on a Pass's shader will automatically become properties on that Pass.
* For example, if the shader defines a variable named `baseColor`, a script would be able to access that property as `material.mainPass.baseColor`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/Pass-description.md Edit}
*/
interface Pass extends ScriptObject {
    [index:string]: any
    
    baseTex: Texture
    
    baseColor: vec4
    
    /**
    * Returns a copy of the Pass.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/methods/Pass-clone.md Edit}
    
    * @private
    */
    clone(): Pass
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/methods/Pass-createUniformsBuffer.md Edit}
    
    * @private
    */
    createUniformsBuffer(uniforms: string[]): PassUniformsBuffer
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/methods/Pass-deepClone.md Edit}
    
    * @private
    */
    deepClone(): Pass
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/methods/Pass-updateUniformsFromBuffer.md Edit}
    
    * @private
    */
    updateUniformsFromBuffer(uniformsBuffer: PassUniformsBuffer): void
    
    /**
    * The blend mode used for rendering. Possible values:
    
    * | BlendMode                     | Value | Expression                    |
    * | ----------------------------- | ----- | ----------------------------- |
    * | Normal                        | 0     | SrcAlpha, OneMinusSrcAlpha    |
    * | MultiplyLegacy [DEPRECATED]	| 1	    | DstColor, OneMinusSrcAlpha    |
    * | AddLegacy [DEPRECATED]        | 2     | One, One                      |
    * | Screen	                    | 3	    | One, OneMinusSrcColor         |
    * | PremultipliedAlpha            | 4	    | One, OneMinusSrcAlpha         |
    * | AlphaToCoverage               | 5	    | Blend Disabled                |
    * | Disabled                      | 6	    | Blend Disabled                |
    * | Add                           | 7	    | SrcAlpha, One                 |
    * | AlphaTest                     | 8	    | Blend Disabled                |
    * | ColoredGlass                  | 9	    | Blend Disabled                |
    * | Multiply                      | 10    | DstColor, Zero                |
    * | Min                           | 11    | One, One                      |
    * | Max                           | 12    | One, One                      |
    
    * ```
    * // Sets the blend mode of the main pass for a material to Screen
    * //@input Asset.Material material
    
    * script.material.mainPass.blendMode = 3;
    * ```
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-blendMode.md Edit}
    */
    blendMode: BlendMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-blendState.md Edit}
    
    * @private
    */
    blendState: BlendState
    
    /**
    * Controls the masking of color channels with a vec4b representing each channel with a boolean.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-colorMask.md Edit}
    */
    colorMask: vec4b
    
    /**
    * The cull mode used for rendering.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-cullMode.md Edit}
    */
    cullMode: CullMode
    
    /**
    * Enables depth-sorting.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-depthTest.md Edit}
    */
    depthTest: boolean
    
    /**
    * Enables writing pixels to the depth buffer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-depthWrite.md Edit}
    */
    depthWrite: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-frustumCull.md Edit}
    
    * @deprecated
    
    * @private
    */
    frustumCull: boolean
    
    /**
    * Set max corner of aabb. It only applys when user selects FrustumCullMode.UserDefinedAABB
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-frustumCullMax.md Edit}
    */
    frustumCullMax: vec3
    
    /**
    * Set min corner of aabb. It only applys when user selects FrustumCullMode.UserDefinedAABB
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-frustumCullMin.md Edit}
    */
    frustumCullMin: vec3
    
    /**
    * Mode for setting frustum culling on Pass
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-frustumCullMode.md Edit}
    */
    frustumCullMode: FrustumCullMode
    
    /**
    * Extend render object's aabb to (1 + value). Only applys when user select FrustumCullMode.Extend
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-frustumCullPad.md Edit}
    */
    frustumCullPad: number
    
    /**
    * Number of times the pass will be rendered. Useful with the Instance ID node in Material Editor.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-instanceCount.md Edit}
    */
    instanceCount: number
    
    /**
    * Line width used for rendering.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-lineWidth.md Edit}
    */
    lineWidth: number
    
    /**
    * The name of the Pass.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-name.md Edit}
    */
    name: string
    
    /**
    * Changes the position that each polygon gets drawn.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-polygonOffset.md Edit}
    */
    polygonOffset: vec2
    
    /**
    * Returns texture samplers used by this pass to set filtering and wrap modes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-samplers.md Edit}
    
    * @readonly
    */
    samplers: SamplerWrappers
    
    /**
    * The stencil test state for Pass.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-stencilState.md Edit}
    */
    stencilState: StencilState
    
    /**
    * Whether the material renders on both sides of a mesh face.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-twoSided.md Edit}
    */
    twoSided: boolean
    
    /**
    * Enables writing pixels to the frame.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Pass/properties/Pass-writesColor.md Edit}
    
    * @deprecated
    */
    writesColor: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassUniformsBuffer/PassUniformsBuffer-description.md Edit}

* @private
*/
interface PassUniformsBuffer extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassUniformsBuffer/properties/PassUniformsBuffer-data.md Edit}
    
    * @readonly
    
    * @private
    */
    data: Float32Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassUniformsBuffer/properties/PassUniformsBuffer-uniformNames.md Edit}
    
    * @readonly
    
    * @private
    */
    uniformNames: string[]
    
}

/**
* Similar to [Pass](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Pass), except used by [VFX Assets](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#VFXAsset).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/PassWrapper-description.md Edit}
*/
interface PassWrapper extends ScriptObject {
    /**
    * The blend mode used for rendering. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-blendMode.md Edit}
    */
    blendMode: BlendMode
    
    /**
    * Controls the masking of color channels with a vec4b representing each channel with a boolean.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-colorMask.md Edit}
    */
    colorMask: vec4b
    
    /**
    * The cull mode used for rendering.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-cullMode.md Edit}
    */
    cullMode: CullMode
    
    /**
    * Enables depth-sorting.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-depthTest.md Edit}
    */
    depthTest: boolean
    
    /**
    * Enables writing pixels to the depth buffer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-depthWrite.md Edit}
    */
    depthWrite: boolean
    
    /**
    * Number of times the pass will be rendered. Useful with the Instance ID node in Material Editor.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-instanceCount.md Edit}
    */
    instanceCount: number
    
    /**
    * Line width used for rendering.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-lineWidth.md Edit}
    */
    lineWidth: number
    
    /**
    * The name of the pass wrapper.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-name.md Edit}
    */
    name: string
    
    /**
    * Changes the position that each polygon gets drawn.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-polygonOffset.md Edit}
    */
    polygonOffset: vec2
    
    /**
    * A proxy class that provides the access to the properties of the passes under the hood of [VFX Asset](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#VFXAsset/). PassWrapper.samplers property which is tied to the Pass.samplers one. For example:  
    * ```js
    * pass.samplers.texture_name.Fitering = FilteringMode.Nearest
    * ```
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-samplers.md Edit}
    
    * @readonly
    */
    samplers: SamplerWrappers
    
    /**
    * Whether the material renders on both sides of a mesh face.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrapper/properties/PassWrapper-twoSided.md Edit}
    */
    twoSided: boolean
    
}

/**
* Allows for retrieval of a collection of Pass objects used by VFXAsset

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrappers/PassWrappers-description.md Edit}
*/
interface PassWrappers extends ScriptObject {
    /**
    * Returns an array of Pass objects
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PassWrappers/properties/PassWrappers-allPasses.md Edit}
    
    * @readonly
    */
    allPasses: PassWrapper[]
    
}

/**
* Provides information about the device running the Lens. Accessible through `global.deviceInfoSystem.performanceIndexes`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PerformanceIndexes/PerformanceIndexes-description.md Edit}

* @unreleased
*/
interface PerformanceIndexes extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PerformanceIndexes/properties/PerformanceIndexes-gpu.md Edit}
    
    * @readonly
    
    * @private
    */
    gpu: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PerformanceIndexes/properties/PerformanceIndexes-ml.md Edit}
    
    * @readonly
    */
    ml: number
    
}

/**
* Allows data to be stored and retrieved between Lens sessions.
* In other words, data can be saved on device and loaded back in the next time the Lens is opened.
* Can be accessed with `global.persistentStorageSystem`.

* See the [Persistent Storage guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/persistent-storage) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersistentStorageSystem/PersistentStorageSystem-description.md Edit}
*/
interface PersistentStorageSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersistentStorageSystem/methods/PersistentStorageSystem-getPersistentStore.md Edit}
    
    * @deprecated
    
    * @private
    */
    getPersistentStore(callback: (store: GeneralDataStore) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersistentStorageSystem/methods/PersistentStorageSystem-getPersistentStoreIfLoaded.md Edit}
    
    * @deprecated
    
    * @private
    */
    getPersistentStoreIfLoaded(): GeneralDataStore
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersistentStorageSystem/methods/PersistentStorageSystem-setPersistentStore.md Edit}
    
    * @deprecated
    
    * @private
    */
    setPersistentStore(store: GeneralDataStore): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersistentStorageSystem/properties/PersistentStorageSystem-sessionStore.md Edit}
    
    * @private
    */
    sessionStore: DataStoreWithScene
    
    /**
    * The `GeneralDataStore` object used to store and retrieve data.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersistentStorageSystem/properties/PersistentStorageSystem-store.md Edit}
    */
    store: GeneralDataStore
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersonInstanceAsset/PersonInstanceAsset-description.md Edit}

* @private
*/
interface PersonInstanceAsset extends TrackingScopeAsset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersonInstanceAsset/properties/PersonInstanceAsset-annotatorOptionsAsset.md Edit}
    
    * @private
    */
    annotatorOptionsAsset: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersonInstanceAsset/properties/PersonInstanceAsset-bodyModel.md Edit}
    
    * @private
    */
    bodyModel: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PersonInstanceAsset/properties/PersonInstanceAsset-personIndex.md Edit}
    
    * @private
    */
    personIndex: number
    
}

/**
* Namespace containing physics classes and static physics methods.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics/Physics-description.md Edit}
*/
interface Physics {
}
declare namespace Physics {
    /**
    * Create an intersection probe that spans all worlds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics/methods/Physics-createGlobalProbe.md Edit}
    */
    export function createGlobalProbe(): Probe
    
    /**
    * Create an intersection probe for the implicit root world.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics/methods/Physics-createRootProbe.md Edit}
    */
    export function createRootProbe(): Probe
    
    /**
    * Get settings that apply to the implicit root world.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics/methods/Physics-getRootWorldSettings.md Edit}
    */
    export function getRootWorldSettings(): Physics.WorldSettingsAsset
    

}

declare namespace Physics {
    /**
    * Namespace containing static helper methods for [Constraints](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Constraint).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.Constraint/Physics.Constraint-description.md Edit}
    */
    interface Constraint {
    }

}
declare namespace Physics {
    namespace Constraint {
        /**
        * Create a constraint of the given type, with default settings.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.Constraint/methods/Physics.Constraint-create.md Edit}
        */
        export function create(type: Physics.ConstraintType): Constraint
        
    
    }

}

declare namespace Physics {
    /**
    * Constraint type used by a [Constraint](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Contraint).   See also: [Physics.Constraint.create()](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#PhysicsConstraint), [ConstraintComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ConstraintComponent).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ConstraintType/Physics.ConstraintType-description.md Edit}
    */
    enum ConstraintType {
        /**
        * Constrains colliders to fixed rotation and position. See [FixedConstraint](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#FixedConstraint).
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ConstraintType/properties/Physics.ConstraintType-Fixed.md Edit}
        */
        Fixed,
        /**
        * Constrains colliders to rotate around a point. See [PointConstraint](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#PointConstraint).
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ConstraintType/properties/Physics.ConstraintType-Point.md Edit}
        */
        Point,
        /**
        * Constrains colliders to rotate around a single axis. See [HingeConstraint](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#HingeConstraint).
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ConstraintType/properties/Physics.ConstraintType-Hinge.md Edit}
        */
        Hinge
    }

}

declare namespace Physics {
    /**
    * Script interface for applying collision filtering to colliders and ray/shape-casts.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.Filter/Physics.Filter-description.md Edit}
    */
    interface Filter {
    }

}
declare namespace Physics {
    namespace Filter {
        /**
        * Create an instance with default settings.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.Filter/methods/Physics.Filter-create.md Edit}
        */
        export function create(): Filter
        
    
    }

}

declare namespace Physics {
    /**
    * Type of force to use when applying force or torque to a [BodyComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BodyComponent).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ForceMode/Physics.ForceMode-description.md Edit}
    */
    enum ForceMode {
        /**
        * Continuous force (kg*cm/s^2), used for cases where force is applied over multiple frames.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ForceMode/properties/Physics.ForceMode-Force.md Edit}
        */
        Force,
        /**
        * Instantaneous force impulse (kg*cm/s).
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ForceMode/properties/Physics.ForceMode-Impulse.md Edit}
        */
        Impulse,
        /**
        * Continuous acceleration (cm/s^2), applied without respect to mass, used for cases where force is applied over multiple frames.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ForceMode/properties/Physics.ForceMode-Acceleration.md Edit}
        */
        Acceleration,
        /**
        * Instantaneous change in velocity (cm/s), applied without respect to mass.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.ForceMode/properties/Physics.ForceMode-VelocityChange.md Edit}
        */
        VelocityChange
    }

}

declare namespace Physics {
    /**
    * Stores reusable settings uniform for a world (such as gravity magnitude and direction). See also: [WorldComponent.worldSettings](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#WorldComponent).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/Physics.WorldSettingsAsset-description.md Edit}
    */
    interface WorldSettingsAsset extends Asset {
        /**
        * Given 2 layer numbers A and B, returns true if colliders in A collide with colliders in B, and vice-versa. The layer numbers correspond to those used to form a `LayerSet` with `LayerSet.fromNumber()`. The relationship is symmetric, so if collision is disabled for (A, B), it is also disabled for (B, A). This accesses a flag in the "Layer Collision Matrix", as viewable in Studio. Note however that layer numbers are not the same as layer IDs. To get the number of a Studio-created layer, use `LayerSet.numbers`.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/methods/Physics.WorldSettingsAsset-getLayersCollidable.md Edit}
        */
        getLayersCollidable(layerNumberA: number, layerNumberB: number): boolean
        
        /**
        * Resets the layer collision matrix such that all layer pairs are enabled.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/methods/Physics.WorldSettingsAsset-resetLayerCollisionMatrix.md Edit}
        */
        resetLayerCollisionMatrix(): void
        
        /**
        * Given 2 layer numbers A and B, enables or disables collision between colliders in those layers. The layer numbers correspond to those used to form a `LayerSet` with `LayerSet.fromNumber()`. The relationship is symmetric, so if collision is disabled for (A, B), it is also disabled for (B, A). This accesses a flag in the "Layer Collision Matrix", as viewable in Studio. Note however that layer numbers are not the same as layer IDs. To get the number of a Studio-created layer, use LayerSet.numbers.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/methods/Physics.WorldSettingsAsset-setLayersCollidable.md Edit}
        */
        setLayersCollidable(layerNumberA: number, layerNumberB: number, enable: boolean): void
        
        /**
        * Speed limit, in world space cm/s. Set to 0 to disable this.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/properties/Physics.WorldSettingsAsset-absoluteSpeedLimit.md Edit}
        */
        absoluteSpeedLimit: number
        
        /**
        * Default Filter used for colliders in the world.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/properties/Physics.WorldSettingsAsset-defaultFilter.md Edit}
        */
        defaultFilter: Filter
        
        /**
        * Default Matter used for colliders in the world. This is used for a collider when its matter field is unset.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/properties/Physics.WorldSettingsAsset-defaultMatter.md Edit}
        */
        defaultMatter: Matter
        
        /**
        * Gravity acceleration vector (cm/s^2). Defaults to real-world gravity of 980 cm/s^2, downward.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/properties/Physics.WorldSettingsAsset-gravity.md Edit}
        */
        gravity: vec3
        
        /**
        * Speed limit, relative to shape size. Set to 0 to disable this. The effective world space speed limit is scaled by simulation rate, so this is the maximum distance the object can move in a single step. The default of 0.5 only allows the object to move by half its size in a single step, which should prevent tunneling.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/properties/Physics.WorldSettingsAsset-relativeSpeedLimit.md Edit}
        */
        relativeSpeedLimit: number
        
        /**
        * Simulation rate, in steps per second. Larger values improve simulation accuracy at the cost of performance. This is limited to intervals of 30hz, in the range 30-240hz, with 60hz as the default.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/properties/Physics.WorldSettingsAsset-simulationRate.md Edit}
        */
        simulationRate: number
        
        /**
        * Slow down simulation step frequency (higher values are slower). Limited to >=1.0. This achieves a slow-motion effect by reducing the number of simulation steps each frame. Useful for debugging as large values will cause noticeably discrete steps.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/properties/Physics.WorldSettingsAsset-slowDownStep.md Edit}
        */
        slowDownStep: number
        
        /**
        * Slow down simulation time (higher values are slower). This achieves a slow-motion effect by scaling simulation time. Unlike slowDownStep, it will maintain smooth motion, but has accuracy problems at large scales.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/properties/Physics.WorldSettingsAsset-slowDownTime.md Edit}
        */
        slowDownTime: number
        
    }

}
declare namespace Physics {
    namespace WorldSettingsAsset {
        /**
        * Create an instance with default settings.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Physics.WorldSettingsAsset/methods/Physics.WorldSettingsAsset-create.md Edit}
        */
        export function create(): Physics.WorldSettingsAsset
        
    
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchDownArgs/PinchDownArgs-description.md Edit}

* @wearableOnly
*/
interface PinchDownArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchDownArgs/properties/PinchDownArgs-confidence.md Edit}
    
    * @readonly
    
    * @private
    */
    confidence: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchDownArgs/properties/PinchDownArgs-palmOrientation.md Edit}
    
    * @readonly
    */
    palmOrientation: vec3
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchEndEventArgs/PinchEndEventArgs-description.md Edit}

* @private
*/
interface PinchEndEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchEndEventArgs/properties/PinchEndEventArgs-scale.md Edit}
    
    * @readonly
    
    * @private
    */
    scale: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchEndEventArgs/properties/PinchEndEventArgs-touches.md Edit}
    
    * @readonly
    
    * @private
    */
    touches: vec2[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureEndEvent/PinchGestureEndEvent-description.md Edit}

* @unreleased

* @private
*/
interface PinchGestureEndEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureEndEvent/methods/PinchGestureEndEvent-getScale.md Edit}
    
    * @private
    */
    getScale(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureEndEvent/methods/PinchGestureEndEvent-getTouches.md Edit}
    
    * @private
    */
    getTouches(): vec2[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureMoveEvent/PinchGestureMoveEvent-description.md Edit}

* @unreleased

* @private
*/
interface PinchGestureMoveEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureMoveEvent/methods/PinchGestureMoveEvent-getScale.md Edit}
    
    * @private
    */
    getScale(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureMoveEvent/methods/PinchGestureMoveEvent-getTouches.md Edit}
    
    * @private
    */
    getTouches(): vec2[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureStartEvent/PinchGestureStartEvent-description.md Edit}

* @private
*/
interface PinchGestureStartEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureStartEvent/methods/PinchGestureStartEvent-getScale.md Edit}
    
    * @private
    */
    getScale(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchGestureStartEvent/methods/PinchGestureStartEvent-getTouches.md Edit}
    
    * @private
    */
    getTouches(): vec2[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchMoveEventArgs/PinchMoveEventArgs-description.md Edit}

* @private
*/
interface PinchMoveEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchMoveEventArgs/properties/PinchMoveEventArgs-scale.md Edit}
    
    * @readonly
    
    * @private
    */
    scale: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchMoveEventArgs/properties/PinchMoveEventArgs-touches.md Edit}
    
    * @readonly
    
    * @private
    */
    touches: vec2[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchStartEventArgs/PinchStartEventArgs-description.md Edit}

* @private
*/
interface PinchStartEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchStartEventArgs/properties/PinchStartEventArgs-scale.md Edit}
    
    * @readonly
    
    * @private
    */
    scale: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchStartEventArgs/properties/PinchStartEventArgs-touches.md Edit}
    
    * @readonly
    
    * @private
    */
    touches: vec2[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchStrengthArgs/PinchStrengthArgs-description.md Edit}

* @wearableOnly
*/
interface PinchStrengthArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchStrengthArgs/properties/PinchStrengthArgs-strength.md Edit}
    
    * @readonly
    */
    strength: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchUpArgs/PinchUpArgs-description.md Edit}

* @wearableOnly
*/
interface PinchUpArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchUpArgs/properties/PinchUpArgs-palmOrientation.md Edit}
    
    * @readonly
    */
    palmOrientation: vec3
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchVisibilityArgs/PinchVisibilityArgs-description.md Edit}

* @wearableOnly

* @private
*/
interface PinchVisibilityArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinchVisibilityArgs/properties/PinchVisibilityArgs-visibility.md Edit}
    
    * @readonly
    
    * @private
    */
    visibility: number
    
}

/**
* Attaches the SceneObject to the mesh surface of a different SceneObject.
* See the [Pin To Mesh](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/3d/pin-to-mesh#adding-a-pin-to-mesh-component) guide for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/PinToMeshComponent-description.md Edit}
*/
interface PinToMeshComponent extends Component {
    /**
    * The position offset to apply.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-offsetPosition.md Edit}
    */
    offsetPosition: vec3
    
    /**
    * The euler angle offset to apply. Only has an effect when `orientation` is set to `PositionAndDirection`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-offsetRotation.md Edit}
    */
    offsetRotation: vec3
    
    /**
    * The orientation type to use.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-orientation.md Edit}
    */
    orientation: PinToMeshComponent.Orientation
    
    /**
    * The UV coordinates on the target mesh to attach to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-pinUV.md Edit}
    */
    pinUV: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-preferedTriangle.md Edit}
    
    * @deprecated
    */
    preferedTriangle: number
    
    /**
    * The preferred triangle index to attach to when multiple triangles contain the desired UV coordinate.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-preferredTriangle.md Edit}
    */
    preferredTriangle: number
    
    /**
    * Index of the UV coordinate set to use for pinning.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-preferredUVLayerIndex.md Edit}
    */
    preferredUVLayerIndex: number
    
    /**
    * The target mesh to attach to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-target.md Edit}
    */
    target: BaseMeshVisual
    
    /**
    * If enabled, interpolated vertex normals will be used when calculating the attachment position.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent/properties/PinToMeshComponent-useInterpolatedVertexNormal.md Edit}
    */
    useInterpolatedVertexNormal: boolean
    
}

declare namespace PinToMeshComponent {
    /**
    * Used with [PinToMeshComponent.orientation](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#PinToMeshComponent).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent.Orientation/PinToMeshComponent.Orientation-description.md Edit}
    */
    enum Orientation {
        /**
        * Pins only the position. Rotation is independent from the target mesh.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent.Orientation/properties/PinToMeshComponent.Orientation-OnlyPosition.md Edit}
        */
        OnlyPosition,
        /**
        * Pins both the position and direction. The normal of the target mesh is the Y axis.
        * The U texture coordinate of the target mesh's UV is the X axis.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent.Orientation/properties/PinToMeshComponent.Orientation-PositionAndDirection.md Edit}
        */
        PositionAndDirection,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PinToMeshComponent.Orientation/properties/PinToMeshComponent.Orientation-TargetNYUX.md Edit}
        */
        TargetNYUX
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PitchShifter/PitchShifter-description.md Edit}
*/
interface PitchShifter extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PitchShifter/methods/PitchShifter-process.md Edit}
    */
    process(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PitchShifter/properties/PitchShifter-maxTensorSize.md Edit}
    
    * @readonly
    */
    maxTensorSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PitchShifter/properties/PitchShifter-pitch.md Edit}
    */
    pitch: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PitchShifterBuilder/PitchShifterBuilder-description.md Edit}
*/
interface PitchShifterBuilder extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PitchShifterBuilder/methods/PitchShifterBuilder-build.md Edit}
    */
    build(): PitchShifter
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PitchShifterBuilder/methods/PitchShifterBuilder-setSampleRate.md Edit}
    */
    setSampleRate(sampleRate: number): PitchShifterBuilder
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformMaskType/PlatformMaskType-description.md Edit}

* @private
*/
declare enum PlatformMaskType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformMaskType/properties/PlatformMaskType-Portrait.md Edit}
    
    * @private
    */
    Portrait
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformSegmentationTextureProvider/PlatformSegmentationTextureProvider-description.md Edit}

* @private
*/
interface PlatformSegmentationTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformSegmentationTextureProvider/methods/PlatformSegmentationTextureProvider-getMaskPercentage.md Edit}
    
    * @private
    */
    getMaskPercentage(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformSegmentationTextureProvider/methods/PlatformSegmentationTextureProvider-getSupportedMasks.md Edit}
    
    * @private
    */
    getSupportedMasks(): PlatformMaskType[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformSegmentationTextureProvider/methods/PlatformSegmentationTextureProvider-isMaskAvailable.md Edit}
    
    * @private
    */
    isMaskAvailable(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformSegmentationTextureProvider/properties/PlatformSegmentationTextureProvider-binarizeThreshold.md Edit}
    
    * @private
    */
    binarizeThreshold: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformSegmentationTextureProvider/properties/PlatformSegmentationTextureProvider-cropMaskToCameraFrame.md Edit}
    
    * @private
    */
    cropMaskToCameraFrame: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlatformSegmentationTextureProvider/properties/PlatformSegmentationTextureProvider-selectedMask.md Edit}
    
    * @private
    */
    selectedMask: PlatformMaskType
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlaybackMode/PlaybackMode-description.md Edit}
*/
declare enum PlaybackMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlaybackMode/properties/PlaybackMode-Single.md Edit}
    */
    Single,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlaybackMode/properties/PlaybackMode-Loop.md Edit}
    */
    Loop,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PlaybackMode/properties/PlaybackMode-PingPong.md Edit}
    */
    PingPong
}

/**
* Represents 3D locations of stationary features in the environment. The resulting cloud of points provides a sparse description of the 3D environment.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PointCloud/PointCloud-description.md Edit}
*/
interface PointCloud extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PointCloud/properties/PointCloud-confidences.md Edit}
    
    * @readonly
    
    * @experimental
    */
    confidences: number[]
    
    /**
    * A list of numeric identifiers for each unique 3D point in the cloud.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PointCloud/properties/PointCloud-ids.md Edit}
    
    * @readonly
    */
    ids: number[]
    
    /**
    * A list of vec3 objects representing the 3D position of every point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PointCloud/properties/PointCloud-positions.md Edit}
    
    * @readonly
    */
    positions: vec3[]
    
}

/**
* A type of constraint that only allows rotation.  See also: [ConstraintComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ConstraintComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PointConstraint/PointConstraint-description.md Edit}
*/
interface PointConstraint extends Constraint {
}

/**
* An Audio Component effect that allows the Lens to simulate sound based on the direction of the Audio Listener relative to the Audio Component.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PositionEffect/PositionEffect-description.md Edit}
*/
interface PositionEffect extends ScriptObject {
    /**
    * If enabled, the position effect will be applied.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PositionEffect/properties/PositionEffect-enabled.md Edit}
    */
    enabled: boolean
    
}

/**
* Uses an input color lookup table image to adjust the coloring of the Lens.
* See the [Color Correction Post Effect guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/graphics/materials/post-effects#color-correction) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PostEffectVisual/PostEffectVisual-description.md Edit}
*/
interface PostEffectVisual extends MaterialMeshVisual {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Prefab/Prefab-description.md Edit}

* @unreleased
*/
interface Prefab extends Asset {
}

/**
* Controls an instance of a prefab asset.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PrefabInstantiator/PrefabInstantiator-description.md Edit}

* @private
*/
interface PrefabInstantiator extends Component {
    /**
    * Creates and instantiates a new prefab.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PrefabInstantiator/methods/PrefabInstantiator-setPrefab.md Edit}
    
    * @private
    */
    setPrefab(value: Prefab): void
    
}

/**
* Performs collision tests (such as ray casts) in one or more world. See [Physics.createGlobalProbe()](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#Physics), [Physics.createRootProbe()](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#Physics), [WorldComponent.createProbe()](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#WorldComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/Probe-description.md Edit}
*/
interface Probe extends ScriptObject {
    /**
    * Returns (via callback) the nearest intersection in any world. If there is no hit, the callback is called with a null hit argument.  Ray casts are performed after simulation update, which occurs after script Update but prior to LateUpdate.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/methods/Probe-rayCast.md Edit}
    */
    rayCast(start: vec3, end: vec3, hitCB: (hit: RayCastHit) => void): void
    
    /**
    * Returns (via callback) all intersections in every world. The callback receives an array of hits, in order of nearest to farthest. If there were no hits, the array length is 0.  Ray casts are performed after simulation update, which occurs after script Update but prior to LateUpdate.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/methods/Probe-rayCastAll.md Edit}
    */
    rayCastAll(start: vec3, end: vec3, hitCB: (hit: RayCastHit[]) => void): void
    
    /**
    * Like rayCast(), but sweeps a sphere from start to end positions. This is shorthand for calling shapeCast() with a SphereShape. Returns (via callback) the nearest intersection. If there is no hit, the callback is called with a null hit argument. Ray casts are performed after simulation update, which occurs after script Update but prior to LateUpdate.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/methods/Probe-shapeCast.md Edit}
    */
    shapeCast(shape: Shape, start: vec3, startRot: quat, end: vec3, endRot: quat, hitCB: (hit: RayCastHit) => void): void
    
    /**
    * Like rayCastAll(), but sweeps a shape from start to end transforms (expressed as position and rotation).  The provided shape can be created with one of the Shape.create*() functions, or referenced from a Physics.ColliderComponent.  Does not support MeshShape, and will throw an exception if attempted.  Returns (via callback) all intersections.  The callback receives an array of hits, in order of nearest to farthest. If there were no hits, the array length is 0. Ray casts are performed after simulation update, which occurs after script Update but prior to LateUpdate.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/methods/Probe-shapeCastAll.md Edit}
    */
    shapeCastAll(shape: Shape, start: vec3, startRot: quat, end: vec3, endRot: quat, hitCB: (hit: RayCastHit[]) => void): void
    
    /**
    * Like rayCast(), but sweeps a sphere from start to end positions.  This is shorthand for calling shapeCast() with a SphereShape.  Returns (via callback) the nearest intersection.  If there is no hit, the callback is called with a null hit argument.  Ray casts are performed after simulation update, which occurs after script Update but prior to LateUpdate.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/methods/Probe-sphereCast.md Edit}
    */
    sphereCast(radius: number, start: vec3, end: vec3, hitCB: (hit: RayCastHit) => void): void
    
    /**
    * Like rayCastAll(), but sweeps a sphere from start to end positions. This is shorthand for calling shapeCastAll() with a SphereShape. Returns (via callback) all intersections. The callback receives an array of hits, in order of nearest to farthest. If there were no hits, the array length is 0.  Ray casts are performed after simulation update, which occurs after script Update but prior to LateUpdate.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/methods/Probe-sphereCastAll.md Edit}
    */
    sphereCastAll(radius: number, start: vec3, end: vec3, hitCB: (hit: RayCastHit[]) => void): void
    
    /**
    * Show intersection tests with debug-draw.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/properties/Probe-debugDrawEnabled.md Edit}
    */
    debugDrawEnabled: boolean
    
    /**
    * Filter settings applied to intersection tests.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Probe/properties/Probe-filter.md Edit}
    */
    filter: Filter
    
}

/**
* RenderObjectProvider for mesh objects generated procedurally.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralMeshRenderObjectProvider/ProceduralMeshRenderObjectProvider-description.md Edit}
*/
interface ProceduralMeshRenderObjectProvider extends MeshRenderObjectProvider {
}

/**
* Provides a texture that can be written to or read from. Can be accessed using Texture.control on a Procedural Texture.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/ProceduralTextureProvider-description.md Edit}
*/
interface ProceduralTextureProvider extends TextureProvider {
    /**
    * Returns a Uint8 array containing the pixel values in a region of the texture. The region starts at the pixel coordinates x, y, and extends rightward by width and upward by height. Values returned are integers ranging from 0 to 255.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/methods/ProceduralTextureProvider-getPixels.md Edit}
    
    * @exposesUserData
    */
    getPixels(x: number, y: number, width: number, height: number, data: Uint8Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/methods/ProceduralTextureProvider-getPixelsFloat32.md Edit}
    
    * @unreleased
    */
    getPixelsFloat32(x: number, y: number, width: number, height: number, data: Float32Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/methods/ProceduralTextureProvider-getPixelsUint8.md Edit}
    
    * @private
    */
    getPixelsUint8(x: number, y: number, width: number, height: number, data: Uint8Array): void
    
    /**
    * Sets a region of pixels on the texture. The region starts at the pixel coordinates x, y, and extends rightward by width and upward by height. Uses the values of the passed in Uint8Array data, which should be integer values ranging from 0 to 255.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/methods/ProceduralTextureProvider-setPixels.md Edit}
    */
    setPixels(x: number, y: number, width: number, height: number, data: Uint8Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/methods/ProceduralTextureProvider-setPixelsFloat32.md Edit}
    
    * @unreleased
    */
    setPixelsFloat32(x: number, y: number, width: number, height: number, data: Float32Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/methods/ProceduralTextureProvider-setPixelsUint8.md Edit}
    
    * @private
    */
    setPixelsUint8(x: number, y: number, width: number, height: number, data: Uint8Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/properties/ProceduralTextureProvider-transform.md Edit}
    
    * @private
    */
    transform: mat3
    
}
declare namespace ProceduralTextureProvider {
    /**
    * Creates a new, blank Texture Provider using the passed in dimensions and Colorspace. The ProceduralTextureProvider can be accessed through the control property on the returned texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/methods/ProceduralTextureProvider-create.md Edit}
    */
    export function create(width: number, height: number, colorspace: Colorspace): Texture
    
    /**
    * Creates a new Procedural Texture based on the passed in texture. The ProceduralTextureProvider can be accessed through the control property on the returned texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProceduralTextureProvider/methods/ProceduralTextureProvider-createFromTexture.md Edit}
    */
    export function createFromTexture(texture: Texture): Texture
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProcessedLocationModule/ProcessedLocationModule-description.md Edit}
*/
interface ProcessedLocationModule extends Asset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProcessingMode/ProcessingMode-description.md Edit}

* @private
*/
declare enum ProcessingMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProcessingMode/properties/ProcessingMode-Sync.md Edit}
    
    * @private
    */
    Sync,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ProcessingMode/properties/ProcessingMode-Async.md Edit}
    
    * @private
    */
    Async
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Properties/Properties-description.md Edit}
*/
interface Properties extends ScriptObject {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PropertyOnEventArgs/PropertyOnEventArgs-description.md Edit}
*/
interface PropertyOnEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/PropertyOnEventArgs/properties/PropertyOnEventArgs-eventName.md Edit}
    
    * @readonly
    
    * @private
    */
    eventName: string
    
}

/**
* Base class for all resource providers.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Provider/Provider-description.md Edit}
*/
interface Provider extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Provider/methods/Provider-getLoadStatus.md Edit}
    */
    getLoadStatus(): LoadStatus
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Provider/methods/Provider-isLoaded.md Edit}
    
    * @deprecated
    
    * @private
    */
    isLoaded(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Provider/methods/Provider-loadStatus.md Edit}
    
    * @deprecated
    
    * @private
    */
    loadStatus(): LoadStatus
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QualityLevel/QualityLevel-description.md Edit}

* @private
*/
declare enum QualityLevel {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QualityLevel/properties/QualityLevel-Off.md Edit}
    
    * @private
    */
    Off,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QualityLevel/properties/QualityLevel-Low.md Edit}
    
    * @private
    */
    Low,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QualityLevel/properties/QualityLevel-Medium.md Edit}
    
    * @private
    */
    Medium,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QualityLevel/properties/QualityLevel-High.md Edit}
    
    * @private
    */
    High,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QualityLevel/properties/QualityLevel-Ultra.md Edit}
    
    * @private
    */
    Ultra
}

/**
* A quaternion, used to represent rotation.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/quat-description.md Edit}
*/
declare class quat {
    /**
    * Creates a new quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-quat.md Edit}
    */
    constructor(w: number, x: number, y: number, z: number)
    
    /**
    * Returns the dot product of the two quats.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-dot.md Edit}
    */
    dot(quat: quat): number
    
    /**
    * Returns whether this quat and `b` are equal.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-equal.md Edit}
    */
    equal(b: quat): boolean
    
    /**
    * Returns the rotation angle of the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-getAngle.md Edit}
    */
    getAngle(): number
    
    /**
    * Returns the rotation axis of the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-getAxis.md Edit}
    */
    getAxis(): vec3
    
    /**
    * Returns an inverted version of the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-invert.md Edit}
    */
    invert(): quat
    
    /**
    * Returns the product of this quat and `b`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-multiply.md Edit}
    */
    multiply(b: quat): quat
    
    /**
    * Returns the result of rotating direction vector `vec3` by this quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-multiplyVec3.md Edit}
    */
    multiplyVec3(vec3: vec3): vec3
    
    /**
    * Normalizes the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-normalize.md Edit}
    */
    normalize(): void
    
    /**
    * Returns an euler angle representation of the quat, in radians.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-toEuler.md Edit}
    
    * @deprecated
    */
    toEuler(): vec3
    
    /**
    * Returns an euler angle representation of the quat, in radians.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-toEulerAngles.md Edit}
    */
    toEulerAngles(): vec3
    
    /**
    * Returns a string representation of the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-toString.md Edit}
    */
    toString(): string
    
    /**
    * w component of the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/properties/quat-w.md Edit}
    */
    w: number
    
    /**
    * x component of the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/properties/quat-x.md Edit}
    */
    x: number
    
    /**
    * y component of the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/properties/quat-y.md Edit}
    */
    y: number
    
    /**
    * z component of the quat.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/properties/quat-z.md Edit}
    */
    z: number
    
}
declare namespace quat {
    /**
    * Returns a new quat with angle `angle` and axis `axis`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-angleAxis.md Edit}
    */
    export function angleAxis(angle: number, axis: vec3): quat
    
    /**
    * Returns the angle between `a` and `b`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-angleBetween.md Edit}
    */
    export function angleBetween(a: quat, b: quat): number
    
    /**
    * Returns a new quat using the euler angles `x`, `y`, `z` (in radians).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-fromEulerAngles.md Edit}
    */
    export function fromEulerAngles(x: number, y: number, z: number): quat
    
    /**
    * Returns a new quat using the euler angle `eulerVec` (in radians).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-fromEulerVec.md Edit}
    */
    export function fromEulerVec(eulerVec: vec3): quat
    
    /**
    * Creates a quaternion from a matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-fromRotationMat.md Edit}
    */
    export function fromRotationMat(rotationMat: mat3): quat
    
    /**
    * Returns a new quat linearly interpolated between `a` and `b`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-lerp.md Edit}
    */
    export function lerp(a: quat, b: quat, t: number): quat
    
    /**
    * Returns a new quat with a forward vector `forward` and up vector `up`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-lookAt.md Edit}
    */
    export function lookAt(forward: vec3, up: vec3): quat
    
    /**
    * Returns a new quat using the euler angles `x`, `y`, `z` (in radians).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-quatFromEuler.md Edit}
    
    * @deprecated
    */
    export function quatFromEuler(x: number, y: number, z: number): quat
    
    /**
    * Returns the identity quaternion.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-quatIdentity.md Edit}
    */
    export function quatIdentity(): quat
    
    /**
    * Returns a rotation quat between direction vectors `from` and `to`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-rotationFromTo.md Edit}
    */
    export function rotationFromTo(from: vec3, to: vec3): quat
    
    /**
    * Returns a new quat spherically linearly interpolated between `a` and `b`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/quat/methods/quat-slerp.md Edit}
    */
    export function slerp(a: quat, b: quat, t: number): quat
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuatAnimationPropertyTrack/QuatAnimationPropertyTrack-description.md Edit}

* @private
*/
interface QuatAnimationPropertyTrack extends AnimationPropertyTrack {
}

/**
* The base class for animation tracks using quaternion values.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuaternionAnimationTrack/QuaternionAnimationTrack-description.md Edit}

* @deprecated
*/
interface QuaternionAnimationTrack extends AnimationTrack {
}

/**
* Represents an animation track using quaternion value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuaternionAnimationTrackKeyFramed/QuaternionAnimationTrackKeyFramed-description.md Edit}

* @deprecated
*/
interface QuaternionAnimationTrackKeyFramed extends QuaternionAnimationTrack {
    /**
    * Adds a key with value `value` at time `time`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuaternionAnimationTrackKeyFramed/methods/QuaternionAnimationTrackKeyFramed-addKey.md Edit}
    */
    addKey(time: number, value: quat): void
    
    /**
    * Removes all keys.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuaternionAnimationTrackKeyFramed/methods/QuaternionAnimationTrackKeyFramed-removeAllKeys.md Edit}
    */
    removeAllKeys(): void
    
    /**
    * Removes key at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuaternionAnimationTrackKeyFramed/methods/QuaternionAnimationTrackKeyFramed-removeKeyAt.md Edit}
    */
    removeKeyAt(index: number): void
    
}

/**
* Represents a rotation animation track using euler angles.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuaternionAnimationTrackXYZEuler/QuaternionAnimationTrackXYZEuler-description.md Edit}

* @deprecated
*/
interface QuaternionAnimationTrackXYZEuler extends QuaternionAnimationTrack {
    /**
    * Returns child track at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuaternionAnimationTrackXYZEuler/methods/QuaternionAnimationTrackXYZEuler-getChildTrackByIndex.md Edit}
    */
    getChildTrackByIndex(index: number): AnimationTrack
    
    /**
    * Sets child track at index `index` to track `track`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QuaternionAnimationTrackXYZEuler/methods/QuaternionAnimationTrackXYZEuler-setChildTrackByIndex.md Edit}
    */
    setChildTrackByIndex(index: number, track: AnimationTrack): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QueryGeoStorageOptions/QueryGeoStorageOptions-description.md Edit}

* @private
*/
interface QueryGeoStorageOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QueryGeoStorageOptions/properties/QueryGeoStorageOptions-objectType.md Edit}
    
    * @private
    */
    objectType: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QueryGeoStorageOptions/properties/QueryGeoStorageOptions-position.md Edit}
    
    * @private
    */
    position: GeoPosition
    
}
declare namespace QueryGeoStorageOptions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/QueryGeoStorageOptions/methods/QueryGeoStorageOptions-create.md Edit}
    
    * @private
    */
    export function create(): QueryGeoStorageOptions
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RawLocationModule/RawLocationModule-description.md Edit}
*/
interface RawLocationModule extends Asset {
}

/**
* Hit results of a ray-cast provided to script. See [Probe](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Probe).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RayCastHit/RayCastHit-description.md Edit}
*/
interface RayCastHit extends ScriptObject {
    /**
    * The collider that was hit.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RayCastHit/properties/RayCastHit-collider.md Edit}
    
    * @readonly
    */
    collider: ColliderComponent
    
    /**
    * Distance from the ray origin to the point of intersection.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RayCastHit/properties/RayCastHit-distance.md Edit}
    
    * @readonly
    */
    distance: number
    
    /**
    * Surface normal on the collider at the point of intersection.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RayCastHit/properties/RayCastHit-normal.md Edit}
    
    * @readonly
    */
    normal: vec3
    
    /**
    * Position at the point of intersection.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RayCastHit/properties/RayCastHit-position.md Edit}
    
    * @readonly
    */
    position: vec3
    
    /**
    * Set to `true` to skip remaining results, if any.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RayCastHit/properties/RayCastHit-skipRemaining.md Edit}
    */
    skipRemaining: boolean
    
    /**
    * Ray interpolant at the point of intersection, in the range [0, 1].
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RayCastHit/properties/RayCastHit-t.md Edit}
    
    * @readonly
    */
    t: number
    
    /**
    * The hit triangle, if it exists. This is set on intersection with mesh-based colliders, and null otherwise.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RayCastHit/properties/RayCastHit-triangle.md Edit}
    
    * @readonly
    */
    triangle: TriangleHit
    
}

/**
* The options for the realtime store.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions/RealtimeStoreCreateOptions-description.md Edit}
*/
interface RealtimeStoreCreateOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions/properties/RealtimeStoreCreateOptions-allowOwnershipTakeOver.md Edit}
    */
    allowOwnershipTakeOver: boolean
    
    /**
    * An existing store to be used as the initial values for the real time store.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions/properties/RealtimeStoreCreateOptions-initialStore.md Edit}
    */
    initialStore: GeneralDataStore
    
    /**
    * The ownership model for the realtime store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions/properties/RealtimeStoreCreateOptions-ownership.md Edit}
    */
    ownership: RealtimeStoreCreateOptions.Ownership
    
    /**
    * The persistence model for the realtime store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions/properties/RealtimeStoreCreateOptions-persistence.md Edit}
    */
    persistence: RealtimeStoreCreateOptions.Persistence
    
    /**
    * Writes an id string to the store that can be used to identify it later.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions/properties/RealtimeStoreCreateOptions-storeId.md Edit}
    */
    storeId: string
    
}
declare namespace RealtimeStoreCreateOptions {
    /**
    * Creates the realtime store options object.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions/methods/RealtimeStoreCreateOptions-create.md Edit}
    */
    export function create(): RealtimeStoreCreateOptions
    

}

declare namespace RealtimeStoreCreateOptions {
    /**
    * The ownership model of a realtime store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions.Ownership/RealtimeStoreCreateOptions.Ownership-description.md Edit}
    */
    enum Ownership {
        /**
        * Indicates ownership of an entity. Only the owner can edit a store.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions.Ownership/properties/RealtimeStoreCreateOptions.Ownership-Owned.md Edit}
        */
        Owned,
        /**
        * Indicates ownership of an entity. Any user in the session can edit an unowned store.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions.Ownership/properties/RealtimeStoreCreateOptions.Ownership-Unowned.md Edit}
        */
        Unowned
    }

}

declare namespace RealtimeStoreCreateOptions {
    /**
    * The persistence model for a realtime store.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions.Persistence/RealtimeStoreCreateOptions.Persistence-description.md Edit}
    */
    enum Persistence {
        /**
        * Indicates that the entity will be deleted after it is broadcast.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions.Persistence/properties/RealtimeStoreCreateOptions.Persistence-Ephemeral.md Edit}
        */
        Ephemeral,
        /**
        * Indicates that the entity will be deleted when the owner leaves.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions.Persistence/properties/RealtimeStoreCreateOptions.Persistence-Owner.md Edit}
        */
        Owner,
        /**
        * Indicates that the entity will be marked as unowned when the owner leaves. The Entity will be deleted when all clients leave.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions.Persistence/properties/RealtimeStoreCreateOptions.Persistence-Session.md Edit}
        */
        Session,
        /**
        * Indicates that the entity will be marked as unowned when the owner leaves. The Entity will be created as unowned when any client rejoins.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RealtimeStoreCreateOptions.Persistence/properties/RealtimeStoreCreateOptions.Persistence-Persist.md Edit}
        */
        Persist
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RecordingState/RecordingState-description.md Edit}

* @private
*/
declare enum RecordingState {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RecordingState/properties/RecordingState-Video.md Edit}
    
    * @private
    */
    Video,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RecordingState/properties/RecordingState-Photo.md Edit}
    
    * @private
    */
    Photo,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RecordingState/properties/RecordingState-Preview.md Edit}
    
    * @private
    */
    Preview,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RecordingState/properties/RecordingState-Thumbnail.md Edit}
    
    * @private
    */
    Thumbnail
}

/**
* An axis aligned rectangle.
* Used by `anchors` and `offsets` in [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) to represent screen boundaries.
* Rect can only store finite numbers in the range Number.MIN_VALUE to Number.MAX_VALUE.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/Rect-description.md Edit}
*/
interface Rect extends ScriptObject {
    /**
    * Returns the rectangle's center position as (x, y).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/methods/Rect-getCenter.md Edit}
    */
    getCenter(): vec2
    
    /**
    * Returns the size of the rectangle as (width, height).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/methods/Rect-getSize.md Edit}
    */
    getSize(): vec2
    
    /**
    * Sets the rectangle's center position while maintaining its size.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/methods/Rect-setCenter.md Edit}
    */
    setCenter(value: vec2): void
    
    /**
    * Sets the rectangle's size while maintaining its center position.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/methods/Rect-setSize.md Edit}
    */
    setSize(value: vec2): void
    
    /**
    * Returns a string representation of the Rect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/methods/Rect-toString.md Edit}
    */
    toString(): string
    
    /**
    * The y position of the rectangle's bottom side.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/properties/Rect-bottom.md Edit}
    */
    bottom: number
    
    /**
    * The x position of the rectangle's left side.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/properties/Rect-left.md Edit}
    */
    left: number
    
    /**
    * The x position of the rectangle's right side.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/properties/Rect-right.md Edit}
    */
    right: number
    
    /**
    * The y position of the rectangle's top side.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/properties/Rect-top.md Edit}
    */
    top: number
    
}
declare namespace Rect {
    /**
    * Creates a new Rect with the given properties.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rect/methods/Rect-create.md Edit}
    */
    export function create(left: number, right: number, bottom: number, top: number): Rect
    

}

/**
* Applies ScreenTransform positioning to match the cropped region of a texture.
* For more information, see the [Crop Textures](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/crop-textures) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RectangleSetter/RectangleSetter-description.md Edit}
*/
interface RectangleSetter extends Component {
    /**
    * Cropped texture to match the screen region of. Should be a texture using a RectCropTextureProvider, such as a Screen Crop Texture or Face Crop Texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RectangleSetter/properties/RectangleSetter-cropTexture.md Edit}
    */
    cropTexture: Texture
    
}

/**
* Texture Provider providing a cropped region of the input texture. The region is specified by the cropRect in local space and rotation.
* Can be accessed using Texture.control on a RectCropTexture asset, such as a Screen Crop Texture.
* For more information, see the [Crop Textures](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/crop-textures) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RectCropTextureProvider/RectCropTextureProvider-description.md Edit}
*/
interface RectCropTextureProvider extends CropTextureProvider {
    /**
    * The cropped region to draw.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RectCropTextureProvider/properties/RectCropTextureProvider-cropRect.md Edit}
    */
    cropRect: Rect
    
    /**
    * Angle, in radians, the cropped region is rotated by.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RectCropTextureProvider/properties/RectCropTextureProvider-rotation.md Edit}
    */
    rotation: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiRequest/RemoteApiRequest-description.md Edit}
*/
interface RemoteApiRequest extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiRequest/properties/RemoteApiRequest-body.md Edit}
    */
    body: (Uint8Array|number[]|string)
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiRequest/properties/RemoteApiRequest-endpoint.md Edit}
    */
    endpoint: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiRequest/properties/RemoteApiRequest-parameters.md Edit}
    */
    parameters: object
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiRequest/properties/RemoteApiRequest-uriResources.md Edit}
    
    * @private
    */
    uriResources: DynamicResource[]
    
}
declare namespace RemoteApiRequest {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiRequest/methods/RemoteApiRequest-create.md Edit}
    */
    export function create(): RemoteApiRequest
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiResponse/RemoteApiResponse-description.md Edit}
*/
interface RemoteApiResponse extends ScriptObject {
    /**
    * Converts the response into a DynamicResource object, which can be used by RemoteMediaModule to load the media content in the response body.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiResponse/methods/RemoteApiResponse-asResource.md Edit}
    */
    asResource(): DynamicResource
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiResponse/properties/RemoteApiResponse-body.md Edit}
    
    * @readonly
    */
    body: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiResponse/properties/RemoteApiResponse-bodyAsBytes.md Edit}
    
    * @readonly
    
    * @private
    */
    bodyAsBytes: Uint8Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiResponse/properties/RemoteApiResponse-metadata.md Edit}
    
    * @readonly
    */
    metadata: object
    
    /**
    * The integer status code of the response.
    
    * The meaning of possible status code values are defined as follows:
    * - 1: Success. This code corresponds to the 2XX HTTP response status codes.
    * - 2: Redirected. This code corresponds to the 3XX HTTP response status codes.
    * - 3: Bad request. This code corresponds to the 4XX HTTP response status codes other than 401, 403, 404, 408, 413, 414, and 431 which are mapped separately below.
    * - 4: Access denied. This code corresponds to the HTTP response status codes 401 and 403.
    * - 5: Not found. This code corresponds to the HTTP response status code 404. It is also returned when the API spec is not found by the remote API service.
    * - 6: Timeout. This code corresponds to the HTTP response status codes 408 and 504.
    * - 7: Request too large. This code corresponds to the HTTP response status codes 413, 414, and 431.
    * - 8: Server error. This code corresponds to the 5XX HTTP response status codes other than 504 (timeout).
    * - 9: Request cancelled by the caller.
    * - 10: Internal error happened inside the remote API framework (i.e., not from the remote service being called).
    
    * All other values have undefined meaning and should be treated as internal error (code 10).
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiResponse/properties/RemoteApiResponse-statusCode.md Edit}
    
    * @readonly
    */
    statusCode: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteApiResponse/properties/RemoteApiResponse-uriResources.md Edit}
    
    * @readonly
    */
    uriResources: DynamicResource[]
    
}

/**
* Provides access to a remote media.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/RemoteMediaModule-description.md Edit}
*/
interface RemoteMediaModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-createImageResourceForTexture.md Edit}
    
    * @private
    */
    createImageResourceForTexture(texture: Texture, uploadOptions: ImageUploadOptions): Promise<DynamicResource>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadAsAnimatedTexture.md Edit}
    
    * @private
    */
    loadAsAnimatedTexture(url: string, onSuccess: (texture: Texture) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadAsAudioTrackAsset.md Edit}
    
    * @private
    */
    loadAsAudioTrackAsset(url: string, onSuccess: (glTFAsset: AudioTrackAsset) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadAsGltfAsset.md Edit}
    
    * @private
    */
    loadAsGltfAsset(url: string, onSuccess: (glTFAsset: GltfAsset) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadAsImageTexture.md Edit}
    
    * @private
    */
    loadAsImageTexture(url: string, onSuccess: (texture: Texture) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadAsVideoTexture.md Edit}
    
    * @private
    */
    loadAsVideoTexture(url: string, onSuccess: (texture: Texture) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * Downloads the remote image resource from the [`DynamicResource`](https://lensstudio.snapchat.com/api/classes/dynamicresource) object and loads the resource as [AudioTrackAsset](https://lensstudio.snapchat.com/api/classes/AudioTrackAsset).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadResourceAsAudioTrackAsset.md Edit}
    */
    loadResourceAsAudioTrackAsset(resource: DynamicResource, onSuccess: (glTFAsset: AudioTrackAsset) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * Downloads a remote 3D GLTF file given a [`DynamicResource`](https://lensstudio.snapchat.com/api/classes/dynamicresource).
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadResourceAsGltfAsset.md Edit}
    */
    loadResourceAsGltfAsset(resource: DynamicResource, onSuccess: (glTFAsset: GltfAsset) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * Downloads the remote image resource from the [`DynamicResource`](https://lensstudio.snapchat.com/api/classes/dynamicresource) object and loads the resource as an [Image](https://lensstudio.snapchat.com/api/classes/Image) Texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadResourceAsImageTexture.md Edit}
    */
    loadResourceAsImageTexture(resource: DynamicResource, onSuccess: (texture: Texture) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadResourceAsStreamTexture.md Edit}
    
    * @private
    */
    loadResourceAsStreamTexture(resource: DynamicResource, onSuccess: (texture: Texture) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * Downloads the remote image resource from the [`DynamicResource`](https://lensstudio.snapchat.com/api/classes/dynamicresource) object and loads the resource as a [VideoTextureProvider](https://lensstudio.snapchat.com/api/classes/VideoTextureProvider).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-loadResourceAsVideoTexture.md Edit}
    */
    loadResourceAsVideoTexture(resource: DynamicResource, onSuccess: (texture: Texture) => void, onFailure: (errorMessage: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteMediaModule/methods/RemoteMediaModule-uploadImage.md Edit}
    
    * @private
    */
    uploadImage(resource: Texture, onSuccess: (resource: DynamicResource) => void, onFailure: (errorMessage: string) => void, uploadOptions: ImageUploadOptions): void
    
}

/**
* Provides a reference to a remote asset (i.e. assets outside of the Lens size limit) that can be downloaded at runtime using script.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteReferenceAsset/RemoteReferenceAsset-description.md Edit}
*/
interface RemoteReferenceAsset extends Asset {
    /**
    * Request to download the Remote Reference Asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteReferenceAsset/methods/RemoteReferenceAsset-downloadAsset.md Edit}
    */
    downloadAsset(onDownloaded: (asset: Asset) => void, onFailed: () => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/RemoteServiceHttpRequest-description.md Edit}
*/
interface RemoteServiceHttpRequest extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/methods/RemoteServiceHttpRequest-getHeader.md Edit}
    
    * @private
    */
    getHeader(name: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/methods/RemoteServiceHttpRequest-setHeader.md Edit}
    
    * @private
    */
    setHeader(name: string, value: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/properties/RemoteServiceHttpRequest-body.md Edit}
    
    * @private
    */
    body: (Uint8Array|number[]|string)
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/properties/RemoteServiceHttpRequest-contentType.md Edit}
    
    * @private
    */
    contentType: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/properties/RemoteServiceHttpRequest-headers.md Edit}
    
    * @private
    */
    headers: object
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/properties/RemoteServiceHttpRequest-method.md Edit}
    
    * @private
    */
    method: RemoteServiceHttpRequest.HttpRequestMethod
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/properties/RemoteServiceHttpRequest-url.md Edit}
    
    * @private
    */
    url: string
    
}
declare namespace RemoteServiceHttpRequest {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest/methods/RemoteServiceHttpRequest-create.md Edit}
    
    * @private
    */
    export function create(): RemoteServiceHttpRequest
    

}

declare namespace RemoteServiceHttpRequest {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest.HttpRequestMethod/RemoteServiceHttpRequest.HttpRequestMethod-description.md Edit}
    
    * @private
    */
    enum HttpRequestMethod {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest.HttpRequestMethod/properties/RemoteServiceHttpRequest.HttpRequestMethod-Get.md Edit}
        
        * @private
        */
        Get,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest.HttpRequestMethod/properties/RemoteServiceHttpRequest.HttpRequestMethod-Post.md Edit}
        
        * @private
        */
        Post,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest.HttpRequestMethod/properties/RemoteServiceHttpRequest.HttpRequestMethod-Put.md Edit}
        
        * @private
        */
        Put,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpRequest.HttpRequestMethod/properties/RemoteServiceHttpRequest.HttpRequestMethod-Delete.md Edit}
        
        * @private
        */
        Delete
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpResponse/RemoteServiceHttpResponse-description.md Edit}
*/
interface RemoteServiceHttpResponse extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpResponse/methods/RemoteServiceHttpResponse-asResource.md Edit}
    
    * @private
    */
    asResource(): DynamicResource
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpResponse/methods/RemoteServiceHttpResponse-getHeader.md Edit}
    
    * @private
    */
    getHeader(name: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpResponse/methods/RemoteServiceHttpResponse-loadAsTexture.md Edit}
    
    * @deprecated
    
    * @private
    */
    loadAsTexture(): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpResponse/properties/RemoteServiceHttpResponse-body.md Edit}
    
    * @readonly
    
    * @private
    */
    body: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpResponse/properties/RemoteServiceHttpResponse-contentType.md Edit}
    
    * @readonly
    
    * @private
    */
    contentType: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpResponse/properties/RemoteServiceHttpResponse-headers.md Edit}
    
    * @readonly
    
    * @private
    */
    headers: object
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceHttpResponse/properties/RemoteServiceHttpResponse-statusCode.md Edit}
    
    * @readonly
    
    * @private
    */
    statusCode: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/RemoteServiceModule-description.md Edit}
*/
interface RemoteServiceModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/methods/RemoteServiceModule-deleteOAuth2Tokens.md Edit}
    
    * @private
    */
    deleteOAuth2Tokens(onCompleteResponse: (success: boolean) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/methods/RemoteServiceModule-getOAuth2Status.md Edit}
    
    * @private
    */
    getOAuth2Status(onOAuth2StatusResponse: (status: RemoteServiceModule.OAuth2Status, errorMessage?: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/methods/RemoteServiceModule-makeResourceFromUrl.md Edit}
    
    * @private
    */
    makeResourceFromUrl(mediaUrl: string): DynamicResource
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/methods/RemoteServiceModule-performApiRequest.md Edit}
    */
    performApiRequest(request: RemoteApiRequest, onApiResponse: (response: RemoteApiResponse) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/methods/RemoteServiceModule-performHttpRequest.md Edit}
    
    * @private
    */
    performHttpRequest(requestOptions: RemoteServiceHttpRequest, onHttpResponse: (response: RemoteServiceHttpResponse) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/methods/RemoteServiceModule-startOAuth2Flow.md Edit}
    
    * @private
    */
    startOAuth2Flow(onOAuth2StatusResponse: (status: RemoteServiceModule.OAuth2Status, errorMessage?: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/methods/RemoteServiceModule-subscribeApiRequest.md Edit}
    
    * @private
    */
    subscribeApiRequest(request: RemoteApiRequest, onApiResponse: (response: RemoteApiResponse) => void): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/methods/RemoteServiceModule-unsubscribe.md Edit}
    
    * @private
    */
    unsubscribe(requestId: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule/properties/RemoteServiceModule-apiSpecId.md Edit}
    
    * @private
    */
    apiSpecId: string
    
}

declare namespace RemoteServiceModule {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule.OAuth2Status/RemoteServiceModule.OAuth2Status-description.md Edit}
    
    * @private
    */
    enum OAuth2Status {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule.OAuth2Status/properties/RemoteServiceModule.OAuth2Status-Unknown.md Edit}
        
        * @private
        */
        Unknown,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule.OAuth2Status/properties/RemoteServiceModule.OAuth2Status-NotSupported.md Edit}
        
        * @private
        */
        NotSupported,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule.OAuth2Status/properties/RemoteServiceModule.OAuth2Status-TokenNotAvailable.md Edit}
        
        * @private
        */
        TokenNotAvailable,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule.OAuth2Status/properties/RemoteServiceModule.OAuth2Status-TokenReady.md Edit}
        
        * @private
        */
        TokenReady,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RemoteServiceModule.OAuth2Status/properties/RemoteServiceModule.OAuth2Status-TokenError.md Edit}
        
        * @private
        */
        TokenError
    }

}

declare namespace RenderAPI {
    /**
    * The ordering method for where an entry point will be inserted relative to existing cameras.
    
    * CameraInsertionOrdering is used to specify the non-API camera that a RenderEntryPoint will be attached to. RenderEntryPoint has a member of this type. This property has no effect if the RenderEntryPoint is assigned a RenderAPICamera rather than a non-API camera.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.CameraInsertionOrdering/RenderAPI.CameraInsertionOrdering-description.md Edit}
    
    * @private
    */
    enum CameraInsertionOrdering {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.CameraInsertionOrdering/properties/RenderAPI.CameraInsertionOrdering-Explicit.md Edit}
        
        * @private
        */
        Explicit,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.CameraInsertionOrdering/properties/RenderAPI.CameraInsertionOrdering-Front.md Edit}
        
        * @private
        */
        Front,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.CameraInsertionOrdering/properties/RenderAPI.CameraInsertionOrdering-Back.md Edit}
        
        * @private
        */
        Back
    }

}

declare namespace RenderAPI {
    /**
    * The ordering method for where an entry point will be inserted within a specific camera’s rendering chain.
    
    * EntryPointInsertionOrdering is used to specify the location where the contents of a RenderEntryPoint should be placed in the scene. RenderEntryPoint has a member of this type.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.EntryPointInsertionOrdering/RenderAPI.EntryPointInsertionOrdering-description.md Edit}
    
    * @private
    */
    enum EntryPointInsertionOrdering {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.EntryPointInsertionOrdering/properties/RenderAPI.EntryPointInsertionOrdering-Default.md Edit}
        
        * @private
        */
        Default,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.EntryPointInsertionOrdering/properties/RenderAPI.EntryPointInsertionOrdering-BeforeID.md Edit}
        
        * @private
        */
        BeforeID,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.EntryPointInsertionOrdering/properties/RenderAPI.EntryPointInsertionOrdering-AfterID.md Edit}
        
        * @private
        */
        AfterID
    }

}

declare namespace RenderAPI {
    /**
    * The ordering method for objects within the same group.
    
    * ObjectOrderingInGroup is used to specify how the objects within the same group will be ordered. RenderGroup has a member of this type.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.ObjectOrderingInGroup/RenderAPI.ObjectOrderingInGroup-description.md Edit}
    
    * @private
    */
    enum ObjectOrderingInGroup {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.ObjectOrderingInGroup/properties/RenderAPI.ObjectOrderingInGroup-Default.md Edit}
        
        * @private
        */
        Default,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPI.ObjectOrderingInGroup/properties/RenderAPI.ObjectOrderingInGroup-ByInsertion.md Edit}
        
        * @private
        */
        ByInsertion
    }

}

/**
* This class is used to represent a camera that is exclusively used within the `RenderAPIJS`. It has many of the same properties as the original `Camera` class. Each `RenderAPICameraJS` has a unique layer from all existing layers in the Scene. The `targetHandle` member is used to assign the RenderAPICameraJS a `RenderAPITargetJS`. If the targetHandle is invalid, nothing will be rendered with this camera.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/RenderAPICameraJS-description.md Edit}

* @private
*/
interface RenderAPICameraJS extends ScriptObject {
    /**
    * Sets a render element's status as deleted. All references to the deleted element are invalidated.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/methods/RenderAPICameraJS-deleteElement.md Edit}
    
    * @private
    */
    deleteElement(): void
    
    /**
    * The aspect ratio of the camera, which is width divided by height.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-aspect.md Edit}
    
    * @private
    */
    aspect: number
    
    /**
    * Controls which camera settings will be overridden by physical device properties. For example, this can be used to override the fov property to match the device camera's actual field of view.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-devicePropertyUsage.md Edit}
    
    * @private
    */
    devicePropertyUsage: Camera.DeviceProperty
    
    /**
    * Gets or sets whether or not a render element is enabled.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-enabled.md Edit}
    
    * @private
    */
    enabled: boolean
    
    /**
    * The distance of the far clipping plane.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-far.md Edit}
    
    * @private
    */
    far: number
    
    /**
    * The camera's vertical field of view in radians.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-fov.md Edit}
    
    * @private
    */
    fov: number
    
    /**
    * Gets or sets the array of light sources that will be used by this camera.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-lightSources.md Edit}
    
    * @private
    */
    lightSources: LightSource[]
    
    /**
    * The distance of the near clipping plane.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-near.md Edit}
    
    * @private
    */
    near: number
    
    /**
    * Gets or sets the render order of this camera relative to all cameras in the scene.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-renderOrder.md Edit}
    
    * @private
    */
    renderOrder: number
    
    /**
    * Gets the `RenderAPITargetJS` that is set for this camera.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-renderTarget.md Edit}
    
    * @readonly
    
    * @private
    */
    renderTarget: RenderAPITargetJS
    
    /**
    * The vertical orthographic size of the camera.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-size.md Edit}
    
    * @private
    */
    size: number
    
    /**
    * Gets or sets the transform matrix of the camera.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-transformMatrix.md Edit}
    
    * @private
    */
    transformMatrix: mat4
    
    /**
    * Controls which type of rendering the camera uses.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPICameraJS/properties/RenderAPICameraJS-type.md Edit}
    
    * @private
    */
    type: Camera.Type
    
}

/**
* This object represents the first point of entry for client code that wishes to make use of `RenderAPIJS` functionalities. It holds accessors to the system objects as well as utility functions necessary for `RenderAPIJS` to interface properly with the FlatScene. Only one instance of `RenderAPIJS` should exist for each `Scene`, which is bound to the global namespace.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIJS/RenderAPIJS-description.md Edit}

* @private
*/
interface RenderAPIJS extends ScriptObject {
    /**
    * Creates a `RenderAPICamera` as well as a `RenderAPITarget`, then assigns the target to the camera.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIJS/methods/RenderAPIJS-createRenderAPICamera.md Edit}
    
    * @private
    */
    createRenderAPICamera(): RenderAPICameraJS
    
    /**
    * Creates an entry point using the specified location information.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIJS/methods/RenderAPIJS-createRenderEntryPoint.md Edit}
    
    * @private
    */
    createRenderEntryPoint(cameraOrderingType: RenderAPI.CameraInsertionOrdering, cameraOrder: number, entryPointOrderingType: RenderAPI.EntryPointInsertionOrdering, orderInChain: number): RenderEntryPointJS
    
    /**
    * Creates a group with a specific ordering for its objects.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIJS/methods/RenderAPIJS-createRenderGroup.md Edit}
    
    * @private
    */
    createRenderGroup(objectOrderingType: RenderAPI.ObjectOrderingInGroup): RenderGroupJS
    
    /**
    * Creates an object that represents the grouping of all visuals in the given layer.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIJS/methods/RenderAPIJS-createRenderObjectWithLayer.md Edit}
    
    * @private
    */
    createRenderObjectWithLayer(layer: LayerSet): RenderObjectWithLayerJS
    
    /**
    * Creates a mesh object with the specified properties.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIJS/methods/RenderAPIJS-createRenderObjectWithMesh.md Edit}
    
    * @private
    */
    createRenderObjectWithMesh(mesh: RenderMesh, material: Material): RenderObjectWithMeshJS
    
    /**
    * Creates an object with an existing visual.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIJS/methods/RenderAPIJS-createRenderObjectWithVisual.md Edit}
    
    * @private
    */
    createRenderObjectWithVisual(visual: Visual): RenderObjectWithVisualJS
    
    /**
    * By default, RenderAPI will exclude disabled or non-rendering visuals from rendering, unless explicitly included by `RenderAPIObject`'s `layersToInclude`. To override this behavior, an object can be set to respect it's enabled/disabled state in the scene hierarchy. When `respectSceneEnable` is set to true, if the original visual is disabled in the scene, it will be skipped.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIJS/properties/RenderAPIJS-respectSceneEnable.md Edit}
    
    * @private
    */
    respectSceneEnable: boolean
    
}

/**
* This is a struct which represents the most basic unit in `RenderAPIJS`. It holds properties which will be used to create FlatVisualSrc's during FlatScene construction.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIObjectJS/RenderAPIObjectJS-description.md Edit}

* @private
*/
interface RenderAPIObjectJS extends ScriptObject {
    /**
    * Sets a render element's status as deleted. All references to the deleted element are invalidated.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIObjectJS/methods/RenderAPIObjectJS-deleteElement.md Edit}
    
    * @private
    */
    deleteElement(): void
    
    /**
    * Gets or sets whether or not a render element is enabled.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIObjectJS/properties/RenderAPIObjectJS-enabled.md Edit}
    
    * @private
    */
    enabled: boolean
    
    /**
    * Gets or sets the material of the object.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIObjectJS/properties/RenderAPIObjectJS-material.md Edit}
    
    * @private
    */
    material: Material
    
    /**
    * Gets or sets the transform matrix of the object.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPIObjectJS/properties/RenderAPIObjectJS-transformMatrix.md Edit}
    
    * @private
    */
    transformMatrix: mat4
    
}

/**
* This is used to represent render targets that can be incorporated into `RenderAPIJS`. It is designed as a wrapper for color render targets and the depth-stencil render target such that render targets can also be treated as RenderElements by the RenderAPI.

* You will not be able to independently create a RenderAPITargetJS. All RenderAPITargetJS instances are created alongside a corresponding `RenderAPICameraJS`.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPITargetJS/RenderAPITargetJS-description.md Edit}

* @private
*/
interface RenderAPITargetJS extends ScriptObject {
    /**
    * Sets a render element's status as deleted. All references to the deleted element are invalidated.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPITargetJS/methods/RenderAPITargetJS-deleteElement.md Edit}
    
    * @private
    */
    deleteElement(): void
    
    /**
    * Gets or sets the list of color render targets of the `RenderAPITargetJS`.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPITargetJS/properties/RenderAPITargetJS-colorRenderTargets.md Edit}
    
    * @private
    */
    colorRenderTargets: Camera.ColorRenderTarget[]
    
    /**
    * Gets or sets the depth-stencil render target of the `RenderAPITargetJS`.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPITargetJS/properties/RenderAPITargetJS-depthStencilRenderTarget.md Edit}
    
    * @private
    */
    depthStencilRenderTarget: Camera.DepthStencilRenderTarget
    
    /**
    * Gets or sets whether or not a render element is enabled.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPITargetJS/properties/RenderAPITargetJS-enabled.md Edit}
    
    * @private
    */
    enabled: boolean
    
    /**
    * Gets or sets the target texture of the first color render target of the `RenderAPITargetJS`.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderAPITargetJS/properties/RenderAPITargetJS-texture.md Edit}
    
    * @private
    */
    texture: Texture
    
}

/**
* This represents the precise location in the rendering pipeline where the objects should be rendered. The precise location is determined by specifying the exact camera and the order within said camera's rendering chain. A `RenderEntryPointJS` contains a vector of handles. Each handle points to a `RenderGroupJS` that will be added to this entry point location during rendering. The `cameraHandle` represents the RenderEntryPoint's possible association to a `RenderAPICameraJS`.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderEntryPointJS/RenderEntryPointJS-description.md Edit}

* @private
*/
interface RenderEntryPointJS extends ScriptObject {
    /**
    * Adds the given group to the entry point.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderEntryPointJS/methods/RenderEntryPointJS-addGroup.md Edit}
    
    * @private
    */
    addGroup(group: RenderGroupJS): void
    
    /**
    * Sets a render element's status as deleted. All references to the deleted element are invalidated.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderEntryPointJS/methods/RenderEntryPointJS-deleteElement.md Edit}
    
    * @private
    */
    deleteElement(): void
    
    /**
    * Removes the given group from the entry point.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderEntryPointJS/methods/RenderEntryPointJS-removeGroup.md Edit}
    
    * @private
    */
    removeGroup(group: RenderGroupJS): void
    
    /**
    * Gets or sets the `RenderAPICameraJS` that the contents of this entry point would be rendered with.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderEntryPointJS/properties/RenderEntryPointJS-apiCamera.md Edit}
    
    * @private
    */
    apiCamera: RenderAPICameraJS
    
    /**
    * Gets or sets whether or not a render element is enabled.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderEntryPointJS/properties/RenderEntryPointJS-enabled.md Edit}
    
    * @private
    */
    enabled: boolean
    
    /**
    * Gets the list of groups under an entry point.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderEntryPointJS/properties/RenderEntryPointJS-groups.md Edit}
    
    * @readonly
    
    * @private
    */
    groups: RenderGroupJS[]
    
}

/**
* This represents a grouping of `RenderAPIObjectJS`, which is represented by the vector of handles. Objects in the same `RenderGroupJS` will always be rendered one after the other as a single block. Objects not part of a render group will never be rendered in between any two objects in that render group.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderGroupJS/RenderGroupJS-description.md Edit}

* @private
*/
interface RenderGroupJS extends ScriptObject {
    /**
    * Adds the given object to the group.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderGroupJS/methods/RenderGroupJS-addObject.md Edit}
    
    * @private
    */
    addObject(object: RenderAPIObjectJS): void
    
    /**
    * Sets a render element's status as deleted. All references to the deleted element are invalidated.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderGroupJS/methods/RenderGroupJS-deleteElement.md Edit}
    
    * @private
    */
    deleteElement(): void
    
    /**
    * Removes the given object from the group.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderGroupJS/methods/RenderGroupJS-removeObject.md Edit}
    
    * @private
    */
    removeObject(object: RenderAPIObjectJS): void
    
    /**
    * Gets or sets whether or not a render element is enabled.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderGroupJS/properties/RenderGroupJS-enabled.md Edit}
    
    * @private
    */
    enabled: boolean
    
    /**
    * Gets the list of objects under the group.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderGroupJS/properties/RenderGroupJS-objects.md Edit}
    
    * @readonly
    
    * @private
    */
    objects: RenderAPIObjectJS[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderingSpace/RenderingSpace-description.md Edit}

* @private
*/
declare enum RenderingSpace {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderingSpace/properties/RenderingSpace-ObjectSpace.md Edit}
    
    * @private
    */
    ObjectSpace,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderingSpace/properties/RenderingSpace-WorldSpace.md Edit}
    
    * @private
    */
    WorldSpace,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderingSpace/properties/RenderingSpace-ScreenSpace.md Edit}
    
    * @private
    */
    ScreenSpace
}

/**
* Represents a mesh asset.
* See also: [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/RenderMesh-description.md Edit}
*/
interface RenderMesh extends Asset {
    /**
    * Returns a list of indices of each vertices in the RenderMesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/methods/RenderMesh-extractIndices.md Edit}
    */
    extractIndices(): number[]
    
    /**
    * Returns a list of values of each vertices in the RenderMesh for the specified attribute.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/methods/RenderMesh-extractVerticesForAttribute.md Edit}
    */
    extractVerticesForAttribute(attributeName: string): number[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/methods/RenderMesh-getIndices.md Edit}
    
    * @deprecated
    
    * @private
    */
    getIndices(): number[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/methods/RenderMesh-getVerticesForAttribute.md Edit}
    
    * @deprecated
    
    * @private
    */
    getVerticesForAttribute(attributeName: string): number[]
    
    /**
    * Returns the maximum value in each dimension of the axis-aligned bounding box containing this mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/properties/RenderMesh-aabbMax.md Edit}
    
    * @readonly
    */
    aabbMax: vec3
    
    /**
    * Returns the minimum value in each dimension of the axis-aligned bounding box containing this mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/properties/RenderMesh-aabbMin.md Edit}
    
    * @readonly
    */
    aabbMin: vec3
    
    /**
    * The RenderObjectProvider for this RenderMesh, which can provide more controls depending on the mesh type.
    * See also: [FaceRenderObjectProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Providers#FaceRenderObjectProvider)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/properties/RenderMesh-control.md Edit}
    */
    control: RenderObjectProvider
    
    /**
    * The index data type used by this mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/properties/RenderMesh-indexType.md Edit}
    
    * @readonly
    */
    indexType: MeshIndexType
    
    /**
    * The topology type used by this mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMesh/properties/RenderMesh-topology.md Edit}
    
    * @readonly
    */
    topology: MeshTopology
    
}

/**
* Renders a [RenderMesh](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#RenderMesh) asset in the scene.
* Comparable to the former class "MeshVisual", which was split into the classes:
* [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual),
* [MaterialMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#MaterialMeshVisual),
* and [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/RenderMeshVisual-description.md Edit}
*/
interface RenderMeshVisual extends MaterialMeshVisual {
    /**
    * Resets all blend shape weights on the component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-clearBlendShapeWeights.md Edit}
    */
    clearBlendShapeWeights(): void
    
    /**
    * Returns the names of the blend shapes on this RenderMeshVisual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-getBlendShapeNames.md Edit}
    */
    getBlendShapeNames(): string[]
    
    /**
    * Returns the weight of the blend shape with the matching name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-getBlendShapeWeight.md Edit}
    */
    getBlendShapeWeight(name: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-getRenderMesh.md Edit}
    
    * @deprecated
    
    * @private
    */
    getRenderMesh(): RenderMesh
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-getRenderMeshName.md Edit}
    
    * @private
    */
    getRenderMeshName(): string
    
    /**
    * Returns whether this component has a weight for the blend shape with matching name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-hasBlendShapeWeight.md Edit}
    */
    hasBlendShapeWeight(name: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-setBlendShape.md Edit}
    
    * @deprecated
    */
    setBlendShape(value: BlendShapes): void
    
    /**
    * Sets the weight of the blend shape with the matching name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-setBlendShapeWeight.md Edit}
    */
    setBlendShapeWeight(name: string, weight: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-setRenderMesh.md Edit}
    
    * @deprecated
    
    * @private
    */
    setRenderMesh(value: RenderMesh): void
    
    /**
    * Sets the [Skin](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Skin) to use for rendering this mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-setSkin.md Edit}
    */
    setSkin(value: Skin): void
    
    /**
    *  Clears the blend shape with the matching name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/methods/RenderMeshVisual-unsetBlendShapeWeight.md Edit}
    */
    unsetBlendShapeWeight(name: string): void
    
    /**
    * If enabled, normal directions are also blended by blend shapes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/properties/RenderMeshVisual-blendNormals.md Edit}
    */
    blendNormals: boolean
    
    /**
    * The [BlendShapes](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BlendShapes) component used for rendering this mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/properties/RenderMeshVisual-blendShape.md Edit}
    
    * @deprecated
    */
    blendShape: BlendShapes
    
    /**
    * If enabled, blend shapes will affect the component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/properties/RenderMeshVisual-blendShapesEnabled.md Edit}
    */
    blendShapesEnabled: boolean
    
    /**
    * If enabled, rays are generated from this object during raytracing so that it can receive ray-traced reflections.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/properties/RenderMeshVisual-emitter.md Edit}
    */
    emitter: boolean
    
    /**
    * The [RenderMesh](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#RenderMesh) asset to render.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/properties/RenderMeshVisual-mesh.md Edit}
    */
    mesh: RenderMesh
    
    /**
    * If enabled, rays can hit this object during raytracing so that it may be visible in ray-traced reflections.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/properties/RenderMeshVisual-receiver.md Edit}
    */
    receiver: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderMeshVisual/properties/RenderMeshVisual-renderingSpace.md Edit}
    
    * @private
    */
    renderingSpace: RenderingSpace
    
}

/**
* Provider for RenderMesh data.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderObjectProvider/RenderObjectProvider-description.md Edit}
*/
interface RenderObjectProvider extends Provider {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderObjectWithLayerJS/RenderObjectWithLayerJS-description.md Edit}

* @private
*/
interface RenderObjectWithLayerJS extends RenderAPIObjectJS {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderObjectWithLayerJS/properties/RenderObjectWithLayerJS-layerToInclude.md Edit}
    
    * @private
    */
    layerToInclude: LayerSet
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderObjectWithMeshJS/RenderObjectWithMeshJS-description.md Edit}

* @private
*/
interface RenderObjectWithMeshJS extends RenderAPIObjectJS {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderObjectWithMeshJS/properties/RenderObjectWithMeshJS-mesh.md Edit}
    
    * @private
    */
    mesh: RenderMesh
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderObjectWithVisualJS/RenderObjectWithVisualJS-description.md Edit}

* @private
*/
interface RenderObjectWithVisualJS extends RenderAPIObjectJS {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderObjectWithVisualJS/properties/RenderObjectWithVisualJS-visual.md Edit}
    
    * @private
    */
    visual: Visual
    
}

/**
* Controls a camera texture resource.
* Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider) on a Camera texture.
* For more information, see the [Camera and Layers](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/camera) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/RenderTargetProvider-description.md Edit}
*/
interface RenderTargetProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-antialiasingMode.md Edit}
    
    * @private
    */
    antialiasingMode: RenderTargetProvider.AntialiasingMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-antialiasingQuality.md Edit}
    
    * @private
    */
    antialiasingQuality: RenderTargetProvider.AntialiasingQuality
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-camera.md Edit}
    
    * @deprecated
    
    * @private
    */
    camera: Camera
    
    /**
    * When `clearColorEnabled` is true and `inputTexture` is null, this color is used to clear this RenderTarget the first time it is drawn to each frame.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-clearColor.md Edit}
    */
    clearColor: vec4
    
    /**
    * If true, the color on this RenderTarget will be cleared the first time it is drawn to each frame.
    * `inputTexture` will be used to clear it unless it is null, in which case `clearColor` is used instead.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-clearColorEnabled.md Edit}
    */
    clearColorEnabled: boolean
    
    /**
    * Sets the clear color option.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-clearColorOption.md Edit}
    */
    clearColorOption: ClearColorOption
    
    /**
    * If true, the depth buffer will be cleared on this RenderTarget the first time it is drawn to each frame.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-clearDepthEnabled.md Edit}
    */
    clearDepthEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-depthBufferUsage.md Edit}
    
    * @private
    */
    depthBufferUsage: RenderTargetProvider.DepthBufferUsage
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-fxaa.md Edit}
    
    * @deprecated
    
    * @private
    */
    fxaa: boolean
    
    /**
    * When `clearColorEnabled` is true, this texture is used to clear this RenderTarget the first time it is drawn to each frame.
    * If this texture is null, `clearColor` will be used instead.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-inputTexture.md Edit}
    */
    inputTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-mipmapsEnabled.md Edit}
    
    * @private
    */
    mipmapsEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-msaa.md Edit}
    
    * @deprecated
    
    * @private
    */
    msaa: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-msaaStrategy.md Edit}
    
    * @private
    */
    msaaStrategy: RenderTargetProvider.MSAAStrategy
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-outputResolution.md Edit}
    
    * @private
    */
    outputResolution: RenderTargetProvider.OutputResolution
    
    /**
    * When `useScreenResolution` is false, controls the horizontal and vertical resolution of the Render Target.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-resolution.md Edit}
    */
    resolution: vec2
    
    /**
    * When Use Screen Resolution is enabled, this scales the render target resolution relative to the device resolution.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-resolutionScale.md Edit}
    */
    resolutionScale: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-textureFormat.md Edit}
    
    * @private
    */
    textureFormat: Colorspace
    
    /**
    * The texture type of the render target.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-textureType.md Edit}
    */
    textureType: RenderTargetProvider.TextureType
    
    /**
    * If true, the Render Target's resolution will match the device's screen resolution.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider/properties/RenderTargetProvider-useScreenResolution.md Edit}
    */
    useScreenResolution: boolean
    
}

declare namespace RenderTargetProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingMode/RenderTargetProvider.AntialiasingMode-description.md Edit}
    
    * @private
    */
    enum AntialiasingMode {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingMode/properties/RenderTargetProvider.AntialiasingMode-Disabled.md Edit}
        
        * @private
        */
        Disabled,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingMode/properties/RenderTargetProvider.AntialiasingMode-MSAA.md Edit}
        
        * @private
        */
        MSAA
    }

}

declare namespace RenderTargetProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingQuality/RenderTargetProvider.AntialiasingQuality-description.md Edit}
    
    * @private
    */
    enum AntialiasingQuality {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingQuality/properties/RenderTargetProvider.AntialiasingQuality-Low.md Edit}
        
        * @private
        */
        Low,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingQuality/properties/RenderTargetProvider.AntialiasingQuality-Medium.md Edit}
        
        * @private
        */
        Medium,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingQuality/properties/RenderTargetProvider.AntialiasingQuality-High.md Edit}
        
        * @private
        */
        High,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingQuality/properties/RenderTargetProvider.AntialiasingQuality-Ultra.md Edit}
        
        * @private
        */
        Ultra,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.AntialiasingQuality/properties/RenderTargetProvider.AntialiasingQuality-Default.md Edit}
        
        * @private
        */
        Default
    }

}

declare namespace RenderTargetProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.DepthBufferUsage/RenderTargetProvider.DepthBufferUsage-description.md Edit}
    
    * @private
    */
    enum DepthBufferUsage {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.DepthBufferUsage/properties/RenderTargetProvider.DepthBufferUsage-Auto.md Edit}
        
        * @private
        */
        Auto,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.DepthBufferUsage/properties/RenderTargetProvider.DepthBufferUsage-ForceOff.md Edit}
        
        * @private
        */
        ForceOff,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.DepthBufferUsage/properties/RenderTargetProvider.DepthBufferUsage-ForceOn.md Edit}
        
        * @private
        */
        ForceOn
    }

}

declare namespace RenderTargetProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.MSAAStrategy/RenderTargetProvider.MSAAStrategy-description.md Edit}
    
    * @private
    */
    enum MSAAStrategy {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.MSAAStrategy/properties/RenderTargetProvider.MSAAStrategy-Default.md Edit}
        
        * @private
        */
        Default,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.MSAAStrategy/properties/RenderTargetProvider.MSAAStrategy-OnlyWhenRequired.md Edit}
        
        * @private
        */
        OnlyWhenRequired
    }

}

declare namespace RenderTargetProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.OutputResolution/RenderTargetProvider.OutputResolution-description.md Edit}
    
    * @private
    */
    enum OutputResolution {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.OutputResolution/properties/RenderTargetProvider.OutputResolution-Camera.md Edit}
        
        * @private
        */
        Camera,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.OutputResolution/properties/RenderTargetProvider.OutputResolution-Custom.md Edit}
        
        * @private
        */
        Custom,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.OutputResolution/properties/RenderTargetProvider.OutputResolution-Screen.md Edit}
        
        * @private
        */
        Screen
    }

}

declare namespace RenderTargetProvider {
    /**
    * Specifies what kind of render target it is. Some texture types, for example TextureCubemap, need additional properties set on the rendering camera to work correctly.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.TextureType/RenderTargetProvider.TextureType-description.md Edit}
    */
    enum TextureType {
        /**
        * A 2d texture. Render targets are this type by default.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.TextureType/properties/RenderTargetProvider.TextureType-Texture2D.md Edit}
        */
        Texture2D,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.TextureType/properties/RenderTargetProvider.TextureType-Texture2DArray.md Edit}
        */
        Texture2DArray,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.TextureType/properties/RenderTargetProvider.TextureType-Texture3D.md Edit}
        */
        Texture3D,
        /**
        * A cubemap render target.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RenderTargetProvider.TextureType/properties/RenderTargetProvider.TextureType-TextureCubemap.md Edit}
        */
        TextureCubemap
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ResamplingQuality/ResamplingQuality-description.md Edit}

* @private
*/
declare enum ResamplingQuality {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ResamplingQuality/properties/ResamplingQuality-None.md Edit}
    
    * @private
    */
    None,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ResamplingQuality/properties/ResamplingQuality-High.md Edit}
    
    * @private
    */
    High
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RestrictionComponent/RestrictionComponent-description.md Edit}

* @private
*/
interface RestrictionComponent extends Component {
}

/**
* Visual effect used to add subtle retouching effects to detected faces (soft skin, teeth whitening, etc.).
* To learn more, visit the [Retouch Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-retouch).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/RetouchVisual-description.md Edit}
*/
interface RetouchVisual extends MaterialMeshVisual {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/methods/RetouchVisual-isAuto.md Edit}
    */
    isAuto(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-autoMode.md Edit}
    
    * @deprecated
    
    * @private
    */
    autoMode: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-eyeSharpeningEnabled.md Edit}
    
    * @readonly
    */
    eyeSharpeningEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-eyeWhiteningEnabled.md Edit}
    
    * @readonly
    */
    eyeWhiteningEnabled: boolean
    
    /**
    * The strength of the eye whitening effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-eyeWhiteningIntensity.md Edit}
    */
    eyeWhiteningIntensity: number
    
    /**
    * The index of the face the effect is being applied to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-faceIndex.md Edit}
    */
    faceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-lookupTexture.md Edit}
    
    * @deprecated
    */
    lookupTexture: Texture
    
    /**
    * The Texture used to mask the effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-maskTexture.md Edit}
    
    * @deprecated
    */
    maskTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-shaderFlags.md Edit}
    
    * @private
    */
    shaderFlags: number
    
    /**
    * The strength of the eye sharpening effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-sharpenEyeIntensity.md Edit}
    */
    sharpenEyeIntensity: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-softSkinEnabled.md Edit}
    
    * @readonly
    */
    softSkinEnabled: boolean
    
    /**
    * The strength of the soft-skin effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-softSkinIntensity.md Edit}
    */
    softSkinIntensity: number
    
    /**
    * The blur radius of the soft skin effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-softSkinRadius.md Edit}
    
    * @deprecated
    */
    softSkinRadius: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-teethWhiteningEnabled.md Edit}
    
    * @readonly
    */
    teethWhiteningEnabled: boolean
    
    /**
    * The strength of the teeth whitening effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RetouchVisual/properties/RetouchVisual-teethWhiteningIntensity.md Edit}
    */
    teethWhiteningIntensity: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ReverseCameraTextureProvider/ReverseCameraTextureProvider-description.md Edit}

* @private
*/
interface ReverseCameraTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ReverseCameraTextureProvider/methods/ReverseCameraTextureProvider-closeCamera.md Edit}
    
    * @private
    */
    closeCamera(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ReverseCameraTextureProvider/methods/ReverseCameraTextureProvider-openCamera.md Edit}
    
    * @private
    */
    openCamera(): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RotatedRect/RotatedRect-description.md Edit}
*/
interface RotatedRect extends ScriptObject {
    /**
    * Returns the description of RotatedRect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RotatedRect/methods/RotatedRect-toString.md Edit}
    */
    toString(): string
    
    /**
    * The rotation angle in degrees.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RotatedRect/properties/RotatedRect-angle.md Edit}
    */
    angle: number
    
    /**
    * The center point (mass center) of RotatedRect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RotatedRect/properties/RotatedRect-center.md Edit}
    */
    center: vec2
    
    /**
    * The width and height of RotatedRect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RotatedRect/properties/RotatedRect-size.md Edit}
    */
    size: vec2
    
}
declare namespace RotatedRect {
    /**
    * Creates a RotatedRect object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RotatedRect/methods/RotatedRect-create.md Edit}
    */
    export function create(center: vec2, size: vec2, angle: number): RotatedRect
    

}

/**
* Used with [DeviceTracking.rotationOptions](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) to change settings for Rotation tracking mode.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RotationOptions/RotationOptions-description.md Edit}
*/
interface RotationOptions extends ScriptObject {
    /**
    * If enabled, rotation will be inverted.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/RotationOptions/properties/RotationOptions-invertRotation.md Edit}
    */
    invertRotation: boolean
    
}

/**
* Applies a constant rotation to the object every frame.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rotator/Rotator-description.md Edit}

* @private
*/
interface Rotator extends Component {
    /**
    * Sets the constant rotation amount to `rotation`. This is applied every frame at a rate of one `rotation` per second.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Rotator/methods/Rotator-setRotation.md Edit}
    
    * @private
    */
    setRotation(value: quat): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Sampler/Sampler-description.md Edit}
*/
interface Sampler extends ScriptObject {
}

/**
* Class for building Sampler.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/SamplerBuilder-description.md Edit}
*/
interface SamplerBuilder extends ScriptObject {
    /**
    * Builds Sampler.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-build.md Edit}
    */
    build(): Sampler
    
    /**
    * Sets border color that will be used for `WrapMode.ClampToBorder` case.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setBorderColor.md Edit}
    */
    setBorderColor(borderColor: vec4): SamplerBuilder
    
    /**
    * Sets the filtering mode used for textures sampling.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setFilteringMode.md Edit}
    */
    setFilteringMode(filteringMode: FilteringMode): SamplerBuilder
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setMipBias.md Edit}
    
    * @private
    */
    setMipBias(bias: number): SamplerBuilder
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setResamplingQuality.md Edit}
    
    * @private
    */
    setResamplingQuality(quality: ResamplingQuality): SamplerBuilder
    
    /**
    * Sets the flag to use/generate texture mipmaps if they exist/requested.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setUseMipmaps.md Edit}
    */
    setUseMipmaps(value: boolean): SamplerBuilder
    
    /**
    * Sets the same wrap mode for all U, V and W axes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setWrapMode.md Edit}
    */
    setWrapMode(wrapMode: WrapMode): SamplerBuilder
    
    /**
    * Sets the wrap mode U axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setWrapUMode.md Edit}
    */
    setWrapUMode(wrapMode: WrapMode): SamplerBuilder
    
    /**
    * Sets the wrap mode V axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setWrapVMode.md Edit}
    */
    setWrapVMode(wrapMode: WrapMode): SamplerBuilder
    
    /**
    * Sets the wrap mode W axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerBuilder/methods/SamplerBuilder-setWrapWMode.md Edit}
    */
    setWrapWMode(wrapMode: WrapMode): SamplerBuilder
    
}

/**
* An accessor for Pass.samplers when using PassWrappers

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerWrapper/SamplerWrapper-description.md Edit}
*/
interface SamplerWrapper extends ScriptObject {
    /**
    * How the texture will be filtered by the sampler.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerWrapper/properties/SamplerWrapper-filtering.md Edit}
    */
    filtering: FilteringMode
    
    /**
    * The texture used by the sampler.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerWrapper/properties/SamplerWrapper-texture.md Edit}
    */
    texture: Texture
    
    /**
    * Whether the texture should wrap.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerWrapper/properties/SamplerWrapper-wrap.md Edit}
    */
    wrap: WrapMode
    
    /**
    * Whether the texture should wrap in the x-axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerWrapper/properties/SamplerWrapper-wrapU.md Edit}
    */
    wrapU: WrapMode
    
    /**
    * Whether the texture should wrap in the y-axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerWrapper/properties/SamplerWrapper-wrapV.md Edit}
    */
    wrapV: WrapMode
    
    /**
    * Whether the texture should wrap in the z-axis.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerWrapper/properties/SamplerWrapper-wrapW.md Edit}
    */
    wrapW: WrapMode
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SamplerWrappers/SamplerWrappers-description.md Edit}
*/
interface SamplerWrappers extends ScriptObject {
}

/**
* Asset for detecting an object through the Scan system.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule/ScanModule-description.md Edit}

* @exposesUserData
*/
interface ScanModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule/methods/ScanModule-realTimeScan.md Edit}
    
    * @private
    */
    realTimeScan(className: string, boundingBox: Rect, scanComplete: (resultJson: string) => void, scanFailed: (failureMessage: string) => void): void
    
    /**
    * Starts a single Scan call using the provided list of ScanModule.Contexts. On success it will invoke `scanComplete` providing a JSON string. On failure it will invoke `onFailure` with a failure message passed in as an argument.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule/methods/ScanModule-scan.md Edit}
    */
    scan(contexts: string[], scanComplete: (resultJson: string) => void, scanFailed: (failureMessage: string) => void): void
    
    /**
    * Optional property to pass in a texture for Scan to use.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule/properties/ScanModule-scanTarget.md Edit}
    */
    scanTarget: Texture
    
}

declare namespace ScanModule {
    /**
    * Contexts used in `ScanModule.scan()`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/ScanModule.Contexts-description.md Edit}
    */
    interface Contexts {
    }

}
declare namespace ScanModule {
    namespace Contexts {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Barcode.md Edit}
        
        * @private
        */
        let Barcode: string
        
        /**
        * Category containing cars.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Cars.md Edit}
        */
        let Cars: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Cats.md Edit}
        
        * @private
        */
        let Cats: string
        
        /**
        * Category containing dogs.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Dogs.md Edit}
        */
        let Dogs: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Food.md Edit}
        
        * @private
        */
        let Food: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-ObjectDetection.md Edit}
        
        * @private
        */
        let ObjectDetection: string
        
        /**
        * Category containing objects.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Objects.md Edit}
        */
        let Objects: string
        
        /**
        * Category containing places.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Places.md Edit}
        */
        let Places: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Plants.md Edit}
        
        * @private
        */
        let Plants: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Spotlight.md Edit}
        
        * @private
        */
        let Spotlight: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-WebImages.md Edit}
        
        * @private
        */
        let WebImages: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScanModule.Contexts/properties/ScanModule.Contexts-Wines.md Edit}
        
        * @private
        */
        let Wines: string
        
    
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig/SceneConfig-description.md Edit}

* @private
*/
interface SceneConfig extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig/properties/SceneConfig-enableDirtyOnlyRendering.md Edit}
    
    * @private
    */
    enableDirtyOnlyRendering: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig/properties/SceneConfig-equalCameraOrderStrategy.md Edit}
    
    * @private
    */
    equalCameraOrderStrategy: SceneConfig.EqualCameraOrderStrategy
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig/properties/SceneConfig-faceStretchAlgorithm.md Edit}
    
    * @private
    */
    faceStretchAlgorithm: SceneConfig.FaceStretchAlgorithm
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig/properties/SceneConfig-faceStretchBatchingStrategy.md Edit}
    
    * @private
    */
    faceStretchBatchingStrategy: SceneConfig.FaceStretchBatchingStrategy
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig/properties/SceneConfig-renderTargetStrategy.md Edit}
    
    * @private
    */
    renderTargetStrategy: SceneConfig.RenderTargetStrategy
    
}

declare namespace SceneConfig {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.EqualCameraOrderStrategy/SceneConfig.EqualCameraOrderStrategy-description.md Edit}
    
    * @private
    */
    enum EqualCameraOrderStrategy {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.EqualCameraOrderStrategy/properties/SceneConfig.EqualCameraOrderStrategy-ByCameraOrder.md Edit}
        
        * @private
        */
        ByCameraOrder,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.EqualCameraOrderStrategy/properties/SceneConfig.EqualCameraOrderStrategy-ByRenderTargetOrder.md Edit}
        
        * @private
        */
        ByRenderTargetOrder
    }

}

declare namespace SceneConfig {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.FaceStretchAlgorithm/SceneConfig.FaceStretchAlgorithm-description.md Edit}
    
    * @private
    */
    enum FaceStretchAlgorithm {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.FaceStretchAlgorithm/properties/SceneConfig.FaceStretchAlgorithm-OldStretchAlgorithm.md Edit}
        
        * @private
        */
        OldStretchAlgorithm,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.FaceStretchAlgorithm/properties/SceneConfig.FaceStretchAlgorithm-NewStretchAlgorithm.md Edit}
        
        * @private
        */
        NewStretchAlgorithm
    }

}

declare namespace SceneConfig {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.FaceStretchBatchingStrategy/SceneConfig.FaceStretchBatchingStrategy-description.md Edit}
    
    * @private
    */
    enum FaceStretchBatchingStrategy {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.FaceStretchBatchingStrategy/properties/SceneConfig.FaceStretchBatchingStrategy-EqualRenderOrders.md Edit}
        
        * @private
        */
        EqualRenderOrders,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.FaceStretchBatchingStrategy/properties/SceneConfig.FaceStretchBatchingStrategy-NonEqualRenderOrders.md Edit}
        
        * @private
        */
        NonEqualRenderOrders,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.FaceStretchBatchingStrategy/properties/SceneConfig.FaceStretchBatchingStrategy-UnifyWithLiquify.md Edit}
        
        * @private
        */
        UnifyWithLiquify
    }

}

declare namespace SceneConfig {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.RenderTargetStrategy/SceneConfig.RenderTargetStrategy-description.md Edit}
    
    * @private
    */
    enum RenderTargetStrategy {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.RenderTargetStrategy/properties/SceneConfig.RenderTargetStrategy-CameraInRenderTarget.md Edit}
        
        * @private
        */
        CameraInRenderTarget,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneConfig.RenderTargetStrategy/properties/SceneConfig.RenderTargetStrategy-RenderTargetInCamera.md Edit}
        
        * @private
        */
        RenderTargetInCamera
    }

}

/**
* The base class for scenewide events.  SceneEvents can be created using [ScriptComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScriptComponent)'s [createEvent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#scriptcomponent--createEvent) method.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneEvent/SceneEvent-description.md Edit}
*/
interface SceneEvent extends IEventParameters {
    /**
    * Binds a callback function to this event.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneEvent/methods/SceneEvent-bind.md Edit}
    */
    bind(evCallback: (arg1: this) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneEvent/methods/SceneEvent-getTrackingRequirement.md Edit}
    
    * @private
    */
    getTrackingRequirement(): any
    
    /**
    * Returns the typename of the SceneEvent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneEvent/methods/SceneEvent-getTypeName.md Edit}
    */
    getTypeName(): string
    
    /**
    * If true, the event is able to trigger. If false, the event will not trigger.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneEvent/properties/SceneEvent-enabled.md Edit}
    */
    enabled: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneIntelligenceSystem/SceneIntelligenceSystem-description.md Edit}

* @private
*/
interface SceneIntelligenceSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneIntelligenceSystem/methods/SceneIntelligenceSystem-requestTexture.md Edit}
    
    * @private
    */
    requestTexture(url: string, successCallback: (texture: Texture) => void, failureCallback: (error: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneIntelligenceSystem/methods/SceneIntelligenceSystem-start.md Edit}
    
    * @private
    */
    start(contexts: string[], successCallback: (response: string) => void, failureCallback: (response: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneIntelligenceSystem/methods/SceneIntelligenceSystem-startWithDefaultContext.md Edit}
    
    * @private
    */
    startWithDefaultContext(successCallback: (response: string) => void, failureCallback: (response: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneIntelligenceSystem/methods/SceneIntelligenceSystem-stop.md Edit}
    
    * @private
    */
    stop(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneIntelligenceSystem/properties/SceneIntelligenceSystem-textureRequestTimeoutSeconds.md Edit}
    
    * @private
    */
    textureRequestTimeoutSeconds: number
    
}

/**
* An object in the scene hierarchy, containing a [Transform](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Transform) and possibly [Components](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components).
* A script can access the SceneObject holding it through the method `script.getSceneObject()`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/SceneObject-description.md Edit}
*/
interface SceneObject extends SerializableWithUID {
    /**
    * Copies `component` and adds it to the SceneObject, then returns it.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-copyComponent.md Edit}
    */
    copyComponent<K extends Component>(component: K): K
    
    /**
    * Creates a shallow copy of the passed in `sceneObject` (not including its hierarchy), and parents it to this SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-copySceneObject.md Edit}
    */
    copySceneObject(sceneObject: SceneObject): SceneObject
    
    /**
    * Creates a deep copy of the passed in `sceneObject` (including its hierarchy), and parents it to this SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-copyWholeHierarchy.md Edit}
    */
    copyWholeHierarchy(sceneObject: SceneObject): SceneObject
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-copyWholeHierarchyAndAssets.md Edit}
    
    * @private
    */
    copyWholeHierarchyAndAssets(sceneObject: SceneObject): SceneObject
    
    /**
    * Adds a new component of type `typeName` to the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-createComponent.md Edit}
    */
    createComponent<K extends keyof ComponentNameMap>(typeName: K): ComponentNameMap[K]
    
    /**
    * Destroys the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-destroy.md Edit}
    */
    destroy(): void
    
    /**
    * Returns a list of all components attached to the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getAllComponents.md Edit}
    
    * @deprecated
    */
    getAllComponents(): Component[]
    
    /**
    * Returns this SceneObject's child at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getChild.md Edit}
    */
    getChild(index: number): SceneObject
    
    /**
    * Returns the number of children the SceneObject has.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getChildrenCount.md Edit}
    */
    getChildrenCount(): number
    
    /**
    * Returns the first attached Component with type matching or deriving from `componentType`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getComponent.md Edit}
    */
    getComponent<K extends keyof ComponentNameMap>(componentType: K): ComponentNameMap[K]
    
    /**
    * Returns the attached component of type `componentType` at index `index`.  If `componentType` is an empty string, all component types are considered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getComponentByIndex.md Edit}
    
    * @deprecated
    */
    getComponentByIndex<K extends keyof ComponentNameMap>(componentType: K, index: number): ComponentNameMap[K]
    
    /**
    * Returns the number of components of type `componentType` attached to the SceneObject.  If `componentType` is an empty string, the total number of components attached is returned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getComponentCount.md Edit}
    
    * @deprecated
    */
    getComponentCount<K extends keyof ComponentNameMap>(componentType: K): number
    
    /**
    * Returns a list of attached components with types matching or deriving from `componentType`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getComponents.md Edit}
    */
    getComponents<K extends keyof ComponentNameMap>(componentType: K): ComponentNameMap[K][]
    
    /**
    * Returns the first attached component of type `componentType`.  If `componentType` is an empty string, the first component of any type is returned.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getFirstComponent.md Edit}
    
    * @deprecated
    */
    getFirstComponent<K extends keyof ComponentNameMap>(componentType: K): ComponentNameMap[K]
    
    /**
    * Returns the SceneObject's parent in the hierarchy, or null if there isn't one.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getParent.md Edit}
    */
    getParent(): SceneObject
    
    /**
    * Returns the current render layer of the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getRenderLayer.md Edit}
    
    * @deprecated
    */
    getRenderLayer(): number
    
    /**
    * Returns the Transform attached to the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-getTransform.md Edit}
    */
    getTransform(): Transform
    
    /**
    * Returns whether the SceneObject has a parent in the scene hierarchy.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-hasParent.md Edit}
    */
    hasParent(): boolean
    
    /**
    * Unparents the SceneObject in the hierarchy, making it an orphan.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-removeParent.md Edit}
    */
    removeParent(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-removeParentPreserveWorldTransform.md Edit}
    
    * @private
    */
    removeParentPreserveWorldTransform(): void
    
    /**
    * Sets the SceneObject's parent to `newParent` in the scene hierarchy.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-setParent.md Edit}
    */
    setParent(newParent: SceneObject): void
    
    /**
    * Changes the parent of the SceneObject without altering its world position, rotation, or scale.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-setParentPreserveWorldTransform.md Edit}
    */
    setParentPreserveWorldTransform(newParent: SceneObject): void
    
    /**
    * Sets the render layer of the SceneObject to `id`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/methods/SceneObject-setRenderLayer.md Edit}
    
    * @deprecated
    */
    setRenderLayer(id: number): void
    
    /**
    * Get an array of the scene object's children.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/properties/SceneObject-children.md Edit}
    
    * @readonly
    */
    children: SceneObject[]
    
    /**
    * Whether the SceneObject, including its components and children, is enabled or disabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/properties/SceneObject-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * Check if a SceneObject is enabled in the hiearchy. It is enabled if both its own enabled property is `true`, and that of all of its parents to the root of the scene.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/properties/SceneObject-isEnabledInHiearchy.md Edit}
    
    * @deprecated
    
    * @readonly
    */
    isEnabledInHiearchy: boolean
    
    /**
    * Returns true if this SceneObject and all of its parents are enabled.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/properties/SceneObject-isEnabledInHierarchy.md Edit}
    
    * @readonly
    */
    isEnabledInHierarchy: boolean
    
    /**
    * Gets or sets the LayerSet of layers this SceneObject belongs to.
    * This is used to determine which [Cameras](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) will render the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/properties/SceneObject-layer.md Edit}
    */
    layer: LayerSet
    
    /**
    * The name of the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/properties/SceneObject-name.md Edit}
    */
    name: string
    
    /**
    * An event that will trigger when a SceneObject goes from enabled in the hiearchy to disabled in the hiearchy.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/properties/SceneObject-onDisabled.md Edit}
    
    * @readonly
    */
    onDisabled: event0<void>
    
    /**
    * An event that will trigger when a SceneObject goes from disabled in the hiearchy to enabled in the hiearchy.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObject/properties/SceneObject-onEnabled.md Edit}
    
    * @readonly
    */
    onEnabled: event0<void>
    
}

/**
* Base class for all object-based Event types in Lens Studio (ManipulateStartEvent, TapEvent, etc.).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObjectEvent/SceneObjectEvent-description.md Edit}
*/
interface SceneObjectEvent extends SceneEvent {
    /**
    * Returns the SceneObject this Event is associated with.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneObjectEvent/methods/SceneObjectEvent-getSceneObject.md Edit}
    */
    getSceneObject(): SceneObject
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/SceneRecognition-description.md Edit}

* @private
*/
interface SceneRecognition extends AbstractData {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-getLabelScore.md Edit}
    
    * @private
    */
    getLabelScore(sceneLabel: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-getPredictionsCsv.md Edit}
    
    * @private
    */
    getPredictionsCsv(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-hasLabel.md Edit}
    
    * @private
    */
    hasLabel(sceneLabel: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-sceneRecognitionDataAvailable.md Edit}
    
    * @private
    */
    sceneRecognitionDataAvailable(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-setMinFramesInWindow.md Edit}
    
    * @private
    */
    setMinFramesInWindow(minFramesInWindow: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-setModelDataPath.md Edit}
    
    * @private
    */
    setModelDataPath(binFile: BinAsset): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-setNumFramesInWindow.md Edit}
    
    * @private
    */
    setNumFramesInWindow(numFramesInWindow: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-setPastWeight.md Edit}
    
    * @private
    */
    setPastWeight(pastWeight: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SceneRecognition/methods/SceneRecognition-setShouldWarpImage.md Edit}
    
    * @private
    */
    setShouldWarpImage(shouldWarp: boolean): void
    
}

/**
* Overrides the settings on a local [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) to fit a screen region on the device.
* See the [Screen Transform guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/2d/screen-transform-overview) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionComponent/ScreenRegionComponent-description.md Edit}
*/
interface ScreenRegionComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionComponent/methods/ScreenRegionComponent-getRect.md Edit}
    
    * @private
    */
    getRect(): vec4
    
    /**
    * The region of the screen the local [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) will be fit to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionComponent/properties/ScreenRegionComponent-region.md Edit}
    */
    region: ScreenRegionType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionComponent/properties/ScreenRegionComponent-resizeWithKeyboard.md Edit}
    
    * @private
    */
    resizeWithKeyboard: boolean
    
}

/**
* Types of screen regions that can be used with [ScreenRegionComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenRegionComponent).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionType/ScreenRegionType-description.md Edit}
*/
declare enum ScreenRegionType {
    /**
    * The entire screen area of the device.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionType/properties/ScreenRegionType-FullFrame.md Edit}
    */
    FullFrame,
    /**
    * The screen area shown to the user when recording. On some devices, this region is a subset of FullFrame region.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionType/properties/ScreenRegionType-Capture.md Edit}
    */
    Capture,
    /**
    * The screen area shown to the user when previewing a Snap. On some devices, this region is a subset of Capture region.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionType/properties/ScreenRegionType-Preview.md Edit}
    */
    Preview,
    /**
    * A screen area that will be visible on all devices and won't overlap Snapchat UI. Safe area to place any UI elements.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionType/properties/ScreenRegionType-SafeRender.md Edit}
    */
    SafeRender,
    /**
    * The screen area where the round "Snap" button is drawn.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenRegionType/properties/ScreenRegionType-RoundButton.md Edit}
    */
    RoundButton
}

/**
* Texture providing the current Render Target being rendered.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTextureProvider/ScreenTextureProvider-description.md Edit}
*/
interface ScreenTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTextureProvider/properties/ScreenTextureProvider-forceResolve.md Edit}
    
    * @private
    */
    forceResolve: boolean
    
}

/**
* Used for positioning objects in 2d screen space. It overrides the regular [Transform](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Transform) component on the SceneObject it's attached to.

* See the [Screen Transform guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/2d/screen-transform-overview) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/ScreenTransform-description.md Edit}
*/
interface ScreenTransform extends Component {
    /**
    * Returns true if the local point is within the boundaries of this ScreenTransform--that is: its position is within `-1` and `1` in both the x and y coordinates.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-containsLocalPoint.md Edit}
    */
    containsLocalPoint(localPoint: vec2): boolean
    
    /**
    * Returns true if the screen position is within the boundaries of this ScreenTransform.
    * Useful for checking if a touch event overlaps with this object. 
    * This function will calculate the ScreenPoint by heuristically looking for a camera: first checking for a camera in it's parent's hierarchy, then looking for a camera with the same render layer, and finally just choosing the first camera in the scene.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-containsScreenPoint.md Edit}
    */
    containsScreenPoint(screenPoint: vec2): boolean
    
    /**
    * Returns true if the world position is within the boundaries of this ScreenTransform.
    * The `z` value of the world position is ignored.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-containsWorldPoint.md Edit}
    */
    containsWorldPoint(worldPoint: vec3): boolean
    
    /**
    * Returns true if this ScreenTransform is in a valid screen hierarchy, which is required for anchoring to work.
    * To be in a valid screen hierarchy there must be a [Camera](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) component upward in the parent hierarchy, and every
    * object between the Camera and this one must also have a ScreenTransform.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-isInScreenHierarchy.md Edit}
    */
    isInScreenHierarchy(): boolean
    
    /**
    * Converts from a normalized (-1 to 1) position within this ScreenTransform's bounds to a screen position. This function will calculate the ScreenPoint by heuristically looking for a camera: first checking for a camera in it's parent's hierarchy, then looking for a camera with the same render layer, and finally just choosing the first camera in the scene.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-localPointToScreenPoint.md Edit}
    */
    localPointToScreenPoint(relativeLocalPoint: vec2): vec2
    
    /**
    * Converts from a normalized (-1 to 1) position within this ScreenTransform's bounds to a world position.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-localPointToWorldPoint.md Edit}
    */
    localPointToWorldPoint(relativeLocalPoint: vec2): vec3
    
    /**
    * Converts from a screen position to a normalized (-1 to 1) position within this ScreenTransform's bounds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-screenPointToLocalPoint.md Edit}
    */
    screenPointToLocalPoint(screenPoint: vec2): vec2 | undefined
    
    /**
    * Converts from a screen position to a normalized (-1 to 1) position within the parent object's bounds.
    * This value is useful because it can be used directly for this ScreenTransform's anchor positioning.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-screenPointToParentPoint.md Edit}
    */
    screenPointToParentPoint(screenPoint: vec2): vec2 | undefined
    
    /**
    * Converts from a world position to a normalized (-1 to 1) position within this ScreenTransform's bounds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-worldPointToLocalPoint.md Edit}
    */
    worldPointToLocalPoint(worldPoint: vec3): vec2
    
    /**
    * Converts from a world position to a normalized (-1 to 1) position within the parent object's bounds.
    * This value is useful because it can be used directly for this ScreenTransform's anchor positioning.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/methods/ScreenTransform-worldPointToParentPoint.md Edit}
    */
    worldPointToParentPoint(worldPoint: vec3): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-anchor.md Edit}
    
    * @deprecated
    
    * @private
    */
    anchor: vec4
    
    /**
    * The anchor rect positioning this ScreenTransform proportional to its parent's bounds.
    * For each field, a value of `0` equals the parent's center point, and value of `-1` or `1` (depending on the side) equals the parent's full boundary.
    
    * For example, a `top` value of `1.0` means this ScreenTransform's top edge will be exactly at the top edge of its parent.
    
    * A `bottom` value of `-0.5` means this ScreenTransform's bottom edge will be halfway between its parent's bottom edge and center.
    
    * A `right` value of `0` means this ScreenTransform's right edge will be exactly at its parent's center.
    
    * A `left` value of `-2` means this ScreenTransform's left edge will be twice as far from its parent's center as its parent's left edge is.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-anchors.md Edit}
    */
    anchors: Rect
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-enableDebugRendering.md Edit}
    */
    enableDebugRendering: boolean
    
    /**
    * This rect is applied after `anchors` to determine the final boundaries of the ScreenTransform.
    * It adds an offset in world units (based on the parent [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `size` property) to each edge of the ScreenTransform's boundaries.
    
    * For example, a value of `0` for any side will have no effect on boundaries.
    
    *  A value of `1.0` for any side will offset that edge by `1.0` world unit.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-offsets.md Edit}
    */
    offsets: Rect
    
    /**
    * Normalized (x, y) position of the center point used in rotation. (-1, -1) being bottom left, (0, 0) being center, and (1, 1) being top right of the image.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-pivot.md Edit}
    */
    pivot: vec2
    
    /**
    * Basic local position in world units relative to the parent's center. Useful for animating screen elements with a simple offset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-position.md Edit}
    */
    position: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-rect.md Edit}
    
    * @deprecated
    
    * @private
    */
    rect: vec4
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-rectAnchor.md Edit}
    
    * @deprecated
    
    * @private
    */
    rectAnchor: vec4
    
    /**
    * Basic local rotation applied to the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-rotation.md Edit}
    */
    rotation: quat
    
    /**
    * Basic local scaling applied to the SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScreenTransform/properties/ScreenTransform-scale.md Edit}
    */
    scale: vec3
    
}

/**
* Represents a JavaScript script which can be used to add logic in your Lens.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptAsset/ScriptAsset-description.md Edit}
*/
interface ScriptAsset extends Asset {
}

/**
* Binds scripts to Events and executes them when triggered. Any script can access the ScriptComponent executing them through the variable `script`.
* See also: [Scripting Overview](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/scripting-overview#script-components), [Script Events Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/script-events#introduction).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptComponent/ScriptComponent-description.md Edit}
*/
interface ScriptComponent extends Component {
    [index:string]: any
    
    /**
    * Adds a new SceneEvent, triggered by `eventType` events, to the ScriptComponent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptComponent/methods/ScriptComponent-createEvent.md Edit}
    */
    createEvent<K extends keyof EventNameMap>(eventType: K): EventNameMap[K]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptComponent/methods/ScriptComponent-getReferencedEvents.md Edit}
    
    * @private
    */
    getReferencedEvents(): SceneEvent[]
    
    /**
    * Removes a previously added SceneEvent from the ScriptComponent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptComponent/methods/ScriptComponent-removeEvent.md Edit}
    */
    removeEvent(event: SceneEvent): void
    
    /**
    * Generic object accessible by other instances of ScriptComponent. Use this object to store references to properties and methods that need to be accessible from other ScriptComponents.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptComponent/properties/ScriptComponent-api.md Edit}
    
    * @deprecated
    */
    api: Record<string, any>
    
}

/**
* Base class for objects representing Script data.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptObject/ScriptObject-description.md Edit}
*/
interface ScriptObject {
    /**
    * Returns the name of this object's type.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptObject/methods/ScriptObject-getTypeName.md Edit}
    */
    getTypeName(): string
    
    /**
    * Returns true if the object matches or derives from the passed in type.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptObject/methods/ScriptObject-isOfType.md Edit}
    */
    isOfType(type: string): boolean
    
    /**
    * Returns true if this object is the same as `other`. Useful for checking if two references point to the same thing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptObject/methods/ScriptObject-isSame.md Edit}
    */
    isSame(other: ScriptObject): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptObject/methods/ScriptObject-toString.md Edit}
    
    * @private
    */
    toString(): string
    
}

/**
* Represents the Lens scene. Accessible through `global.scene`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/ScriptScene-description.md Edit}
*/
interface ScriptScene extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-createARDepthTexture.md Edit}
    
    * @private
    */
    createARDepthTexture(): Texture
    
    /**
    * Create a texture containing the DepthStencilRenderTargetProvider.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-createDepthStencilRenderTargetTexture.md Edit}
    */
    createDepthStencilRenderTargetTexture(): Texture
    
    /**
    * Creates a new Render Target texture with a [RenderTargetProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Providers#RenderTargetProvider) as its `control` property.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-createRenderTargetTexture.md Edit}
    */
    createRenderTargetTexture(): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-createResourceProvider.md Edit}
    
    * @private
    */
    createResourceProvider(typeName: string): Provider
    
    /**
    * Adds a new [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) named `name` to the scene.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-createSceneObject.md Edit}
    */
    createSceneObject(name: string): SceneObject
    
    /**
    * Returns a string describing the currently active device camera.
    
    * Returns "back" if the rear-facing (aka World) camera is active.
    
    * Returns "front" if the front-facing (aka Selfie) camera is active.
    
    * Otherwise, the camera is not initialized.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-getCameraType.md Edit}
    */
    getCameraType(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-getLensEntryPoint.md Edit}
    
    * @private
    */
    getLensEntryPoint(): LensEntryPoint
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-getRecordingState.md Edit}
    
    * @private
    */
    getRecordingState(): RecordingState
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-getReverseCameraTextureProvider.md Edit}
    
    * @private
    */
    getReverseCameraTextureProvider(): ReverseCameraTextureProvider
    
    /**
    * Returns the root [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) at index `index` in the current scene.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-getRootObject.md Edit}
    */
    getRootObject(index: number): SceneObject
    
    /**
    * Returns the number of [SceneObjects](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) in the current scene.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-getRootObjectsCount.md Edit}
    */
    getRootObjectsCount(): number
    
    /**
    * Returns whether or not the scene is currently being recorded.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-isRecording.md Edit}
    */
    isRecording(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-isTranscodingToVideo.md Edit}
    
    * @private
    */
    isTranscodingToVideo(): boolean
    
    /**
    * At any time during the execution of the lens, the lens script may request to continue running with the same input texture and tracking data for N frames (called "internal" frames). The internal frames run after finishing the current frame. Only the result of the last internal frame is returned to the user code. This may be used in order to prepare resources that may take multiple frames to fully initialize (e.g., Assets/Prefabs, shader pipelines). This allows the resources to finish loading before the output texture is visible to the client.
    
    * The `frames` parameter is the number of internal frames to be run after the current frame finishes. Note that any call to `runInternalFrames` during the execution of an internal frame is silently ignored. All previously requested internal frames must finish running before new internal frames can be requested. The maximum number of internal frames that can be requested in a single call is capped at 128.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-runInternalFrames.md Edit}
    
    * @private
    */
    runInternalFrames(frames: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/methods/ScriptScene-setDebugMode.md Edit}
    
    * @private
    */
    setDebugMode(mode: boolean): void
    
    /**
    * The output Render Target of the actual recorded video.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/properties/ScriptScene-captureTarget.md Edit}
    */
    captureTarget: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/properties/ScriptScene-compositor.md Edit}
    
    * @readonly
    
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    compositor: SnapOS.CompositorConfig
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/properties/ScriptScene-graphicsApi.md Edit}
    
    * @readonly
    
    * @private
    */
    graphicsApi: GraphicsApi
    
    /**
    * Returns true if the device supports Raytracing and Advanced Graphics Features is enabled in the project settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/properties/ScriptScene-isRayTracingSupported.md Edit}
    
    * @readonly
    */
    isRayTracingSupported: boolean
    
    /**
    * Similar to `liveTarget`, but this RenderTarget will not have predictive motion adjustments applied to it (only applicable on supported devices). [Learn more](https://docs.snap.com/spectacles/guides/lens-studio-integration/creating-lenses/#overlay-target)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/properties/ScriptScene-liveOverlayTarget.md Edit}
    */
    liveOverlayTarget: Texture
    
    /**
    * The output Render Target that users will see in the live camera and during recording.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/properties/ScriptScene-liveTarget.md Edit}
    */
    liveTarget: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/properties/ScriptScene-outputTexture.md Edit}
    
    * @deprecated
    
    * @private
    */
    outputTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ScriptScene/properties/ScriptScene-previewTexture.md Edit}
    
    * @deprecated
    
    * @private
    */
    previewTexture: Texture
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Segmentation/Segmentation-description.md Edit}

* @private
*/
interface Segmentation extends AbstractData {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Segmentation/methods/Segmentation-clear.md Edit}
    
    * @private
    */
    clear(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Segmentation/methods/Segmentation-getMaskProvider.md Edit}
    
    * @private
    */
    getMaskProvider(systemName: string): SegmentationMask
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Segmentation/methods/Segmentation-isSegmentationSupported.md Edit}
    
    * @private
    */
    isSegmentationSupported(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Segmentation/methods/Segmentation-registerSystem.md Edit}
    
    * @private
    */
    registerSystem(systemName: string, configFolder: BinAsset): SegmentationMask
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Segmentation/methods/Segmentation-unregisterSystem.md Edit}
    
    * @private
    */
    unregisterSystem(systemName: string): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/SegmentationMask-description.md Edit}

* @private
*/
interface SegmentationMask extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-getCentroid.md Edit}
    
    * @private
    */
    getCentroid(maskName: string): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-getMaskPercentage.md Edit}
    
    * @private
    */
    getMaskPercentage(maskName: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-getMaskTexture.md Edit}
    
    * @private
    */
    getMaskTexture(maskName: string): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-getResourceName.md Edit}
    
    * @private
    */
    getResourceName(maskName: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-hasMaskTexture.md Edit}
    
    * @private
    */
    hasMaskTexture(maskName: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-isMaskReady.md Edit}
    
    * @private
    */
    isMaskReady(maskName: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-isPointInMask.md Edit}
    
    * @deprecated
    
    * @private
    */
    isPointInMask(maskName: string, worldPoint: vec3): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-registerMask.md Edit}
    
    * @private
    */
    registerMask(maskName: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setBinarizeThreshold.md Edit}
    
    * @private
    */
    setBinarizeThreshold(maskName: string, threshold: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setClampBackgroundToEdgeValues.md Edit}
    
    * @private
    */
    setClampBackgroundToEdgeValues(rowValue: number, colValue: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setCropMaskEnabled.md Edit}
    
    * @private
    */
    setCropMaskEnabled(maskName: string, value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setCutSkyBelowHorizonEnabled.md Edit}
    
    * @private
    */
    setCutSkyBelowHorizonEnabled(maskName: string, enableCutSkyBelowHorizon: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setEnableCatalystSgemmTuning.md Edit}
    
    * @private
    */
    setEnableCatalystSgemmTuning(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setFaceLandmarksPortraitInterpolation.md Edit}
    
    * @private
    */
    setFaceLandmarksPortraitInterpolation(enableFaceLandmarksPortraitInterpolation: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setFeatherKSize.md Edit}
    
    * @private
    */
    setFeatherKSize(maskName: string, featherKSize: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setFeatherSharpness.md Edit}
    
    * @private
    */
    setFeatherSharpness(maskName: string, featherSharpness: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setFeatheringEnabled.md Edit}
    
    * @private
    */
    setFeatheringEnabled(maskName: string, enableFeathering: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setGuidedFilterEnabled.md Edit}
    
    * @private
    */
    setGuidedFilterEnabled(maskName: string, value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setGuidedFilterPreThreshold.md Edit}
    
    * @private
    */
    setGuidedFilterPreThreshold(maskName: string, value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setGuidedFilterPreThresholdEnabled.md Edit}
    
    * @private
    */
    setGuidedFilterPreThresholdEnabled(maskName: string, value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setGuidedFilterRadius.md Edit}
    
    * @private
    */
    setGuidedFilterRadius(maskName: string, value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setGuidedFilterScaleRatio.md Edit}
    
    * @private
    */
    setGuidedFilterScaleRatio(maskName: string, value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setImproveMaskThresholdHigh.md Edit}
    
    * @private
    */
    setImproveMaskThresholdHigh(maskName: string, value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setImproveMaskThresholdLow.md Edit}
    
    * @private
    */
    setImproveMaskThresholdLow(maskName: string, value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setLargestComponentOnlyEnabled.md Edit}
    
    * @private
    */
    setLargestComponentOnlyEnabled(maskName: string, enableLargestComponentOnly: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setMaskPercentageEnabled.md Edit}
    
    * @private
    */
    setMaskPercentageEnabled(maskName: string, enable: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setMaskThresholdOF.md Edit}
    
    * @private
    */
    setMaskThresholdOF(maskThresholdOF: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setMaskThresholdOFEnabled.md Edit}
    
    * @private
    */
    setMaskThresholdOFEnabled(enableMaskThresholdOF: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setOpticalFlowEnabled.md Edit}
    
    * @private
    */
    setOpticalFlowEnabled(enableOpticalFlow: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setOpticalFlowSkippingEnabled.md Edit}
    
    * @private
    */
    setOpticalFlowSkippingEnabled(enableOpticalFlowSkipping: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setPostprocessingOFEnabled.md Edit}
    
    * @private
    */
    setPostprocessingOFEnabled(enablePostprocessingOF: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setPruneSmallComponentEnabled.md Edit}
    
    * @private
    */
    setPruneSmallComponentEnabled(maskName: string, enablePruneSmallComponent: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setRunSystemAsync.md Edit}
    
    * @private
    */
    setRunSystemAsync(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setSkyHoleFillingEnabled.md Edit}
    
    * @private
    */
    setSkyHoleFillingEnabled(maskName: string, enableSkyHoleFilling: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setSmallComponentRatio.md Edit}
    
    * @private
    */
    setSmallComponentRatio(maskName: string, smallComponentRatio: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setSoftMaskEnabled.md Edit}
    
    * @private
    */
    setSoftMaskEnabled(maskName: string, value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setTemporalSmoothingOF.md Edit}
    
    * @private
    */
    setTemporalSmoothingOF(temporalSmoothingOF: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-setTemporalSmoothingOFEnabled.md Edit}
    
    * @private
    */
    setTemporalSmoothingOFEnabled(enableTemporalSmoothingOF: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationMask/methods/SegmentationMask-unregisterMask.md Edit}
    
    * @private
    */
    unregisterMask(maskName: string): void
    
}

/**
* Segmentation model used for [SegmentationTextureProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Providers#SegmentationTextureProvider).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationModel/SegmentationModel-description.md Edit}
*/
interface SegmentationModel extends BinAsset {
}

/**
* Controls a segmentation texture resource.
* Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider) on a Segmentation texture.
* For more information, see the [Segmentation](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/segmentation/fullscreen-segmentation) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/SegmentationTextureProvider-description.md Edit}
*/
interface SegmentationTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-getCentroid.md Edit}
    
    * @private
    */
    getCentroid(): vec2
    
    /**
    * Get the percentage of screen covered by the current segmentation mask, from 0 to 1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-getMaskPercentage.md Edit}
    
    * @deprecated
    */
    getMaskPercentage(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-getSupportedMasks.md Edit}
    
    * @private
    */
    getSupportedMasks(): string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-isPointInMask.md Edit}
    
    * @private
    */
    isPointInMask(screenPoint: vec3): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setBinarizeThreshold.md Edit}
    
    * @private
    */
    setBinarizeThreshold(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setClampBackgroundToEdgeValues.md Edit}
    
    * @private
    */
    setClampBackgroundToEdgeValues(rowValue: number, colValue: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setCropMaskEnabled.md Edit}
    
    * @private
    */
    setCropMaskEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setCutSkyBelowHorizonEnabled.md Edit}
    
    * @private
    */
    setCutSkyBelowHorizonEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setFaceLandmarksPortraitInterpolationEnabled.md Edit}
    
    * @private
    */
    setFaceLandmarksPortraitInterpolationEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setFeatherKSize.md Edit}
    
    * @private
    */
    setFeatherKSize(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setFeatherSharpness.md Edit}
    
    * @private
    */
    setFeatherSharpness(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setFeatheringEnabled.md Edit}
    
    * @private
    */
    setFeatheringEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setGuidedFilterEnabled.md Edit}
    
    * @private
    */
    setGuidedFilterEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setGuidedFilterEpsilon.md Edit}
    
    * @private
    */
    setGuidedFilterEpsilon(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setGuidedFilterPreThreshold.md Edit}
    
    * @deprecated
    
    * @private
    */
    setGuidedFilterPreThreshold(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setGuidedFilterPreThresholdEnabled.md Edit}
    
    * @deprecated
    
    * @private
    */
    setGuidedFilterPreThresholdEnabled(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setGuidedFilterRadius.md Edit}
    
    * @deprecated
    
    * @private
    */
    setGuidedFilterRadius(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setGuidedFilterScaleRatio.md Edit}
    
    * @deprecated
    
    * @private
    */
    setGuidedFilterScaleRatio(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setImproveMaskThresholdHigh.md Edit}
    
    * @private
    */
    setImproveMaskThresholdHigh(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setImproveMaskThresholdLow.md Edit}
    
    * @private
    */
    setImproveMaskThresholdLow(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setLargestComponentOnlyEnabled.md Edit}
    
    * @private
    */
    setLargestComponentOnlyEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setMaskPercentageEnabled.md Edit}
    
    * @private
    */
    setMaskPercentageEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setMaskThresholdOF.md Edit}
    
    * @private
    */
    setMaskThresholdOF(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setMaskThresholdOFEnabled.md Edit}
    
    * @private
    */
    setMaskThresholdOFEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setOpticalFlowEnabled.md Edit}
    
    * @private
    */
    setOpticalFlowEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setOpticalFlowSkippingEnabled.md Edit}
    
    * @private
    */
    setOpticalFlowSkippingEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setPostprocessingOFEnabled.md Edit}
    
    * @private
    */
    setPostprocessingOFEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setPruneSmallComponentEnabled.md Edit}
    
    * @private
    */
    setPruneSmallComponentEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setRunSystemAsync.md Edit}
    
    * @private
    */
    setRunSystemAsync(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setSkyHoleFillingEnabled.md Edit}
    
    * @private
    */
    setSkyHoleFillingEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setSmallComponentRatio.md Edit}
    
    * @private
    */
    setSmallComponentRatio(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setSoftMaskEnabled.md Edit}
    
    * @private
    */
    setSoftMaskEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setTemporalSmoothingOF.md Edit}
    
    * @private
    */
    setTemporalSmoothingOF(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/methods/SegmentationTextureProvider-setTemporalSmoothingOFEnabled.md Edit}
    
    * @private
    */
    setTemporalSmoothingOFEnabled(value: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/properties/SegmentationTextureProvider-model.md Edit}
    
    * @private
    */
    model: SegmentationModel
    
    /**
    * Triggered when the area segmented changes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/properties/SegmentationTextureProvider-onMaskPercentageUpdated.md Edit}
    
    * @readonly
    */
    onMaskPercentageUpdated: event1<number, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/properties/SegmentationTextureProvider-selectedMask.md Edit}
    
    * @private
    */
    selectedMask: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SegmentationTextureProvider/properties/SegmentationTextureProvider-useGuidedFilterWhenAvailable.md Edit}
    
    * @private
    */
    useGuidedFilterWhenAvailable: boolean
    
}

/**
* Arguments used with the `InteractionComponent.onSelectEnd` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SelectEndEventArgs/SelectEndEventArgs-description.md Edit}
*/
interface SelectEndEventArgs extends ScriptObject {
}

/**
* Arguments used with the `InteractionComponent.onSelectStart` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SelectStartEventArgs/SelectStartEventArgs-description.md Edit}
*/
interface SelectStartEventArgs extends ScriptObject {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SequentialTextureProvider/SequentialTextureProvider-description.md Edit}

* @private
*/
interface SequentialTextureProvider extends TextureProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SequentialTextureProvider/properties/SequentialTextureProvider-position.md Edit}
    
    * @private
    */
    position: number
    
}

/**
* Low-level data class.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SerializableWithUID/SerializableWithUID-description.md Edit}
*/
interface SerializableWithUID extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SerializableWithUID/properties/SerializableWithUID-uniqueIdentifier.md Edit}
    
    * @readonly
    */
    uniqueIdentifier: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SerializationSystem/SerializationSystem-description.md Edit}

* @private
*/
interface SerializationSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SerializationSystem/methods/SerializationSystem-dataUpdated.md Edit}
    
    * @private
    */
    dataUpdated(jsonData: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SerializationSystem/methods/SerializationSystem-setDeserializeCallback.md Edit}
    
    * @private
    */
    setDeserializeCallback(callback: (data: string) => number): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShaderResourceSystem/ShaderResourceSystem-description.md Edit}
*/
interface ShaderResourceSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShaderResourceSystem/methods/ShaderResourceSystem-setPrecompiledShaderAsset.md Edit}
    */
    setPrecompiledShaderAsset(asset: Asset): void
    
}

/**
* Base type for collision shapes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Shape/Shape-description.md Edit}
*/
interface Shape extends ScriptObject {
}
declare namespace Shape {
    /**
    * Create a BoxShape with default settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Shape/methods/Shape-createBoxShape.md Edit}
    */
    export function createBoxShape(): BoxShape
    
    /**
    * Create a CapsuleShape with default settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Shape/methods/Shape-createCapsuleShape.md Edit}
    */
    export function createCapsuleShape(): CapsuleShape
    
    /**
    * Create a ConeShape with default settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Shape/methods/Shape-createConeShape.md Edit}
    */
    export function createConeShape(): ConeShape
    
    /**
    * Create a CylinderShape with default settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Shape/methods/Shape-createCylinderShape.md Edit}
    */
    export function createCylinderShape(): CylinderShape
    
    /**
    * Create a LevelsetShape with default settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Shape/methods/Shape-createLevelsetShape.md Edit}
    */
    export function createLevelsetShape(): LevelsetShape
    
    /**
    * Creates a new MeshShape.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Shape/methods/Shape-createMeshShape.md Edit}
    */
    export function createMeshShape(): MeshShape
    
    /**
    * Create a SphereShape with default settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Shape/methods/Shape-createSphereShape.md Edit}
    */
    export function createSphereShape(): SphereShape
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShoppingLoadingIndicator/ShoppingLoadingIndicator-description.md Edit}

* @unreleased
*/
interface ShoppingLoadingIndicator extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShoppingLoadingIndicator/properties/ShoppingLoadingIndicator-loadingFailed.md Edit}
    
    * @readonly
    */
    loadingFailed: any
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShoppingLoadingIndicator/properties/ShoppingLoadingIndicator-loadingSucceeded.md Edit}
    
    * @readonly
    */
    loadingSucceeded: any
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShoppingModule/ShoppingModule-description.md Edit}

* @unreleased
*/
interface ShoppingModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShoppingModule/methods/ShoppingModule-loadingStarted.md Edit}
    */
    loadingStarted(): ShoppingLoadingIndicator
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShoppingModule/properties/ShoppingModule-domains.md Edit}
    
    * @readonly
    */
    domains: DomainInfo[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShoppingModule/properties/ShoppingModule-onError.md Edit}
    
    * @readonly
    */
    onError: event2<number, string, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/ShoppingModule/properties/ShoppingModule-onProductStateUpdate.md Edit}
    
    * @readonly
    */
    onProductStateUpdate: event1<string, void>
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SideTextureMode/SideTextureMode-description.md Edit}

* @private
*/
declare enum SideTextureMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SideTextureMode/properties/SideTextureMode-PerimeterTexture.md Edit}
    
    * @private
    */
    PerimeterTexture,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SideTextureMode/properties/SideTextureMode-SideWrappedTexture.md Edit}
    
    * @private
    */
    SideWrappedTexture
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SinglePlaneTrackingUpdatedEvent/SinglePlaneTrackingUpdatedEvent-description.md Edit}
*/
interface SinglePlaneTrackingUpdatedEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SinglePlaneTrackingUpdatedEvent/properties/SinglePlaneTrackingUpdatedEvent-plane.md Edit}
    
    * @deprecated
    
    * @readonly
    */
    plane: TrackedPlane
    
}

/**
* Represents skinning data for rigged meshes. See also: [MeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Skin/Skin-description.md Edit}
*/
interface Skin extends Component {
    /**
    * Remove all bones on the skin.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Skin/methods/Skin-clearBones.md Edit}
    */
    clearBones(): void
    
    /**
    * Get the bone on the skin.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Skin/methods/Skin-getSkinBone.md Edit}
    */
    getSkinBone(boneName: string): SceneObject
    
    /**
    * Get all the bone names on the skin.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Skin/methods/Skin-getSkinBoneNames.md Edit}
    */
    getSkinBoneNames(): string[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Skin/methods/Skin-setSkinBone.md Edit}
    */
    setSkinBone(boneName: string, bone: SceneObject): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SkinSample/SkinSample-description.md Edit}

* @private
*/
interface SkinSample extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SkinSample/properties/SkinSample-indices.md Edit}
    
    * @private
    */
    indices: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SkinSample/properties/SkinSample-size.md Edit}
    
    * @private
    */
    size: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SkinSample/properties/SkinSample-weights.md Edit}
    
    * @private
    */
    weights: vec3
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SliderConstraint/SliderConstraint-description.md Edit}

* @unreleased
*/
interface SliderConstraint extends Constraint {
}

/**
* Triggered when a smile ends on the tracked face.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SmileFinishedEvent/SmileFinishedEvent-description.md Edit}
*/
interface SmileFinishedEvent extends FaceTrackingEvent {
}

/**
* Triggered when a smile begins on the tracked face.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SmileStartedEvent/SmileStartedEvent-description.md Edit}
*/
interface SmileStartedEvent extends FaceTrackingEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/Snap3D-description.md Edit}

* @private
*/
interface Snap3D extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/methods/Snap3D-getDepthmap.md Edit}
    
    * @private
    */
    getDepthmap(): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/methods/Snap3D-getImage.md Edit}
    
    * @private
    */
    getImage(): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/methods/Snap3D-getLayers.md Edit}
    
    * @private
    */
    getLayers(): Snap3D.Layer[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/methods/Snap3D-getMaxRotationAngle.md Edit}
    
    * @private
    */
    getMaxRotationAngle(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/methods/Snap3D-getMesh.md Edit}
    
    * @private
    */
    getMesh(): RenderMesh
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/methods/Snap3D-getPivotDistance.md Edit}
    
    * @private
    */
    getPivotDistance(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/methods/Snap3D-requestCapture.md Edit}
    
    * @private
    */
    requestCapture(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/properties/Snap3D-magicMomentParams.md Edit}
    
    * @readonly
    
    * @private
    */
    magicMomentParams: Snap3D.MagicMomentParams
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D/properties/Snap3D-strategy.md Edit}
    
    * @private
    */
    strategy: Snap3D.Strategy
    
}

declare namespace Snap3D {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Layer/Snap3D.Layer-description.md Edit}
    
    * @private
    */
    interface Layer extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Layer/methods/Snap3D.Layer-getDepthmap.md Edit}
        
        * @private
        */
        getDepthmap(): Texture
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Layer/methods/Snap3D.Layer-getImage.md Edit}
        
        * @private
        */
        getImage(): Texture
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Layer/methods/Snap3D.Layer-getMesh.md Edit}
        
        * @private
        */
        getMesh(): RenderMesh
        
    }

}

declare namespace Snap3D {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentCameraPathMode/Snap3D.MagicMomentCameraPathMode-description.md Edit}
    
    * @private
    */
    enum MagicMomentCameraPathMode {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentCameraPathMode/properties/Snap3D.MagicMomentCameraPathMode-Linear.md Edit}
        
        * @private
        */
        Linear,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentCameraPathMode/properties/Snap3D.MagicMomentCameraPathMode-Circular.md Edit}
        
        * @private
        */
        Circular
    }

}

declare namespace Snap3D {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentMeshExperiment/Snap3D.MagicMomentMeshExperiment-description.md Edit}
    
    * @private
    */
    enum MagicMomentMeshExperiment {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentMeshExperiment/properties/Snap3D.MagicMomentMeshExperiment-None.md Edit}
        
        * @private
        */
        None,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentMeshExperiment/properties/Snap3D.MagicMomentMeshExperiment-ShapePreserving.md Edit}
        
        * @private
        */
        ShapePreserving
    }

}

declare namespace Snap3D {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentParams/Snap3D.MagicMomentParams-description.md Edit}
    
    * @private
    */
    interface MagicMomentParams extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentParams/properties/Snap3D.MagicMomentParams-cameraPathMode.md Edit}
        
        * @readonly
        
        * @private
        */
        cameraPathMode: Snap3D.MagicMomentCameraPathMode
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentParams/properties/Snap3D.MagicMomentParams-focusRegionSize.md Edit}
        
        * @private
        */
        focusRegionSize: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentParams/properties/Snap3D.MagicMomentParams-meshExperiment.md Edit}
        
        * @readonly
        
        * @private
        */
        meshExperiment: Snap3D.MagicMomentMeshExperiment
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.MagicMomentParams/properties/Snap3D.MagicMomentParams-targetPixelMovement.md Edit}
        
        * @private
        */
        targetPixelMovement: number
        
    }

}

declare namespace Snap3D {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Strategy/Snap3D.Strategy-description.md Edit}
    
    * @private
    */
    enum Strategy {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Strategy/properties/Snap3D.Strategy-Basic.md Edit}
        
        * @private
        */
        Basic,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Strategy/properties/Snap3D.Strategy-Roam.md Edit}
        
        * @private
        */
        Roam,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Strategy/properties/Snap3D.Strategy-Layered.md Edit}
        
        * @private
        */
        Layered,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Snap3D.Strategy/properties/Snap3D.Strategy-MagicMoment.md Edit}
        
        * @private
        */
        MagicMoment
    }

}

/**
* Details about friendship between the active user and another user.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatFriendUserInfo/SnapchatFriendUserInfo-description.md Edit}
*/
interface SnapchatFriendUserInfo {
    /**
    * When this friendship started.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatFriendUserInfo/properties/SnapchatFriendUserInfo-friendshipStart.md Edit}
    
    * @readonly
    */
    friendshipStart?: Date
    
    /**
    * Last interaction between this user and the active one.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatFriendUserInfo/properties/SnapchatFriendUserInfo-lastInteractionTime.md Edit}
    
    * @readonly
    */
    lastInteractionTime?: Date
    
    /**
    * Length of active interaction streak between this user and the active one.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatFriendUserInfo/properties/SnapchatFriendUserInfo-streak.md Edit}
    
    * @readonly
    
    * @private
    */
    streak?: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatGroup/SnapchatGroup-description.md Edit}

* @private
*/
interface SnapchatGroup extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatGroup/properties/SnapchatGroup-groupId.md Edit}
    
    * @readonly
    
    * @private
    */
    groupId: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatGroup/properties/SnapchatGroup-groupName.md Edit}
    
    * @readonly
    
    * @private
    */
    groupName: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatGroup/properties/SnapchatGroup-isTopGroup.md Edit}
    
    * @readonly
    
    * @private
    */
    isTopGroup: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatGroup/properties/SnapchatGroup-lastInteractionTime.md Edit}
    
    * @readonly
    
    * @private
    */
    lastInteractionTime?: Date
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatGroup/properties/SnapchatGroup-members.md Edit}
    
    * @readonly
    
    * @private
    */
    members: SnapchatUser[]
    
}

/**
* Represents a Snapchat user in order to pass to other APIs or to retrieve certain details about the user like display name. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUser/SnapchatUser-description.md Edit}
*/
interface SnapchatUser extends ScriptObject {
    /**
    * User's birth month and day. The month and day will start with the index of 1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUser/properties/SnapchatUser-birthday.md Edit}
    
    * @readonly
    */
    birthday?: SnapchatUserBirthday
    
    /**
    * Name a Snapchat user has chosen to be shown as. Note that not all users set their display name, so you should treat this value as such.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUser/properties/SnapchatUser-displayName.md Edit}
    
    * @readonly
    */
    displayName?: string
    
    /**
    * Information about friendship between this friend and the active user like start date and streak.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUser/properties/SnapchatUser-friendInfo.md Edit}
    
    * @readonly
    */
    friendInfo?: SnapchatFriendUserInfo
    
    /**
    * Whether this user has a bitmoji that can be retireved via BitmojiModule.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUser/properties/SnapchatUser-hasBitmoji.md Edit}
    
    * @readonly
    */
    hasBitmoji: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUser/properties/SnapchatUser-userId.md Edit}
    
    * @readonly
    
    * @private
    */
    userId: string
    
    /**
    * Snapchat user's unique userName. Should not be relied on as a key because it can be changed.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUser/properties/SnapchatUser-userName.md Edit}
    
    * @readonly
    */
    userName: string
    
    /**
    * This user's zodiac.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUser/properties/SnapchatUser-zodiac.md Edit}
    
    * @readonly
    */
    zodiac?: Zodiac
    
}

/**
* Set the bone on the skin.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUserBirthday/SnapchatUserBirthday-description.md Edit}
*/
interface SnapchatUserBirthday {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUserBirthday/properties/SnapchatUserBirthday-day.md Edit}
    
    * @readonly
    */
    day: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUserBirthday/properties/SnapchatUserBirthday-month.md Edit}
    
    * @readonly
    */
    month: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapchatUserBirthday/properties/SnapchatUserBirthday-year.md Edit}
    
    * @deprecated
    
    * @readonly
    
    * @private
    */
    year?: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapcodeFoundEvent/SnapcodeFoundEvent-description.md Edit}

* @unreleased
*/
interface SnapcodeFoundEvent extends SceneEvent {
}

/**
* Provides a marker for tracking Snapcodes.
* For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapcodeMarkerProvider/SnapcodeMarkerProvider-description.md Edit}
*/
interface SnapcodeMarkerProvider extends MarkerProvider {
}

/**
* Called when the user taps on the capture button to record an image.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapImageCaptureEvent/SnapImageCaptureEvent-description.md Edit}
*/
interface SnapImageCaptureEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS/SnapOS-description.md Edit}

* @private
*/
interface SnapOS {
}

declare namespace SnapOS {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.CompositorConfig/SnapOS.CompositorConfig-description.md Edit}
    
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    interface CompositorConfig extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.CompositorConfig/properties/SnapOS.CompositorConfig-deviceConfig.md Edit}
        
        * @private
        */
        deviceConfig: SnapOS.DeviceConfig
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.CompositorConfig/properties/SnapOS.CompositorConfig-mainLayer.md Edit}
        
        * @private
        */
        mainLayer: SnapOS.LayerConfig
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.CompositorConfig/properties/SnapOS.CompositorConfig-overlayLayer.md Edit}
        
        * @private
        */
        overlayLayer: SnapOS.LayerConfig
        
    }

}

declare namespace SnapOS {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.DeviceConfig/SnapOS.DeviceConfig-description.md Edit}
    
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    interface DeviceConfig extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.DeviceConfig/properties/SnapOS.DeviceConfig-frameRate.md Edit}
        
        * @private
        */
        frameRate: number
        
    }

}
declare namespace SnapOS {
    namespace DeviceConfig {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.DeviceConfig/methods/SnapOS.DeviceConfig-create.md Edit}
        
        * @experimental
        
        * @snapOsOnly
        
        * @private
        */
        export function create(): SnapOS.DeviceConfig
        
    
    }

}

declare namespace SnapOS {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.LayerConfig/SnapOS.LayerConfig-description.md Edit}
    
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    interface LayerConfig extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.LayerConfig/methods/SnapOS.LayerConfig-setReprojectionPlane.md Edit}
        
        * @private
        */
        setReprojectionPlane(point: vec3, normal: vec3): void
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.LayerConfig/methods/SnapOS.LayerConfig-setReprojectionPlaneDefault.md Edit}
        
        * @deprecated
        
        * @private
        */
        setReprojectionPlaneDefault(): void
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.LayerConfig/methods/SnapOS.LayerConfig-setReprojectionPlaneEquation.md Edit}
        
        * @deprecated
        
        * @private
        */
        setReprojectionPlaneEquation(point: vec3, normal: vec3): void
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.LayerConfig/methods/SnapOS.LayerConfig-setReprojectionPlaneReferenceTransformation.md Edit}
        
        * @deprecated
        
        * @private
        */
        setReprojectionPlaneReferenceTransformation(transform: mat4): void
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.LayerConfig/properties/SnapOS.LayerConfig-reprojectionPlaneMode.md Edit}
        
        * @private
        */
        reprojectionPlaneMode: SnapOS.ReprojectionPlaneMode
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.LayerConfig/properties/SnapOS.LayerConfig-reprojectionPlaneReferenceTransform.md Edit}
        
        * @private
        */
        reprojectionPlaneReferenceTransform: mat4
        
    }

}
declare namespace SnapOS {
    namespace LayerConfig {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.LayerConfig/methods/SnapOS.LayerConfig-create.md Edit}
        
        * @experimental
        
        * @snapOsOnly
        
        * @private
        */
        export function create(): SnapOS.LayerConfig
        
    
    }

}

declare namespace SnapOS {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.ReprojectionPlaneMode/SnapOS.ReprojectionPlaneMode-description.md Edit}
    
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    enum ReprojectionPlaneMode {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.ReprojectionPlaneMode/properties/SnapOS.ReprojectionPlaneMode-Default.md Edit}
        
        * @private
        */
        Default,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapOS.ReprojectionPlaneMode/properties/SnapOS.ReprojectionPlaneMode-ManualPlane.md Edit}
        
        * @private
        */
        ManualPlane
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/SnappablesSession-description.md Edit}

* @private
*/
interface SnappablesSession extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getAsset.md Edit}
    
    * @private
    */
    getAsset(name: string): Asset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getCurrentPlayerIndex.md Edit}
    
    * @private
    */
    getCurrentPlayerIndex(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getCurrentPlayerStore.md Edit}
    
    * @private
    */
    getCurrentPlayerStore(): GeneralDataStore
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getForCurrentPlayer.md Edit}
    
    * @deprecated
    
    * @private
    */
    getForCurrentPlayer(key: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getForCurrentPlayerWithDefault.md Edit}
    
    * @deprecated
    
    * @private
    */
    getForCurrentPlayerWithDefault(key: string, defaultValue: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getForPlayer.md Edit}
    
    * @deprecated
    
    * @private
    */
    getForPlayer(playerIndex: number, key: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getForPlayerWithDefault.md Edit}
    
    * @deprecated
    
    * @private
    */
    getForPlayerWithDefault(playerIndex: number, key: string, defaultValue: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getGlobal.md Edit}
    
    * @deprecated
    
    * @private
    */
    getGlobal(key: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getGlobalStore.md Edit}
    
    * @private
    */
    getGlobalStore(): GeneralDataStore
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getGlobalWithDefault.md Edit}
    
    * @deprecated
    
    * @private
    */
    getGlobalWithDefault(key: string, defaultValue: string): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getNumberOfPlayers.md Edit}
    
    * @private
    */
    getNumberOfPlayers(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-getPlayerStore.md Edit}
    
    * @private
    */
    getPlayerStore(playerIndex: number): GeneralDataStore
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-hasAsset.md Edit}
    
    * @private
    */
    hasAsset(name: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-isReady.md Edit}
    
    * @private
    */
    isReady(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-removeAsset.md Edit}
    
    * @private
    */
    removeAsset(name: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-saveAsset.md Edit}
    
    * @private
    */
    saveAsset(asset: Asset, name: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-setForCurrentPlayer.md Edit}
    
    * @deprecated
    
    * @private
    */
    setForCurrentPlayer(key: string, value: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/methods/SnappablesSession-setGlobal.md Edit}
    
    * @deprecated
    
    * @private
    */
    setGlobal(key: string, value: string): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/properties/SnappablesSession-focusPoint.md Edit}
    
    * @private
    */
    focusPoint: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/properties/SnappablesSession-focusPointWidth.md Edit}
    
    * @private
    */
    focusPointWidth: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/properties/SnappablesSession-shouldAttachToSnap.md Edit}
    
    * @private
    */
    shouldAttachToSnap: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSession/properties/SnappablesSession-shouldWriteAsBytes.md Edit}
    
    * @private
    */
    shouldWriteAsBytes: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSessionInitFailedEvent/SnappablesSessionInitFailedEvent-description.md Edit}

* @private
*/
interface SnappablesSessionInitFailedEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSessionInitFailedEvent/properties/SnappablesSessionInitFailedEvent-timeout.md Edit}
    
    * @private
    */
    timeout: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSessionReadyEvent/SnappablesSessionReadyEvent-description.md Edit}

* @private
*/
interface SnappablesSessionReadyEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSystem/SnappablesSystem-description.md Edit}

* @private
*/
interface SnappablesSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSystem/methods/SnappablesSystem-finalizeActiveSession.md Edit}
    
    * @private
    */
    finalizeActiveSession(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSystem/methods/SnappablesSystem-getActiveSession.md Edit}
    
    * @private
    */
    getActiveSession(): SnappablesSession
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnappablesSystem/methods/SnappablesSystem-startNewSession.md Edit}
    
    * @private
    */
    startNewSession(): SnappablesSession
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapRecordingSystem/SnapRecordingSystem-description.md Edit}

* @private
*/
interface SnapRecordingSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapRecordingSystem/methods/SnapRecordingSystem-captureSnapImage.md Edit}
    
    * @private
    */
    captureSnapImage(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapRecordingSystem/methods/SnapRecordingSystem-startSnapRecording.md Edit}
    
    * @private
    */
    startSnapRecording(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapRecordingSystem/methods/SnapRecordingSystem-stopSnapRecording.md Edit}
    
    * @private
    */
    stopSnapRecording(): void
    
}

/**
* Gets called when the user starts long pressing the capture button to record a Snap.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapRecordStartEvent/SnapRecordStartEvent-description.md Edit}
*/
interface SnapRecordStartEvent extends SceneEvent {
}

/**
* Gets called when the user stops long pressing the Snap button to end recording of a Snap.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SnapRecordStopEvent/SnapRecordStopEvent-description.md Edit}
*/
interface SnapRecordStopEvent extends SceneEvent {
}

/**
* Order that inTensor will be sorted when applying `TensorMath.argSortMasked()`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SortOrder/SortOrder-description.md Edit}
*/
declare enum SortOrder {
    /**
    * Applies ascending sorting order when returning indices in TensorMath.argSortMasked().
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SortOrder/properties/SortOrder-Ascending.md Edit}
    */
    Ascending,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SortOrder/properties/SortOrder-Descending.md Edit}
    */
    Descending
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SourceMaps/SourceMaps-description.md Edit}

* @private
*/
interface SourceMaps {
}
declare namespace SourceMaps {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SourceMaps/methods/SourceMaps-applyToStackTrace.md Edit}
    
    * @private
    */
    export function applyToStackTrace(trace: string): string
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialAudio/SpatialAudio-description.md Edit}
*/
interface SpatialAudio extends ScriptObject {
    /**
    * Directivity effect settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialAudio/properties/SpatialAudio-directivityEffect.md Edit}
    
    * @readonly
    */
    directivityEffect: DirectivityEffect
    
    /**
    * Distance effect settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialAudio/properties/SpatialAudio-distanceEffect.md Edit}
    
    * @readonly
    */
    distanceEffect: DistanceEffect
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialAudio/properties/SpatialAudio-dopplerEffect.md Edit}
    
    * @readonly
    
    * @private
    */
    dopplerEffect: DopplerEffect
    
    /**
    * Sets whether spatial audio is enabled or not.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialAudio/properties/SpatialAudio-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * Position effect settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialAudio/properties/SpatialAudio-positionEffect.md Edit}
    
    * @readonly
    */
    positionEffect: PositionEffect
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialAudio/properties/SpatialAudio-stereoEffect.md Edit}
    
    * @readonly
    
    * @private
    */
    stereoEffect: StereoEffect
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/SpatialMap-description.md Edit}

* @private
*/
interface SpatialMap {
}
declare namespace SpatialMap {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/methods/SpatialMap-deleteMap.md Edit}
    
    * @experimental
    
    * @private
    */
    export function deleteMap(mapPath: string): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/methods/SpatialMap-getActivityStatus.md Edit}
    
    * @experimental
    
    * @private
    */
    export function getActivityStatus(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/methods/SpatialMap-getLoadStatus.md Edit}
    
    * @experimental
    
    * @private
    */
    export function getLoadStatus(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/methods/SpatialMap-getQuality.md Edit}
    
    * @experimental
    
    * @private
    */
    export function getQuality(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/methods/SpatialMap-getRelocalizationStatus.md Edit}
    
    * @experimental
    
    * @private
    */
    export function getRelocalizationStatus(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/methods/SpatialMap-getSaveStatus.md Edit}
    
    * @experimental
    
    * @private
    */
    export function getSaveStatus(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/methods/SpatialMap-getSize.md Edit}
    
    * @experimental
    
    * @private
    */
    export function getSize(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMap/methods/SpatialMap-hasMap.md Edit}
    
    * @experimental
    
    * @private
    */
    export function hasMap(mapPath: string): boolean
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapLoadEvent/SpatialMapLoadEvent-description.md Edit}

* @experimental

* @private
*/
interface SpatialMapLoadEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapLoadEvent/methods/SpatialMapLoadEvent-getStatus.md Edit}
    
    * @private
    */
    getStatus(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapMode/SpatialMapMode-description.md Edit}

* @experimental

* @private
*/
declare enum SpatialMapMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapMode/properties/SpatialMapMode-Disabled.md Edit}
    
    * @private
    */
    Disabled,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapMode/properties/SpatialMapMode-Read.md Edit}
    
    * @private
    */
    Read,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapMode/properties/SpatialMapMode-Write.md Edit}
    
    * @private
    */
    Write
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapRelocalizationEvent/SpatialMapRelocalizationEvent-description.md Edit}

* @experimental

* @private
*/
interface SpatialMapRelocalizationEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapRelocalizationEvent/methods/SpatialMapRelocalizationEvent-getStatus.md Edit}
    
    * @private
    */
    getStatus(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapSaveEvent/SpatialMapSaveEvent-description.md Edit}

* @experimental

* @private
*/
interface SpatialMapSaveEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpatialMapSaveEvent/methods/SpatialMapSaveEvent-getStatus.md Edit}
    
    * @private
    */
    getStatus(): number
    
}

/**
* Representation the signal strength over time at various frequencies present in a particular waveform. Created by applying Fast Fourier Transform (FFT) on the overlapping segments of the audio data.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Spectrogram/Spectrogram-description.md Edit}
*/
interface Spectrogram extends ScriptObject {
    /**
    * Processes audio data from the inTensor of inShape, writes result to the outTensor and returns the outTensor shape.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Spectrogram/methods/Spectrogram-process.md Edit}
    */
    process(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): vec3
    
    /**
    * Returns the maximum buffer length.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Spectrogram/properties/Spectrogram-maxTensorSize.md Edit}
    
    * @readonly
    */
    maxTensorSize: number
    
}

/**
* The builder class for Spectrogram.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpectrogramBuilder/SpectrogramBuilder-description.md Edit}
*/
interface SpectrogramBuilder extends ScriptObject {
    /**
    * Creates a new Spectrogram.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpectrogramBuilder/methods/SpectrogramBuilder-build.md Edit}
    */
    build(): Spectrogram
    
    /**
    * Sets the length of the window.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpectrogramBuilder/methods/SpectrogramBuilder-setFFTSize.md Edit}
    */
    setFFTSize(fftSize: number): SpectrogramBuilder
    
    /**
    * Sets the frame size.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpectrogramBuilder/methods/SpectrogramBuilder-setFrameSize.md Edit}
    */
    setFrameSize(frameSize: number): SpectrogramBuilder
    
    /**
    * Sets the number of samples between successive FFT segments.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpectrogramBuilder/methods/SpectrogramBuilder-setHopSize.md Edit}
    */
    setHopSize(hopSize: number): SpectrogramBuilder
    
}

/**
* A sphere collision shape.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SphereShape/SphereShape-description.md Edit}
*/
interface SphereShape extends Shape {
    /**
    * Local radius of the sphere.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SphereShape/properties/SphereShape-radius.md Edit}
    */
    radius: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SplineComponent/SplineComponent-description.md Edit}
*/
interface SplineComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SplineComponent/methods/SplineComponent-getPoints.md Edit}
    
    * @private
    */
    getPoints(): vec3[]
    
}

/**
* Represents transform data for screen-aligned 2D sprites. Use on SceneObjects with a SpriteVisual Component.
* See also: [SpriteVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#deprecated-spritevisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteAligner/SpriteAligner-description.md Edit}
*/
interface SpriteAligner extends Component {
    /**
    * The location of the point this sprite is bound to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteAligner/properties/SpriteAligner-bindingPoint.md Edit}
    */
    bindingPoint: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteAligner/properties/SpriteAligner-camera.md Edit}
    
    * @private
    */
    camera: Camera
    
    /**
    * The width and height of the SpriteVisual.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteAligner/properties/SpriteAligner-size.md Edit}
    */
    size: vec2
    
}

/**
* This class has been **deprecated** and replaced with the [Image](https://lensstudio.snapchat.com/api/classes/Image) component.

* Represents a renderable 2D visual in Lens Studio.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteVisual/SpriteVisual-description.md Edit}

* @deprecated
*/
interface SpriteVisual extends MaterialMeshVisual {
    /**
    * Returns the width and height of the mesh the `SpriteVisual` is applied to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteVisual/methods/SpriteVisual-getMeshSize.md Edit}
    */
    getMeshSize(): vec2
    
    /**
    * Which type of fill the sprite uses.
    
    * Possible values:
    
    * Fit = 0
    * Fill = 1
    * Stretch = 2
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteVisual/properties/SpriteVisual-fillMode.md Edit}
    */
    fillMode: number
    
    /**
    * Whether the sprite is flipped over the Y-axis (sideways).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteVisual/properties/SpriteVisual-flipX.md Edit}
    */
    flipX: boolean
    
    /**
    * Whether the sprite is flipped over the X-axis (upside-down).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteVisual/properties/SpriteVisual-flipY.md Edit}
    */
    flipY: boolean
    
    /**
    * The location of the sprite's pivot point relative to its boundaries.
    * The pivot's `x` value is a relative horizontal position, -1 being the sprite's left border and 1 being the sprite's right border.
    * Similarly, the `y` value is a relative vertical position, -1 being the sprite's bottom border and 1 being the sprite's top border.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SpriteVisual/properties/SpriteVisual-pivot.md Edit}
    */
    pivot: vec2
    
}

declare namespace SSAO {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.DebugMode/SSAO.DebugMode-description.md Edit}
    
    * @private
    */
    enum DebugMode {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.DebugMode/properties/SSAO.DebugMode-None.md Edit}
        
        * @private
        */
        None,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.DebugMode/properties/SSAO.DebugMode-Depth.md Edit}
        
        * @private
        */
        Depth,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.DebugMode/properties/SSAO.DebugMode-ComputedNormals.md Edit}
        
        * @private
        */
        ComputedNormals,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.DebugMode/properties/SSAO.DebugMode-AO.md Edit}
        
        * @private
        */
        AO,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.DebugMode/properties/SSAO.DebugMode-AO_PackedDepth.md Edit}
        
        * @private
        */
        AO_PackedDepth,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.DebugMode/properties/SSAO.DebugMode-BlurredAO.md Edit}
        
        * @private
        */
        BlurredAO
    }

}

declare namespace SSAO {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.MeshMode/SSAO.MeshMode-description.md Edit}
    
    * @private
    */
    enum MeshMode {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.MeshMode/properties/SSAO.MeshMode-None.md Edit}
        
        * @private
        */
        None,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.MeshMode/properties/SSAO.MeshMode-Caster.md Edit}
        
        * @private
        */
        Caster,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.MeshMode/properties/SSAO.MeshMode-Receiver.md Edit}
        
        * @private
        */
        Receiver,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.MeshMode/properties/SSAO.MeshMode-CasterAndReceiver.md Edit}
        
        * @private
        */
        CasterAndReceiver
    }

}

declare namespace SSAO {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/SSAO.Settings-description.md Edit}
    
    * @private
    */
    interface Settings extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-blurQuality.md Edit}
        
        * @private
        */
        blurQuality: QualityLevel
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-blurThreshold.md Edit}
        
        * @private
        */
        blurThreshold: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-debugMode.md Edit}
        
        * @private
        */
        debugMode: SSAO.DebugMode
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-intensity.md Edit}
        
        * @private
        */
        intensity: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-power.md Edit}
        
        * @private
        */
        power: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-quality.md Edit}
        
        * @private
        */
        quality: QualityLevel
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-radius.md Edit}
        
        * @private
        */
        radius: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-resolutionScale.md Edit}
        
        * @private
        */
        resolutionScale: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-selfOcclusionBias.md Edit}
        
        * @private
        */
        selfOcclusionBias: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SSAO.Settings/properties/SSAO.Settings-upsamplingQuality.md Edit}
        
        * @private
        */
        upsamplingQuality: QualityLevel
        
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StateInfo/StateInfo-description.md Edit}

* @unreleased
*/
interface StateInfo {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StateInfo/properties/StateInfo-description.md Edit}
    
    * @readonly
    */
    description: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StateInfo/properties/StateInfo-name.md Edit}
    
    * @readonly
    */
    name: string
    
}

/**
* Stencil buffer clear option.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilClearOption/StencilClearOption-description.md Edit}
*/
declare enum StencilClearOption {
    /**
    * Stencil buffer clear operation will be skipped.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilClearOption/properties/StencilClearOption-None.md Edit}
    */
    None,
    /**
    * Stencil buffer will be cleared by "clearStencilValue" property value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilClearOption/properties/StencilClearOption-CustomValue.md Edit}
    */
    CustomValue,
    /**
    * Stencil buffer will be cleared by texture from "maskTexture" property, if "maskTexture" is null then the stencil clear option will fallback to "CustomValue" mode.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilClearOption/properties/StencilClearOption-CustomTexture.md Edit}
    */
    CustomTexture
}

/**
* Specifies whether the front and/or back face stencil test will be applied. The initial value is "FrontAndBack"

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFace/StencilFace-description.md Edit}
*/
declare enum StencilFace {
    /**
    * The stencil test will be applied to the both front and back faces.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFace/properties/StencilFace-FrontAndBack.md Edit}
    */
    FrontAndBack,
    /**
    * The stencil test will be applied to the front face only.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFace/properties/StencilFace-Front.md Edit}
    */
    Front,
    /**
    * The stencil test will be applied to the back face only.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFace/properties/StencilFace-Back.md Edit}
    */
    Back
}

/**
* Specifies the stencil test function. The initial value is "Always".

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/StencilFunction-description.md Edit}
*/
declare enum StencilFunction {
    /**
    * Always passes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/properties/StencilFunction-Always.md Edit}
    */
    Always,
    /**
    * Always fails.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/properties/StencilFunction-Never.md Edit}
    */
    Never,
    /**
    * Passes if (referenceValue & readMask) < (stencil buffer value & readMask).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/properties/StencilFunction-Less.md Edit}
    */
    Less,
    /**
    * Passes if (referenceValue & readMask) <= (stencil buffer value & readMask).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/properties/StencilFunction-LessEqual.md Edit}
    */
    LessEqual,
    /**
    * Passes if (referenceValue & readMask) > (stencil buffer value & readMask).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/properties/StencilFunction-Greater.md Edit}
    */
    Greater,
    /**
    * Passes if (referenceValue & readMask) >= (stencil buffer value & readMask).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/properties/StencilFunction-GreaterEqual.md Edit}
    */
    GreaterEqual,
    /**
    * Passes if (referenceValue & readMask) = (stencil buffer value & readMask).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/properties/StencilFunction-Equal.md Edit}
    */
    Equal,
    /**
    * Passes if (referenceValue & readMask) != (stencil buffer value & readMask).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilFunction/properties/StencilFunction-NotEqual.md Edit}
    */
    NotEqual
}

/**
* Options for specifying the action to take when stencil and depth tests resolve.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/StencilOperation-description.md Edit}
*/
declare enum StencilOperation {
    /**
    * Keep the current value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/properties/StencilOperation-Keep.md Edit}
    */
    Keep,
    /**
    * Set the stencil buffer value to 0.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/properties/StencilOperation-Zero.md Edit}
    */
    Zero,
    /**
    * Sets the stencil buffer value to "referenceValue" property of StencilState.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/properties/StencilOperation-Replace.md Edit}
    */
    Replace,
    /**
    * Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/properties/StencilOperation-IncrementClamp.md Edit}
    */
    IncrementClamp,
    /**
    * Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/properties/StencilOperation-IncrementWrap.md Edit}
    */
    IncrementWrap,
    /**
    * Decrements the current stencil buffer value. Clamps to 0.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/properties/StencilOperation-DecrementClamp.md Edit}
    */
    DecrementClamp,
    /**
    * Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of zero.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/properties/StencilOperation-DecrementWrap.md Edit}
    */
    DecrementWrap,
    /**
    * Bitwise inverts the current stencil buffer value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilOperation/properties/StencilOperation-Invert.md Edit}
    */
    Invert
}

/**
* The stencil test state for Pass.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/StencilState-description.md Edit}
*/
interface StencilState extends ScriptObject {
    /**
    * Specifies the stencil action when the stencil test passes, but the depth test fails. The initial value is "Keep".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-depthFailureOperation.md Edit}
    */
    depthFailureOperation: StencilOperation
    
    /**
    * Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. The initial value is "Keep".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-depthStencilPassOperation.md Edit}
    */
    depthStencilPassOperation: StencilOperation
    
    /**
    * Enable or disable the stencil test for pass. The initial value is false.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-enabled.md Edit}
    */
    enabled: boolean
    
    /**
    * Specifies whether the front and/or back face stencil test will be applied. The initial value is "FrontAndBack"
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-face.md Edit}
    */
    face: StencilFace
    
    /**
    * Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is 0xFF.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-readMask.md Edit}
    */
    readMask: number
    
    /**
    * Specifies the reference value for the stencil test. It is clamped to the range [0..pow(2, n)1], where n is the number of bitplanes in the stencil buffer. The initial value is 0.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-referenceValue.md Edit}
    */
    referenceValue: number
    
    /**
    * Specifies the stencil test function. The initial value is "Always".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-stencilCompareFunction.md Edit}
    */
    stencilCompareFunction: StencilFunction
    
    /**
    * Specifies the action to take when the stencil test fails. The initial value is "Keep".
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-stencilFailureOperation.md Edit}
    */
    stencilFailureOperation: StencilOperation
    
    /**
    * Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is 0xFF.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StencilState/properties/StencilState-writeMask.md Edit}
    */
    writeMask: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StereoCameraModule/StereoCameraModule-description.md Edit}

* @exposesUserData

* @wearableOnly

* @private
*/
interface StereoCameraModule extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StereoCameraModule/methods/StereoCameraModule-turnOff.md Edit}
    
    * @private
    */
    turnOff(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StereoCameraModule/methods/StereoCameraModule-turnOn.md Edit}
    
    * @private
    */
    turnOn(onCamerasAvailable: (leftCamera: Texture, rightCamera: Texture, arg3: DeviceCamera, arg4: DeviceCamera) => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StereoEffect/StereoEffect-description.md Edit}

* @private
*/
interface StereoEffect extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StereoEffect/properties/StereoEffect-enabled.md Edit}
    
    * @private
    */
    enabled: boolean
    
}

/**
* Settings for saving values in a MultiplayerSession.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageOptions/StorageOptions-description.md Edit}
*/
interface StorageOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageOptions/properties/StorageOptions-dataPolicy.md Edit}
    
    * @private
    */
    dataPolicy: string
    
    /**
    * The Storage Scope to set, get, or delete values from.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageOptions/properties/StorageOptions-scope.md Edit}
    */
    scope: StorageScope
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageOptions/properties/StorageOptions-writePermissions.md Edit}
    
    * @private
    */
    writePermissions: WritePermissions
    
}
declare namespace StorageOptions {
    /**
    * Create a new StorageOptions object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageOptions/methods/StorageOptions-create.md Edit}
    */
    export function create(): StorageOptions
    

}

/**
* Specifies a scope for storing or retrieving values from a MultiplayerSession.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageScope/StorageScope-description.md Edit}
*/
declare enum StorageScope {
    /**
    * Stored variables are visible to the user only, and accessible until lens cache is cleared.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageScope/properties/StorageScope-User.md Edit}
    */
    User,
    /**
    * Stored values are visible and editable by any user who is using the same session. Values are stored as long as the session that corresponds to chat exists.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageScope/properties/StorageScope-Session.md Edit}
    */
    Session,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StorageScope/properties/StorageScope-Global.md Edit}
    */
    Global
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StrandNeighbourSearchType/StrandNeighbourSearchType-description.md Edit}

* @deprecated

* @private
*/
declare enum StrandNeighbourSearchType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StrandNeighbourSearchType/properties/StrandNeighbourSearchType-enumKeyNearestOnCurrent.md Edit}
    
    * @deprecated
    
    * @private
    */
    enumKeyNearestOnCurrent,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StrandNeighbourSearchType/properties/StrandNeighbourSearchType-enumKeyNearestOnNext.md Edit}
    
    * @deprecated
    
    * @private
    */
    enumKeyNearestOnNext,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StrandNeighbourSearchType/properties/StrandNeighbourSearchType-enumKeyTriangleGrids.md Edit}
    
    * @deprecated
    
    * @private
    */
    enumKeyTriangleGrids
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/StreamPlayerComponent-description.md Edit}

* @private
*/
interface StreamPlayerComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-channelVolume.md Edit}
    
    * @private
    */
    channelVolume(channel: number, volume: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-isPaused.md Edit}
    
    * @private
    */
    isPaused(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-isPlaying.md Edit}
    
    * @private
    */
    isPlaying(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-pause.md Edit}
    
    * @private
    */
    pause(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-play.md Edit}
    
    * @private
    */
    play(loops: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-resume.md Edit}
    
    * @private
    */
    resume(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-setDecoderFlags.md Edit}
    
    * @deprecated
    
    * @private
    */
    setDecoderFlags(featureFlags: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-setFeatureFlags.md Edit}
    
    * @private
    */
    setFeatureFlags(featureFlags: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/methods/StreamPlayerComponent-stop.md Edit}
    
    * @private
    */
    stop(fade: boolean): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-audioTrack.md Edit}
    
    * @private
    */
    audioTrack: AudioTrackAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-directivityEffectActive.md Edit}
    
    * @private
    */
    directivityEffectActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-directivityEffectShapeDecay.md Edit}
    
    * @private
    */
    directivityEffectShapeDecay: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-directivityEffectShapeFactor.md Edit}
    
    * @private
    */
    directivityEffectShapeFactor: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-distanceEffectActive.md Edit}
    
    * @private
    */
    distanceEffectActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-distanceEffectMaxAttenuation.md Edit}
    
    * @private
    */
    distanceEffectMaxAttenuation: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-distanceEffectMaxDistance.md Edit}
    
    * @private
    */
    distanceEffectMaxDistance: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-distanceEffectMinDistance.md Edit}
    
    * @private
    */
    distanceEffectMinDistance: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-distanceEffectType.md Edit}
    
    * @private
    */
    distanceEffectType: Audio.DistanceCurveType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-dopplerEffectActive.md Edit}
    
    * @private
    */
    dopplerEffectActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-dopplerEffectFactor.md Edit}
    
    * @private
    */
    dopplerEffectFactor: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-duration.md Edit}
    
    * @readonly
    
    * @private
    */
    duration: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-externalizationActive.md Edit}
    
    * @private
    */
    externalizationActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-hrtfEffectActive.md Edit}
    
    * @private
    */
    hrtfEffectActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-hrtfEffectMode.md Edit}
    
    * @private
    */
    hrtfEffectMode: HRTFMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-pan.md Edit}
    
    * @private
    */
    pan: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-panEffectActive.md Edit}
    
    * @private
    */
    panEffectActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-panEffectLevel.md Edit}
    
    * @private
    */
    panEffectLevel: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-panEffectType.md Edit}
    
    * @private
    */
    panEffectType: Audio.PanType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-position.md Edit}
    
    * @private
    */
    position: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-spatialAudioActive.md Edit}
    
    * @private
    */
    spatialAudioActive: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-track.md Edit}
    
    * @private
    */
    track: AudioTrackAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StreamPlayerComponent/properties/StreamPlayerComponent-volume.md Edit}
    
    * @private
    */
    volume: number
    
}

/**
* Options for stretching a mesh to fit a [ScreenTransform's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) bounding box.
* Used in [MeshVisual's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual) `stretchMode` property, as long as the SceneObject has a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) attached.
* Also used in [TextFill's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextFill) `textureStretch` property to control texture stretching when drawing text.

* See the [Image guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/2d/image) for more information about stretch modes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchMode/StretchMode-description.md Edit}
*/
declare enum StretchMode {
    /**
    * Scale uniformly so that both width and height fit within the bounds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchMode/properties/StretchMode-Fit.md Edit}
    */
    Fit,
    /**
    * Scale uniformly so that both width and height meet or exceed the bounds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchMode/properties/StretchMode-Fill.md Edit}
    */
    Fill,
    /**
    * Scale non-uniformly to match the exact width and height of the bounds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchMode/properties/StretchMode-Stretch.md Edit}
    */
    Stretch,
    /**
    * Scale uniformly to match the same height as the bounds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchMode/properties/StretchMode-FitHeight.md Edit}
    */
    FitHeight,
    /**
    * Scale uniformly to match the same width as the bounds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchMode/properties/StretchMode-FitWidth.md Edit}
    */
    FitWidth,
    /**
    * Same as `Fill`, but when used with the [Image component](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Image) any area outside of the bounds is cropped out.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchMode/properties/StretchMode-FillAndCut.md Edit}
    */
    FillAndCut,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchMode/properties/StretchMode-FillNCut.md Edit}
    
    * @deprecated
    */
    FillNCut
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchPoint/StretchPoint-description.md Edit}

* @unreleased
*/
interface StretchPoint {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchPoint/properties/StretchPoint-delta.md Edit}
    
    * @unreleased
    */
    delta: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchPoint/properties/StretchPoint-index.md Edit}
    
    * @unreleased
    
    * @readonly
    */
    index: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/StretchPoint/properties/StretchPoint-weight.md Edit}
    
    * @unreleased
    */
    weight: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Studio/Studio-description.md Edit}
*/
interface Studio {
}
declare namespace Studio {
    /**
    * Prints out a message to the Logger window in Studio. When running on a device paired to Lens Studio, it will send the message directly to the Logger window in Studio to help with debugging.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Studio/methods/Studio-log.md Edit}
    */
    export function log(message: any): void
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Surface/Surface-description.md Edit}

* @private
*/
interface Surface extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Surface/methods/Surface-registerSceneObjectOfInterest.md Edit}
    
    * @private
    */
    registerSceneObjectOfInterest(obj: SceneObject): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Surface/methods/Surface-resetTracking.md Edit}
    
    * @private
    */
    resetTracking(position: vec2): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Surface/methods/Surface-setTrackerMode.md Edit}
    
    * @private
    */
    setTrackerMode(trackerType: TrackerMode): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Surface/methods/Surface-setWorldOriginOffset.md Edit}
    
    * @private
    */
    setWorldOriginOffset(offset: vec3): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Surface/methods/Surface-unregisterSceneObjectOfInterest.md Edit}
    
    * @private
    */
    unregisterSceneObjectOfInterest(obj: SceneObject): void
    
}

/**
* Used with [DeviceTracking.surfaceOptions](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) to change settings for Surface tracking mode.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SurfaceOptions/SurfaceOptions-description.md Edit}
*/
interface SurfaceOptions extends ScriptObject {
    /**
    * If enabled, surface tracking will be improved using native AR tracking.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SurfaceOptions/properties/SurfaceOptions-enhanceWithNativeAR.md Edit}
    */
    enhanceWithNativeAR: boolean
    
}

/**
* If a [DeviceTracking](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) component is present in the scene, this event is triggered when
* the tracking is restarted (typically when the Lens starts, or if the user taps the ground).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingResetEvent/WorldTrackingResetEvent-description.md Edit}
*/
interface SurfaceTrackingResetEvent extends SceneEvent {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SystemInterfaceElement/SystemInterfaceElement-description.md Edit}

* @private
*/
declare enum SystemInterfaceElement {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/SystemInterfaceElement/properties/SystemInterfaceElement-SoftNavigationBar.md Edit}
    
    * @private
    */
    SoftNavigationBar
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TangentType/TangentType-description.md Edit}
*/
declare enum TangentType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TangentType/properties/TangentType-Const.md Edit}
    */
    Const,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TangentType/properties/TangentType-Broken.md Edit}
    */
    Broken,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TangentType/properties/TangentType-Clamped.md Edit}
    */
    Clamped,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TangentType/properties/TangentType-Free.md Edit}
    */
    Free,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TangentType/properties/TangentType-Linear.md Edit}
    */
    Linear
}

/**
* This event is triggered when the user taps on the screen.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TapEvent/TapEvent-description.md Edit}
*/
interface TapEvent extends SceneObjectEvent {
    /**
    * Returns the normalized 2D screen position of the user's tap. The normalized coordinates range from ([0-1], [0-1]), (0,0) being top-left and (1,1) being bottom-right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TapEvent/methods/TapEvent-getTapPosition.md Edit}
    
    * @unreleased
    */
    getTapPosition(): vec2
    
}

/**
* Arguments used with the `InteractionComponent.onTap` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TapEventArgs/TapEventArgs-description.md Edit}
*/
interface TapEventArgs extends ScriptObject {
    /**
    * The position of the touch on the screen. [0,0] being top left, and [1,1] being bottom right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TapEventArgs/properties/TapEventArgs-position.md Edit}
    
    * @readonly
    */
    position: vec2
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TargetingDataArgs/TargetingDataArgs-description.md Edit}

* @wearableOnly
*/
interface TargetingDataArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TargetingDataArgs/properties/TargetingDataArgs-isValid.md Edit}
    
    * @readonly
    */
    isValid: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TargetingDataArgs/properties/TargetingDataArgs-rayDirectionInWorld.md Edit}
    
    * @readonly
    */
    rayDirectionInWorld: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TargetingDataArgs/properties/TargetingDataArgs-rayOriginInWorld.md Edit}
    
    * @readonly
    */
    rayOriginInWorld: vec3
    
}

/**
* Namespace for mathematical operations on tensors. Useful with MLComponent.

**Tensor broadcasting rules**

* Tensor (channels, width, height) op Tensor (1, 1, 1)  =  the same as applying op with scalar

* Tensor (channels, width, height) op Tensor (channels, 1, 1)  =  the same as applying op per channel

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/TensorMath-description.md Edit}
*/
interface TensorMath {
}
declare namespace TensorMath {
    /**
    * Adds a scalar value to each element of `inTensor` and puts the result into `outTensor`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-addScalar.md Edit}
    */
    export function addScalar(inTensor: Float32Array, scalar: number, outTensor: Float32Array): void
    
    /**
    * Adds `inTensorA` to `inTensorB` and puts the result into `outTensor`. See the broadcasting rules for elementwise operations.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-addTensors.md Edit}
    */
    export function addTensors(inTensorA: Float32Array, inShapeA: vec3, inTensorB: Float32Array, inShapeB: vec3, outTensor: Float32Array): void
    
    /**
    * Converts inTensor from the amplitude scale to the decibel scale.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-amplitudeToDb.md Edit}
    */
    export function amplitudeToDb(inTensor: Float32Array, outTensor: Float32Array): void
    
    /**
    * Blurs an image tensor using the box filter.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-applyBoxFilter.md Edit}
    */
    export function applyBoxFilter(inTensor: Float32Array, inShape: vec3, kernelSize: vec2, anchor: vec2, normalize: boolean, borderType: TensorMath.BorderType, outTensor: Float32Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-applyNMS.md Edit}
    */
    export function applyNMS(inTensor: Float32Array, inShape: vec3, scores: Float32Array, scoreThreshold: number, iouThreshold: number, outTensor: Uint32Array): number
    
    /**
    * Applies a fixed-level threshold to each array element.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-applyThreshold.md Edit}
    */
    export function applyThreshold(inTensor: Float32Array, threshold: number, maxValue: number, type: TensorMath.ThresholdMethod, outTensor: Float32Array): void
    
    /**
    * Approximates a polygonal curve with the specified precision.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-approximatePolygonalCurve.md Edit}
    */
    export function approximatePolygonalCurve(inTensor: Float32Array, inShape: vec3, epsilon: number, closed: boolean, outTensor: Float32Array): number
    
    /**
    * Returns the indices of the maximum values along an the channels of `inTensor`, with the specified `inShape`. The result is put into `outTensor`.
    
    * If `inShape` = {width, height, channels}, then the shape of `outTensor` should be {1, 2, channels}.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-argMax.md Edit}
    */
    export function argMax(inTensor: Float32Array, inShape: vec3, outTensor: Uint32Array): void
    
    /**
    * Similar to `numpy.argsort()`, but in TensorMath, we have no kind and order parameters. Also, tensor is always 3D, and axis can be equal to 0(x), 1(y) or 2(z).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-argSort.md Edit}
    */
    export function argSort(inTensor: Float32Array, shape: vec3, axis: number, outTensor: Uint32Array): void
    
    /**
    * Applies a list of indices of a tensor in sorted order of their corresponding values in the tensor to the given outTensor. Only indices whose corresponding values are not equal to 0 in the provided mask will be returned. Indices from the original tensor, before applying the mask, will be returned in the provided array. Returns the size of the list of indices applied to the outTensor (note: this will be equal to the number of non-zero values provided in the mask). eg:
    *  
    * ```js
    * var inTensor = [5.0, 2.0, 1.0, 3.0, 7.0, -1.0, -5.0]; 
    * var mask = [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0]; 
    * var outTensor = new Uint32Array(7); 
    * var order = SortOrder.Ascending;
    * var size = TensorMath.argSortMasked(inTensor, mask, outTensor, order); 
    * print(outTensor.subarray(size)); // Expected: [2, 1, 3, 0, 4]
    * ```
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-argSortMasked.md Edit}
    */
    export function argSortMasked(inTensor: Float32Array, mask: Float32Array, outTensor: Uint32Array, order: SortOrder): number
    
    /**
    * Clamps all values of `inTensor` between `minVal` and `maxVal`, and puts the result into `outTensor`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-clamp.md Edit}
    */
    export function clamp(inTensor: Float32Array, minVal: number, maxVal: number, outTensor: Float32Array): void
    
    /**
    * Concatenates inTensorA and inTensorB along the specified axis and puts the result to the outTensor. Input arrays have to have same dimension along other 2 axes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-concat.md Edit}
    */
    export function concat(inTensorA: Float32Array, inShapeA: vec3, inTensorB: Float32Array, inShapeB: vec3, axis: number, outTensor: Float32Array): void
    
    /**
    * Dilates an image by using a specific structuring element.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-dilate.md Edit}
    */
    export function dilate(inTensor: Float32Array, inShape: vec3, kernelTensor: Float32Array, kernelShape: vec3, anchor: vec2, iterations: number, borderType: TensorMath.BorderType, borderValue: vec4, outTensor: Float32Array): void
    
    /**
    * Divides `inTensorA` by `inTensorB` and puts the result into `outTensor`. See broadcasting rules for elementwise operations.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-divTensors.md Edit}
    */
    export function divTensors(inTensorA: Float32Array, inShapeA: vec3, inTensorB: Float32Array, inShapeB: vec3, outTensor: Float32Array): void
    
    /**
    * Draws a line segment connecting two points.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-drawLine.md Edit}
    */
    export function drawLine(imgTensor: Float32Array, imgShape: vec3, point1: vec2, point2: vec2, color: vec4, thickness: number, lineType: number, shift: number): void
    
    /**
    * Erodes an image by using a specific structuring element.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-erode.md Edit}
    */
    export function erode(inTensor: Float32Array, inShape: vec3, kernelTensor: Float32Array, kernelShape: vec3, anchor: vec2, iterations: number, borderType: TensorMath.BorderType, borderValue: vec4, outTensor: Float32Array): void
    
    /**
    * Fills a convex polygon.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-fillConvexPoly.md Edit}
    */
    export function fillConvexPoly(imgTensor: Float32Array, imgShape: vec3, pointsTensor: any, pointsShape: vec3, color: vec4, lineType: number, shift: number): void
    
    /**
    * Fills a polygon. Note that you should pass an Array of Int32Array-s (polygonsTensors).
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-fillPoly.md Edit}
    */
    export function fillPoly(imgTensor: Float32Array, imgShape: vec3, polygonsTensors: any[], color: vec4, lineType: number, shift: number, offset: vec2): void
    
    /**
    * Returns contours. Note that: contours are sorted from the largest to the smallest; 2) We cannot return Array of TypedArray-s, so all contours data is stored in single outTensor and Array with sizes of each contour is returned.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-findContours.md Edit}
    */
    export function findContours(inTensor: Uint8Array, inShape: vec3, mode: number, method: number, offset: vec2, outTensor: any): number[]
    
    /**
    * Finds minimum distances between each 2D point from one array, to 2D points in another array.
    
    * `from` - Float32Array of size ("from" point count * 2). 2D points from which min distances should be found
    
    * `fromShape` - Should be {2, "from" point count, 1}
    
    * `to` - Float32Array of size ("to" point count * 2). 2D points to which min distances should be found
    
    * `toShape` - Should be {2, "to" point count, 1}
    
    * `output` - Float32Array of size ("from" point count). For each point in the `from` array, the minimum distance to points from the `to` array will be written to this array.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-findMinDistancesBetween.md Edit}
    */
    export function findMinDistancesBetween(from: Float32Array, fromShape: vec3, to: Float32Array, toShape: vec3, output: Float32Array): void
    
    /**
    * Looks for contour points in a grayscale texture, or any one-channel tensor.
    
    * `grayscaledTexture` - Float32Array of size (width * height). Grayscale texture or one-channel tensor to evaluate
    
    * `textureShape` - Should be {width, height, 1}
    
    * `threshold` - Quality value threshold for found contour points
    
    * Each contour point found must satisfy these conditions:
    
    * 1. The point's quality value should be >= `threshold`
    
    * 2. The number of points which have values < `threshold` and lie in the rectangle with left corner vec2(x-`winSize`, y-`winSize`) and right corner vec2(x+`winSize`-1, y+`winSize`-1) should be <= `maxNearCount`
    
    * `outTensor` - Float32Array where results are written. Found contour points are written in the format: x0, y0, x1, y1, etc.
    * The number of points found will not exceed outTensor's size / 2.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-getContour.md Edit}
    */
    export function getContour(grayscaledTexture: Float32Array, textureShape: vec3, threshold: number, winSize: number, maxNearCount: number, outTensor: Float32Array): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-getRotatedRectPoints.md Edit}
    */
    export function getRotatedRectPoints(rotatedRect: RotatedRect, outTensor: Float32Array): void
    
    /**
    * Calculates the length of all vectors in an array. Vectors can be of any dimension count.
    
    * `vectors` - Float32Array of size (vector dimension count * vector count). Vectors to measure the length of
    
    * `vectorsShape` - Should be {vector dimension count, vector count, 1}
    
    * `output` - Float32Array of size (vector count). For each vector in `vectors`, its length will be written to this array
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-getVectorsLength.md Edit}
    */
    export function getVectorsLength(vectors: Float32Array, vectorsShape: vec3, output: Float32Array): void
    
    /**
    * Checks for each 2D point whether it is inside of a rectangle.
    
    * `points` - Float32Array of size (point count * 2). 2D points to check
    
    * `pointsShape` - Should be {2, point count, 1}
    
    * `rect` - 2D rectangle points will be checked against
    
    * `output` - Uint8Array of size (point count). For each point, this will be filled with 1 if the point is inside the rectangle, or 0 otherwise.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-isInRectangle.md Edit}
    */
    export function isInRectangle(points: Float32Array, pointsShape: vec3, rect: Rect, output: Uint8Array): void
    
    /**
    * Places the maximum values of `inTensor` into `outTensor`.
    
    * `outTensor` should have the shape {1, 1, channels}.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-max.md Edit}
    */
    export function max(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): void
    
    /**
    * From the input points, finds the two points with the maximum distance between them and returns this distance. Works with points of any dimension count.
    
    * `points` - Float32Array of size (point dimension count * point count). Points to find the max distance between.
    
    * `pointsShape` - Should be {point dimension count, point count, 1}
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-maxDistanceBetweenPoints.md Edit}
    */
    export function maxDistanceBetweenPoints(points: Float32Array, pointsShape: vec3): number
    
    /**
    * If we consider the tensor as a 3D array, this function finds the indexes of the maximum element in each subarray of size `window`.
    
    * `tensor` - Float32Array of size (width * height * depth). 3D array of input data
    
    * `tensorShape` - Should be {width, height, depth}
    
    * `window` - Size of each subarray, in each of which will be found the index of the max element
    
    * `output` - Float32Array of size (width * height * depth). The index of the max value will be written into this array for each subarray.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-maxInSlideWindow.md Edit}
    */
    export function maxInSlideWindow(tensor: Float32Array, tensorShape: vec3, window: vec3, output: Uint32Array): void
    
    /**
    * Places the minimum values of `inTensor` into `outTensor`.
    
    * `outTensor` should have the shape {1, 1, channels}.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-min.md Edit}
    */
    export function min(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): void
    
    /**
    * Return TensorMath's format of RotatedRect.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-minAreaRect.md Edit}
    */
    export function minAreaRect(inTensor: Float32Array, inShape: vec3): RotatedRect
    
    /**
    * If we consider the tensor as a 3D array, this function finds the indexes of the minimum element in each subarray of size `window`.
    
    * `tensor` - Float32Array of size (width * height * depth). 3D array of input data
    
    * `tensorShape` - Should be {width, height, depth}
    
    * `window` - Size of each subarray, in each of which will be found the index of the min element
    
    * `output` - Float32Array of size (width * height * depth). The index of the min value will be written into this array for each subarray.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-minInSlideWindow.md Edit}
    */
    export function minInSlideWindow(tensor: Float32Array, tensorShape: vec3, window: vec3, output: Uint32Array): void
    
    /**
    * Multiply a matrix by a set of points through an efficient batch operation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-mulMatToPoints.md Edit}
    */
    export function mulMatToPoints(pointsTensor: Float32Array, pointsShape: vec3, matrix: mat4, outTensor: Float32Array): void
    
    /**
    * Multiplies each element of `inTensor` by a scalar value and puts the result into `outTensor`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-mulScalar.md Edit}
    */
    export function mulScalar(inTensor: Float32Array, scalar: number, outTensor: Float32Array): void
    
    /**
    * Multiplies `inTensorA` and `inTensorB` and puts the result into `outTensor`. See broadcasting rules for elementwise operations.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-mulTensors.md Edit}
    */
    export function mulTensors(inTensorA: Float32Array, inShapeA: vec3, inTensorB: Float32Array, inShapeB: vec3, outTensor: Float32Array): void
    
    /**
    * Stabilizes image objects between two consecutive frames caused by camera or object movement.
    * Results are written to the `points` array.
    
    * `prevGrayscale` - Uint8Array of size (width * height). Grayscale data of previous frame
    
    * `grayscale` - Uint8Array of size (width * height). Grayscale data of current frame
    
    * `textureShape` - Should be {width, height, 1}
    
    * `prevPoints` - Float32Array of size (point count * 2). Positions of 2D points on the previous frame
    
    * `points` - Float32Array of size (point count * 2). Results are written here - positions of 2D points on the current frame
    
    * `pointsShape` - Should be {2, point count, 1}
    
    * `winSize` - Size of the search window for each pyramid level
    
    * `maxLevel` - Maximal pyramid level number, with zero based index
    
    * `maxCount` - Terminate if iteration count exceeds maxCount
    
    * `epsilon` - Terminate if window movement is less than epsilon
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-opticalFlow.md Edit}
    */
    export function opticalFlow(prevGrayscale: Uint8Array, grayscale: Uint8Array, textureShape: vec3, prevPoints: Float32Array, points: Float32Array, pointsShape: vec3, winSize: vec2, maxLevel: number, maxCount: number, epsilon: number): void
    
    /**
    * Rearranges the inTensor of inShape according to the desired ordering and puts the result into outTensor.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-permute.md Edit}
    */
    export function permute(inTensor: Float32Array, inShape: vec3, permuteAxis: vec3, outTensor: Float32Array): void
    
    /**
    * Sorts 2D points by polar angle relative to the `center` point.
    
    * `inTensor` - Float32Array with size (point count * 2). 2D points to sort
    
    * `tensorShape` - Should be {2, point count, 1}
    
    * `center` - Center point to use for polar angle sorting
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-polarSort2d.md Edit}
    */
    export function polarSort2d(inTensor: Float32Array, tensorShape: vec3, center: vec2): void
    
    /**
    * Raises elements of `inTensor` to the power of `val`, and puts the results into `outTensor`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-power.md Edit}
    */
    export function power(inTensor: Float32Array, val: number, outTensor: Float32Array): void
    
    /**
    * Converts inTensor from the power scale to the decibel scale.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-powerToDb.md Edit}
    */
    export function powerToDb(inTensor: Float32Array, topDb: number, outTensor: Float32Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-powerToDbExtended.md Edit}
    
    * @private
    */
    export function powerToDbExtended(inTensor: Float32Array, refMax: boolean, refVal: number, topDb: number, eps: number, outTensor: Float32Array): void
    
    /**
    * Project 3D points into 2D space using an efficient batch operation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-projectPoints.md Edit}
    */
    export function projectPoints(pointsTensor: Float32Array, pointsShape: vec3, projectionMatrix: mat4, outTensor: Float32Array): void
    
    /**
    * Duplicates inTensor elements and store result in the outTensor.
    
    * Axis specifies the number of repeats along the axis e.g:
    
    * axis(1, 1, 1): outTensor will be the same as inTensor
    
    * axis(2, 1, 2): inTesnor = [1 2 3 | 4 5 6], inShape = [3 2 1] => 
    
    * outTensor = [[1 1 2 2 3 3 | 4 4 5 5 6 6] [1 1 2 2 3 3 | 4 4 5 5 6 6]] outShape = [6 2 2]
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-repeat.md Edit}
    */
    export function repeat(inTensor: Float32Array, inShape: vec3, axis: vec3, outTensor: Float32Array): void
    
    /**
    * Applies a rotation to each point in a set of 3D points, and places the results in `outPoints`.
    
    * `points` - Float32Array of size (point count * 3). Points to rotate
    
    * `pointsShape` - Should be {3, point count, 1}
    
    * `rotation` - Quaternion rotation to apply
    
    * `outPoints` - Float32Array of size (point count * 3). Resulting rotated points are placed here
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-rotatePoints3d.md Edit}
    */
    export function rotatePoints3d(points: Float32Array, pointsShape: vec3, rotation: quat, outPoints: Float32Array): void
    
    /**
    * Smooths a polygon formed by input points. Works with points of any dimension count, for example `2` for 2D points or `3` for 3D points.
    * Results are written to `outTensor`.
    
    * `inTensor` - Float32Array of size (point dimension count * point count). Points of polygon to smooth out
    
    * `tensorShape` - Should be {point dimension count, point count, 1}
    
    * `step` - Smoothing value, higher value meaning higher smoothness
    
    * `outTensor` - Float32Array of size (point dimension count * point count). Smoothed points are written to this array
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-smoothPoints.md Edit}
    */
    export function smoothPoints(inTensor: Float32Array, tensorShape: vec3, step: number, outTensor: Float32Array): void
    
    /**
    * Applies softArgMax function to the `inTensor`, with the specified `inShape`. The result is put into `outTensor`.
    
    * If `inShape` = {width, height, channels}, then the shape of `outTensor` should be {1, 2, channels}.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-softArgMax.md Edit}
    */
    export function softArgMax(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array, normalized: boolean): void
    
    /**
    * Applies softMax function to `inTensor`, with the specified `inShape`. The result is put into `outTensor`.
    
    * If `inShape` = {width, height, channels}, then the shape of `outTensor` should be {1, 1, channels}.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-softMax.md Edit}
    */
    export function softMax(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array): void
    
    /**
    * Estimates the object pose given a set of object points (`inObjectPoints`), their corresponding image projections (`inImagePoints`), and the intrinsic camera matrix (`transform`).
    
    * `inObjectPoints` - Float32Array of size (point count * 3). 3D points of the object
    
    * `inImagePoints` - Float32Array of size (point count * 2). 2D points which are projections of the points in `inObjectPoints`, with some applied transformation we are attempting to find
    
    * `imagePointsShape` - Should be {2, point count, 1}
    
    * `transform` - Intrinsic camera matrix
    
    * `flags` - Currently unused, can be left as 0. Further functionality may be added in the future.
    
    * `outRotTrans` - Float32Array of size 6 where results are written. Describes object transformation:
    
    **vec3(outRotTrans[0], outRotTrans[1], outRotTrans[2])** - object rotation in Rodrigues format
    
    **vec3(outRotTrans[3], outRotTrans[4], outRotTrans[5])** - object position in 3D space
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-solvePnP.md Edit}
    */
    export function solvePnP(inObjectPoints: Float32Array, inImagePoints: Float32Array, imagePointsShape: vec3, transform: mat3, flags: number, outRotTrans: Float32Array): boolean
    
    /**
    * Estimates the object pose given a set of object points (inObjectPoints), their corresponding image projections (inImagePoints), and the intrinsic camera matrix (cameraIntrinsicsMatrix). Similar to solvePnP but has additional camera distortion coefficient settings.
    
    * `distortionCoeff` - Input vector of distortion coefficients. If the vector is null - the zero distortion coefficients are assumed. 
    
    * `distortionCoeffShape` - {numElements, 1, 1} where numElements can be 4, 5, 8 or 12.
    
    * `useExtrinsicGuess` - The function uses the provided outRotTrans values as initial approximations of the rotation and translation vectors and further optimizes them.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-solvePnPExtended.md Edit}
    */
    export function solvePnPExtended(inObjectPoints: Float32Array, inImagePoints: Float32Array, imagePointsShape: vec3, cameraIntrinsicsMatrix: mat3, distortionCoeff: Float32Array, distortionCoeffShape: vec3, useExtrinsicGuess: boolean, flags: number, outRotTrans: Float32Array): boolean
    
    /**
    * `solvePnPRansac` is very similar to `solvePnPExtended` except that it uses Random Sample Consensus ( RANSAC ) for robustly estimating the pose.
    
    * `iterationsCount` - The number of times the minimum number of points are picked and the parameters estimated
    
    * `reprojectionError` - As mentioned earlier in RANSAC the points for which the predictions are close enough are called inliers. This parameter value is the maximum allowed distance between the observed and computed point projections to consider it an inlier.
    
    * `confidence` -  Number of inliers. If the algorithm at some stage finds more inliers than confidence, it finishes.
    * `outInliers` - Output array that contains indices of inliers in objectPoints and imagePoints .
    * outRotTrans
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-solvePnPRansac.md Edit}
    */
    export function solvePnPRansac(inObjectPoints: Float32Array, inImagePoints: Float32Array, imagePointsShape: vec3, cameraIntrinsicsMatrix: mat3, distortionCoeff: Float32Array, distortionCoeffShape: vec3, useExtrinsicGuess: boolean, iterationsCount: number, reprojectionError: number, confidence: number, flags: number, outInliers: Uint8Array, outRotTrans: Float32Array): boolean
    
    /**
    * Subtracts `inTensorB` from `inTensorA` and puts the result into `outTensor`. See the broadcasting rules for elementwise operations.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-subTensors.md Edit}
    */
    export function subTensors(inTensorA: Float32Array, inShapeA: vec3, inTensorB: Float32Array, inShapeB: vec3, outTensor: Float32Array): void
    
    /**
    * Applies subpixelArgMax function to the `inTensor`, with the specified `inShape` and kernel size. The result is put into `outTensor`.
    
    * If `inShape` = {width, height, channels}, then the shape of `outTensor` should be {1, 2, channels}.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-subpixelArgMax.md Edit}
    */
    export function subpixelArgMax(inTensor: Float32Array, inShape: vec3, outTensor: Float32Array, kernelSize: number): void
    
    /**
    * Calculate the sum of the inTensor elements and store result in the outTensor.
    
    * Axis specifies axis along which a sum is performed., e.g:
    
    * axis(0, 0, 0): the sum will be performed on the whole tensor
    
    * axis(0, 0, 1): the sum will be performed along the z axis. outTensor will store inShape.z values
    
    * axis(1, 1, 0): the sum will be performed along x and y axes. outTensor will store 
    
    * inShape.x * inShape.y values, where outTensor[y][x] is the sum of all inTensor[0..inShape.z-1][y][x] values
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-sum.md Edit}
    */
    export function sum(inTensor: Float32Array, inShape: vec3, axis: vec3, outTensor: Float32Array): void
    
    /**
    * Converts the texture to a set of 0-255 grayscale values, and outputs the result into `outTensor`.
    
    * `outTensor` should be a Uint8Array of shape {width, height, 1}.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath/methods/TensorMath-textureToGrayscale.md Edit}
    
    * @exposesUserData
    */
    export function textureToGrayscale(texture: Texture, grayscaleBuffer: Uint8Array, grayscaleBufferShape: vec3): void
    

}

declare namespace TensorMath {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.BorderType/TensorMath.BorderType-description.md Edit}
    */
    enum BorderType {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.BorderType/properties/TensorMath.BorderType-Constant.md Edit}
        */
        Constant,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.BorderType/properties/TensorMath.BorderType-Replicate.md Edit}
        */
        Replicate,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.BorderType/properties/TensorMath.BorderType-Reflect.md Edit}
        */
        Reflect,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.BorderType/properties/TensorMath.BorderType-Reflect101.md Edit}
        */
        Reflect101
    }

}

declare namespace TensorMath {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.ThresholdMethod/TensorMath.ThresholdMethod-description.md Edit}
    */
    enum ThresholdMethod {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.ThresholdMethod/properties/TensorMath.ThresholdMethod-Binary.md Edit}
        */
        Binary,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.ThresholdMethod/properties/TensorMath.ThresholdMethod-BinaryInv.md Edit}
        */
        BinaryInv,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.ThresholdMethod/properties/TensorMath.ThresholdMethod-Trunc.md Edit}
        */
        Trunc,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.ThresholdMethod/properties/TensorMath.ThresholdMethod-ToZero.md Edit}
        */
        ToZero,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TensorMath.ThresholdMethod/properties/TensorMath.ThresholdMethod-ToZeroInv.md Edit}
        */
        ToZeroInv
    }

}

/**
* Visual component that renders dynamic text.
* See the [Text guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/text/2d-text) for more information.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/Text-description.md Edit}
*/
interface Text extends BaseMeshVisual {
    /**
    * Settings for drawing a background behind the text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-backgroundSettings.md Edit}
    */
    backgroundSettings: BackgroundSettings
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-capitilizationOverride.md Edit}
    */
    capitilizationOverride: CapitilizationOverride
    
    /**
    * Controls the masking of color channels with a vec4b representing each channel with a boolean.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-colorMask.md Edit}
    */
    colorMask: vec4b
    
    /**
    * If enabled, the text material will use Depth Testing. Useful when Text exists in 3D space.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-depthTest.md Edit}
    */
    depthTest: boolean
    
    /**
    * Settings for how dropshadow is used in text drawing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-dropshadowSettings.md Edit}
    */
    dropshadowSettings: DropshadowSettings
    
    /**
    * Makes the Text component editable. When this is enabled the Text can be clicked to open up the device keyboard and edit the contents.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-editable.md Edit}
    */
    editable: boolean
    
    /**
    * Font asset used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-font.md Edit}
    */
    font: Font
    
    /**
    * Controls how text should be handled when it goes past the horizontal boundaries defined by the world space rect or ScreenTransform.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-horizontalOverflow.md Edit}
    */
    horizontalOverflow: HorizontalOverflow
    
    /**
    * Modifies the spacing between letters. Set to 0 by default, which uses the font's normal letter spacing.
    * Negative values will remove space between letters, and positive values will add more space between letters.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-letterSpacing.md Edit}
    */
    letterSpacing: number
    
    /**
    * Modifies the vertical spacing between lines, as a multiple of lines. 1 will be single spacing, 2 will be double spaced, and 0.5 would be half the normal line height.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-lineSpacing.md Edit}
    */
    lineSpacing: number
    
    /**
    * This event will notify you when the user finishes editing the text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-onEditingFinished.md Edit}
    
    * @readonly
    */
    onEditingFinished: event1<string, void>
    
    /**
    * This event will notify you when the input keyboard opens.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-onEditingStarted.md Edit}
    
    * @readonly
    */
    onEditingStarted: event0<void>
    
    /**
    * This event will notify you on every edit to the text while the user is typing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-onEditingUpdated.md Edit}
    
    * @readonly
    */
    onEditingUpdated: event1<string, void>
    
    /**
    * Settings for how text outline is used in text drawing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-outlineSettings.md Edit}
    */
    outlineSettings: OutlineSettings
    
    /**
    * Use this property to control whether to show the input preview the keyboard. Note this preview also enables cursor movement.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-showEditingPreview.md Edit}
    */
    showEditingPreview: boolean
    
    /**
    * Font size used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-size.md Edit}
    */
    size: number
    
    /**
    * If enabled, the rendered text will always scale to fit the boundaries defined by the world space rect or ScreenTransform.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-sizeToFit.md Edit}
    */
    sizeToFit: boolean
    
    /**
    * Text string to be drawn.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-text.md Edit}
    */
    text: string
    
    /**
    * Settings for how the text is drawn, such as fill color or texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-textFill.md Edit}
    */
    textFill: TextFill
    
    /**
    * Use this property to override the touch handling for when to open the device keyboard when the Text is editable.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-touchHandler.md Edit}
    */
    touchHandler: InteractionComponent
    
    /**
    * Controls how text should be handled when it goes past the vertical boundaries defined by the world space rect or ScreenTransform.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-verticalOverflow.md Edit}
    */
    verticalOverflow: VerticalOverflow
    
    /**
    * Controls the boundaries the text is aligned and wraps within when not using ScreenTransform. Referred to as the Layout Rect in the Inspector panel.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text/properties/Text-worldSpaceRect.md Edit}
    */
    worldSpaceRect: Rect
    
}

/**
* Renders a given text with a 3D mesh.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/Text3D-description.md Edit}
*/
interface Text3D extends MaterialMeshVisual {
    /**
    * Splits the Text3D into individual RenderMeshVisuals. This destroys the Text3D component and you can no longer edit its properties like text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/methods/Text3D-split.md Edit}
    */
    split(): RenderMeshVisual[]
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-capitilizationOverride.md Edit}
    */
    capitilizationOverride: CapitilizationOverride
    
    /**
    * Makes the Text component editable. When this is enabled the Text can be clicked to open up the device keyboard and edit the contents.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-editable.md Edit}
    */
    editable: boolean
    
    /**
    * Starting from the Text3D's local position control whether the meshes are extruded forwards, backwards, or both directions
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-extrudeDirection.md Edit}
    */
    extrudeDirection: number
    
    /**
    * How deep the text meshes should be relative to the line height. 0-1 portion of the basic height which will be used for mesh depth. Values > 1 are valid.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-extrusionDepth.md Edit}
    */
    extrusionDepth: number
    
    /**
    * Font asset used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-font.md Edit}
    */
    font: Font
    
    /**
    * Controls how text should be handled when it goes past the horizontal boundaries defined by the world space rect or ScreenTransform.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-horizontalOverflow.md Edit}
    */
    horizontalOverflow: HorizontalOverflow
    
    /**
    * Modifies the spacing between letters. Set to 0 by default, which uses the fonts normal letter spacing. Negative values will remove space between letters, and positive values will add more space between letters.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-letterSpacing.md Edit}
    */
    letterSpacing: number
    
    /**
    * Modifies the vertical spacing between lines, as a multiple of lines. 1 will be single spacing, 2 will be double spaced, and 0.5 would be half the normal line height.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-lineSpacing.md Edit}
    */
    lineSpacing: number
    
    /**
    * This event will notify you when the user finishes editing the text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-onEditingFinished.md Edit}
    
    * @readonly
    */
    onEditingFinished: event1<string, void>
    
    /**
    * This event will notify you when the user starts typing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-onEditingStarted.md Edit}
    
    * @readonly
    */
    onEditingStarted: event0<void>
    
    /**
    * This event will notify you on every edit to the text while the user is typing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-onEditingUpdated.md Edit}
    
    * @readonly
    */
    onEditingUpdated: event1<string, void>
    
    /**
    * Use this property to control whether to show the input preview the keyboard. Note this preview also enables cursor movement.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-showEditingPreview.md Edit}
    */
    showEditingPreview: boolean
    
    /**
    * Font size used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-size.md Edit}
    */
    size: number
    
    /**
    * If enabled, the rendered text will always scale to fit the boundaries defined by the world space rect or ScreenTransform.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-sizeToFit.md Edit}
    */
    sizeToFit: boolean
    
    /**
    * Text string to be drawn.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-text.md Edit}
    */
    text: string
    
    /**
    * Use this property to override the touch handling for when to open the device keyboard when the Text is editable.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-touchHandler.md Edit}
    */
    touchHandler: InteractionComponent
    
    /**
    * Controls how text should be handled when it goes past the vertical boundaries defined by the world space rect or ScreenTransform.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-verticalOverflow.md Edit}
    */
    verticalOverflow: VerticalOverflow
    
    /**
    * Controls the boundaries the text is aligned and wraps within when not using ScreenTransform. Referred to as the Layout Rect in the Inspector panel.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Text3D/properties/Text3D-worldSpaceRect.md Edit}
    */
    worldSpaceRect: Rect
    
}

/**
* Fill settings used by several text related classes.
* Used in [Text's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `textFill` property, [DropshadowSettings'](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#DropshadowSettings) `fill` property, and [OutlineSettings'](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#OutlineSettings) `fill` property.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFill/TextFill-description.md Edit}
*/
interface TextFill extends ScriptObject {
    /**
    * If `mode` is set to `TextFillMode.Solid`, this will be used as the solid color used in drawing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFill/properties/TextFill-color.md Edit}
    */
    color: vec4
    
    /**
    * Controls which drawing method is used. Can switch between `Texture` mode (for drawing using a tiled texture) or `Solid` mode (for drawing a solid color).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFill/properties/TextFill-mode.md Edit}
    */
    mode: TextFillMode
    
    /**
    * If `mode` is set to `TextFillMode.Texture`, this will be used as the texture asset used in drawing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFill/properties/TextFill-texture.md Edit}
    */
    texture: Texture
    
    /**
    * If `mode` is set to `TextFillMode.Texture`, this defines what type of stretching is used when the
    * Texture's aspect ratio doesn't match the drawing area's aspect ratio.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFill/properties/TextFill-textureStretch.md Edit}
    */
    textureStretch: StretchMode
    
    /**
    * If `mode` is set to `TextFillMode.Texture`, this defines how many times the texture will tile across its drawing zone.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFill/properties/TextFill-tileCount.md Edit}
    */
    tileCount: number
    
    /**
    * If `mode` is set to `TextFillMode.Texture`, this defines what area should be used for tiling the texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFill/properties/TextFill-tileZone.md Edit}
    */
    tileZone: TileZone
    
}

/**
* Used in [TextFill's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextFill) `mode` property. Controls which drawing method is used for the TextFill.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFillMode/TextFillMode-description.md Edit}
*/
declare enum TextFillMode {
    /**
    * Solid color will be used for drawing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFillMode/properties/TextFillMode-Solid.md Edit}
    */
    Solid,
    /**
    * Tiled texture will be used for drawing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextFillMode/properties/TextFillMode-Texture.md Edit}
    */
    Texture
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputModule/TextInputModule-description.md Edit}
*/
interface TextInputModule extends Asset {
}

/**
* Provides access to the device's input system. Accessible through `global.textInputSystem`. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem/TextInputSystem-description.md Edit}
*/
interface TextInputSystem extends ScriptObject {
    /**
    * Requests the client to hide the keyboard and clear any existing text in the inivisible text view.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem/methods/TextInputSystem-dismissKeyboard.md Edit}
    */
    dismissKeyboard(): void
    
    /**
    * Requests the client to pop up the keyboard with specific type and return key type, fill the inivisible text view with the initial text, and set the selected text range. When user starts editing the text, the new text string and the new selected range are returned to the lens by invoking the onTextChanged function.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem/methods/TextInputSystem-requestKeyboard.md Edit}
    */
    requestKeyboard(options: TextInputSystem.KeyboardOptions): void
    
    /**
    * Requests the client to set the editing ("cursor") position on the invisible text view.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem/methods/TextInputSystem-setEditingPosition.md Edit}
    */
    setEditingPosition(position: number): void
    
    /**
    * Requests the client to set the selected text range on the invisible text view.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem/methods/TextInputSystem-setSelectedTextRange.md Edit}
    */
    setSelectedTextRange(range: vec2): void
    
}

declare namespace TextInputSystem {
    /**
    * The settings used for how the input keyboard should work.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/TextInputSystem.KeyboardOptions-description.md Edit}
    */
    class KeyboardOptions {
        /**
        * The type of keyboard to be used for input.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/methods/TextInputSystem.KeyboardOptions-TextInputSystem.KeyboardOptions.md Edit}
        */
        constructor()
        
        /**
        * Sets whether a preview should be visible above the input keyboard.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-enablePreview.md Edit}
        */
        enablePreview: boolean
        
        /**
        * Initial selected text range to set on the inivisible text view.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-initialSelectedRange.md Edit}
        */
        initialSelectedRange: vec2
        
        /**
        * Initial text to fill into the invisible text view.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-initialText.md Edit}
        */
        initialText: string
        
        /**
        * Requested keyboard type.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-keyboardType.md Edit}
        */
        keyboardType: TextInputSystem.KeyboardType
        
        /**
        * Callback to be invoked when there is an error.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-onError.md Edit}
        */
        onError: (error: number, description: string) => void
        
        /**
        * Callback to be invoked when keyboard is shown or dismissed.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-onKeyboardStateChanged.md Edit}
        */
        onKeyboardStateChanged: (keyboardIsOpen: boolean) => void
        
        /**
        * Callback to be invoked when the user presses the return key.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-onReturnKeyPressed.md Edit}
        */
        onReturnKeyPressed: () => void
        
        /**
        * Callback to be invoked every time the user presses a (non-return) key.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-onTextChanged.md Edit}
        */
        onTextChanged: (text: string, range: vec2) => void
        
        /**
        * Requested return key type.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardOptions/properties/TextInputSystem.KeyboardOptions-returnKeyType.md Edit}
        */
        returnKeyType: TextInputSystem.ReturnKeyType
        
    }

}

declare namespace TextInputSystem {
    /**
    * The different input style of keyboard input.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardType/TextInputSystem.KeyboardType-description.md Edit}
    */
    enum KeyboardType {
        /**
        * A keyboard type for entering normal text
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardType/properties/TextInputSystem.KeyboardType-Text.md Edit}
        */
        Text,
        /**
        * A keyboard type for entering digits
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardType/properties/TextInputSystem.KeyboardType-Num.md Edit}
        */
        Num,
        /**
        * A keyboard type for entering phone numbers
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardType/properties/TextInputSystem.KeyboardType-Phone.md Edit}
        */
        Phone,
        /**
        * A keyboard type for entering URLs
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.KeyboardType/properties/TextInputSystem.KeyboardType-Url.md Edit}
        */
        Url
    }

}

declare namespace TextInputSystem {
    /**
    * The return key style of keyboard input.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.ReturnKeyType/TextInputSystem.ReturnKeyType-description.md Edit}
    */
    enum ReturnKeyType {
        /**
        * Return key label shows "Done"
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.ReturnKeyType/properties/TextInputSystem.ReturnKeyType-Done.md Edit}
        */
        Done,
        /**
        * Return key label shows "Go"
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.ReturnKeyType/properties/TextInputSystem.ReturnKeyType-Go.md Edit}
        */
        Go,
        /**
        * Return key label shows "Next"
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.ReturnKeyType/properties/TextInputSystem.ReturnKeyType-Next.md Edit}
        */
        Next,
        /**
        * Return key label shows "return"
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.ReturnKeyType/properties/TextInputSystem.ReturnKeyType-Return.md Edit}
        */
        Return,
        /**
        * Return key label shows "Search"
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.ReturnKeyType/properties/TextInputSystem.ReturnKeyType-Search.md Edit}
        */
        Search,
        /**
        * Return key label shows "Send"
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextInputSystem.ReturnKeyType/properties/TextInputSystem.ReturnKeyType-Send.md Edit}
        */
        Send
    }

}

/**
* Controls a text rendering texture. Can be accessed through the main rendering pass on a [Label](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#deprecated-label) component.
* The properties here mirror those on Label.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/TextProvider-description.md Edit}
*/
interface TextProvider extends TextureProvider {
    /**
    * The color used for dropShadow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-dropshadowColor.md Edit}
    
    * @deprecated
    
    * @private
    */
    dropshadowColor: vec2
    
    /**
    * The horizontal and vertical offset used for dropshadow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-dropshadowOffset.md Edit}
    
    * @deprecated
    
    * @private
    */
    dropshadowOffset: vec2
    
    /**
    * The font used for rendering text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-fontAsset.md Edit}
    */
    fontAsset: Font
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-fontName.md Edit}
    
    * @deprecated
    
    * @private
    */
    fontName: string
    
    /**
    * The color used for the outline effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-outlineColor.md Edit}
    */
    outlineColor: vec4
    
    /**
    * The strength of the outline effect.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-outlineSize.md Edit}
    */
    outlineSize: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-requirePowerOfTwo.md Edit}
    
    * @deprecated
    
    * @private
    */
    requirePowerOfTwo: boolean
    
    /**
    * The color used for dropshadow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-shadowColor.md Edit}
    */
    shadowColor: vec4
    
    /**
    * The horizontal and vertical offset used for dropshadow.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-shadowOffset.md Edit}
    */
    shadowOffset: vec2
    
    /**
    * The font size being used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-size.md Edit}
    */
    size: number
    
    /**
    * The text being rendered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-text.md Edit}
    */
    text: string
    
    /**
    * The color for rendering text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-textColor.md Edit}
    */
    textColor: vec4
    
    /**
    * If enabled, adds a dropshadow to the text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-useDropshadow.md Edit}
    */
    useDropshadow: boolean
    
    /**
    * If enabled, renders an outline around the text.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextProvider/properties/TextProvider-useOutline.md Edit}
    */
    useOutline: boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech/TextToSpeech-description.md Edit}
*/
interface TextToSpeech {
}

declare namespace TextToSpeech {
    /**
    * Provides the configuration for the [Text to Speech Module](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextToSpeechModule).   It is used to control the language of the generated voice, the voice’s style and pace.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.Options/TextToSpeech.Options-description.md Edit}
    */
    interface Options extends ScriptObject {
        /**
        * The speed which the text to speech engine will generate the text, the default is one hundred (100) which is Normal
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.Options/properties/TextToSpeech.Options-voicePace.md Edit}
        
        * @unreleased
        */
        voicePace: number
        
        /**
        * The style of the voice
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.Options/properties/TextToSpeech.Options-voiceStyle.md Edit}
        
        * @unreleased
        */
        voiceStyle: number
        
    }

}
declare namespace TextToSpeech {
    namespace Options {
        /**
        * Creates options for the [Text to Speech Module](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextToSpeechModule).
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.Options/methods/TextToSpeech.Options-create.md Edit}
        */
        export function create(): TextToSpeech.Options
        
    
    }

}

declare namespace TextToSpeech {
    /**
    * Provides a map of what phoneme is said at what time in the synthesized speech.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.PhonemeInfo/TextToSpeech.PhonemeInfo-description.md Edit}
    */
    interface PhonemeInfo extends ScriptObject {
        /**
        * Phoneme end time in milliseconds.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.PhonemeInfo/properties/TextToSpeech.PhonemeInfo-endTime.md Edit}
        
        * @readonly
        */
        endTime: number
        
        /**
        * Is the phonemes part of an abusive word.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.PhonemeInfo/properties/TextToSpeech.PhonemeInfo-isAbusive.md Edit}
        
        * @readonly
        */
        isAbusive: boolean
        
        /**
        * The phoneme found for the alloted time.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.PhonemeInfo/properties/TextToSpeech.PhonemeInfo-phoneme.md Edit}
        
        * @readonly
        */
        phoneme: string
        
        /**
        * Phoneme start time in milliseconds.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.PhonemeInfo/properties/TextToSpeech.PhonemeInfo-startTime.md Edit}
        
        * @readonly
        */
        startTime: number
        
    }

}

declare namespace TextToSpeech {
    /**
    * The voice style on which the TextToSpeech will be synthesized, Varying from neutral style, to a more elaborated styles depending on the voice. Note that Sam’s voice still doesn’t have more than the neutral style, this will be added throughout the coming releases.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceNames/TextToSpeech.VoiceNames-description.md Edit}
    */
    interface VoiceNames {
    }

}
declare namespace TextToSpeech {
    namespace VoiceNames {
        /**
        * Sam's voice
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceNames/properties/TextToSpeech.VoiceNames-Sam.md Edit}
        
        * @unreleased
        */
        let Sam: string
        
        /**
        * Sasha's voice
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceNames/properties/TextToSpeech.VoiceNames-Sasha.md Edit}
        
        * @unreleased
        */
        let Sasha: string
        
    
    }

}

declare namespace TextToSpeech {
    /**
    * The voice style on which the TextToSpeech will be synthesized, Varying from neutral style, to a more elaborated styles depending on the voice.
    * Note that Sam’s voice still don’t have more than the neutral style, this will be added throughout the coming releases.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/TextToSpeech.VoiceStyles-description.md Edit}
    
    * @unreleased
    */
    enum VoiceStyles {
        /**
        * The 1st style.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-One.md Edit}
        
        * @unreleased
        */
        One,
        /**
        * The 2nd style.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-Two.md Edit}
        
        * @unreleased
        */
        Two,
        /**
        * The 3rd style.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-Three.md Edit}
        
        * @unreleased
        */
        Three,
        /**
        * The 4th style
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-Four.md Edit}
        
        * @unreleased
        */
        Four,
        /**
        * The 5th style.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-Five.md Edit}
        
        * @unreleased
        */
        Five,
        /**
        * The 6th style.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-Six.md Edit}
        
        * @unreleased
        */
        Six,
        /**
        * The 7th style.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-Seven.md Edit}
        
        * @unreleased
        */
        Seven,
        /**
        * The 8th style.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-Eight.md Edit}
        
        * @unreleased
        */
        Eight,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.VoiceStyles/properties/TextToSpeech.VoiceStyles-Auto.md Edit}
        
        * @unreleased
        */
        Auto
    }

}

declare namespace TextToSpeech {
    /**
    * Parameter returned in the `onTTSCompleteHandler` callback providing timing details for word pronunciation. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.WordInfo/TextToSpeech.WordInfo-description.md Edit}
    */
    interface WordInfo extends ScriptObject {
        /**
        * The time in milliseconds when the word ended in the audio. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.WordInfo/properties/TextToSpeech.WordInfo-endTime.md Edit}
        
        * @readonly
        */
        endTime: number
        
        /**
        * The time in milliseconds when the word started in the audio. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.WordInfo/properties/TextToSpeech.WordInfo-startTime.md Edit}
        
        * @readonly
        */
        startTime: number
        
        /**
        * The words the synthesized audio was generated for (as text might be expanded during the synthesize process, there might be a slight variation between the input text and the words returned). 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeech.WordInfo/properties/TextToSpeech.WordInfo-word.md Edit}
        
        * @readonly
        */
        word: string
        
    }

}

/**
* Allows generation of speech from a given text. You can use only one `TextToSpeechModule` in a Lens. However, its methods can be called multiple times in parallel if needed. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeechModule/TextToSpeechModule-description.md Edit}
*/
interface TextToSpeechModule extends Asset {
    /**
    * Generates speech ([AudioTrackAsset](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#AudioTrackAsset)) of a given text. `Input` should be the text to synthesize (Currently supports text in English only. Non English characters will be stripped). `Options` should be a [TextToSpeechOptions](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#TextToSpeechOptions). `onTTsComplete` should be a callback function which will be called once the audio generation is completed. The callback will receive two parameters: the generated audio file ([AudioTrackAsset](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#AudioTrackAsset)) and maps of word/timing ([WordInfos](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#TextToSpeechWordInfo)). `onTTSError` should be a callback function which will be called if there is an error. This callback will receive a message of the error code and its description. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextToSpeechModule/methods/TextToSpeechModule-synthesize.md Edit}
    */
    synthesize(input: string, options: TextToSpeech.Options, onTTSComplete: (audioTrackAsset: AudioTrackAsset, wordInfo: TextToSpeech.WordInfo[], phonemeInfo: TextToSpeech.PhonemeInfo[], voiceStyle: TextToSpeech.VoiceStyles) => void, onTTSError: (error: number, description: string) => void): void
    
}

/**
* Represents a texture file asset.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/Texture-description.md Edit}
*/
interface Texture extends Asset {
    /**
    * Returns a Texture that captures the current state of this Texture Asset.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-copyFrame.md Edit}
    */
    copyFrame(): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-copyFrameToFile.md Edit}
    
    * @deprecated
    
    * @private
    */
    copyFrameToFile(): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-copyFrameToFileAsync.md Edit}
    
    * @deprecated
    
    * @private
    */
    copyFrameToFileAsync(onSuccess: (texture: Texture) => void, onFailure: () => void): void
    
    /**
    * Creates a marker asset from the texture. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-createMarkerAsset.md Edit}
    */
    createMarkerAsset(): MarkerAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-destroy.md Edit}
    
    * @private
    */
    destroy(): void
    
    /**
    * Returns the Colorspace of the Texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-getColorspace.md Edit}
    */
    getColorspace(): Colorspace
    
    /**
    * Returns the height of the texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-getHeight.md Edit}
    */
    getHeight(): number
    
    /**
    * Returns the width of the texture.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-getWidth.md Edit}
    */
    getWidth(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-saveFrameToFile.md Edit}
    
    * @private
    */
    saveFrameToFile(onSuccess: (texture: Texture) => void, onFailure: () => void, compressionQuality: CompressionQuality, includeAlpha: boolean): void
    
    /**
    * The TextureProvider for the texture, which may control things like animation depending on the texture type.
    * See also: [AnimatedTextureFileProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Providers#AnimatedTextureFileProvider).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/properties/Texture-control.md Edit}
    */
    control: TextureProvider
    
}
declare namespace Texture {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-createProcedural.md Edit}
    
    * @deprecated
    
    * @private
    */
    export function createProcedural(width: number, height: number, colorspace: Colorspace): Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-texture2DArraySupported.md Edit}
    
    * @private
    */
    export function texture2DArraySupported(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-texture3DSupported.md Edit}
    
    * @private
    */
    export function texture3DSupported(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Texture/methods/Texture-textureHalfFloatingSupported.md Edit}
    
    * @private
    */
    export function textureHalfFloatingSupported(): boolean
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureFormat/TextureFormat-description.md Edit}

* @private
*/
interface TextureFormat {
}
declare namespace TextureFormat {
    /**
    * A four-component, 32-bit packed unsigned integer format that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureFormat/properties/TextureFormat-R10G10B10A2_UINT.md Edit}
    
    * @private
    */
    let R10G10B10A2_UINT: Colorspace
    
    /**
    * A four-component, 32-bit packed unsigned normalized format that has a 2-bit A component in bits 30..31, a 10-bit B component in bits 20..29, a 10-bit G component in bits 10..19, and a 10-bit R component in bits 0..9.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureFormat/properties/TextureFormat-R10G10B10A2_UNORM.md Edit}
    
    * @private
    */
    let R10G10B10A2_UNORM: Colorspace
    
    /**
    * A four-component, 64-bit signed integer format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5, and a 16-bit A component in bytes 6..7.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureFormat/properties/TextureFormat-R16G16B16A16_INT.md Edit}
    
    * @private
    */
    let R16G16B16A16_INT: Colorspace
    
    /**
    * A four-component, 64-bit unsigned integer format that has a 16-bit R component in bytes 0..1, a 16-bit G component in bytes 2..3, a 16-bit B component in bytes 4..5, and a 16-bit A component in bytes 6..7.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureFormat/properties/TextureFormat-R16G16B16A16_UINT.md Edit}
    
    * @private
    */
    let R16G16B16A16_UINT: Colorspace
    
    /**
    * A four-component, 128-bit signed integer format that has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11, and a 32-bit A component in bytes 12..15.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureFormat/properties/TextureFormat-R32G32B32A32_INT.md Edit}
    
    * @private
    */
    let R32G32B32A32_INT: Colorspace
    
    /**
    * A four-component, 128-bit unsigned integer format that has a 32-bit R component in bytes 0..3, a 32-bit G component in bytes 4..7, a 32-bit B component in bytes 8..11, and a 32-bit A component in bytes 12..15.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureFormat/properties/TextureFormat-R32G32B32A32_UINT.md Edit}
    
    * @private
    */
    let R32G32B32A32_UINT: Colorspace
    
    /**
    * A four-component, 32-bit unsigned normalized format that has an 8-bit R component in byte 0, an 8-bit G component in byte 1, an 8-bit B component in byte 2, and an 8-bit A component in byte 3.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureFormat/properties/TextureFormat-R8G8B8A8_UNORM.md Edit}
    
    * @private
    */
    let R8G8B8A8_UNORM: Colorspace
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureMeshBuilder/TextureMeshBuilder-description.md Edit}

* @private
*/
interface TextureMeshBuilder extends ExtrudedMeshBuilder {
}
declare namespace TextureMeshBuilder {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureMeshBuilder/methods/TextureMeshBuilder-createMeshBuilder.md Edit}
    
    * @private
    */
    export function createMeshBuilder(texture: Texture): TextureMeshBuilder
    

}

/**
* The base class for specialized Texture providers. Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureProvider/TextureProvider-description.md Edit}
*/
interface TextureProvider extends Provider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureProvider/methods/TextureProvider-getArrayCount.md Edit}
    
    * @private
    */
    getArrayCount(): number
    
    /**
    * Returns the texture's aspect ratio, which is calculated as width / height.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureProvider/methods/TextureProvider-getAspect.md Edit}
    */
    getAspect(): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureProvider/methods/TextureProvider-getDepth.md Edit}
    
    * @private
    */
    getDepth(): number
    
    /**
    * Returns the height of the texture in pixels.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureProvider/methods/TextureProvider-getHeight.md Edit}
    */
    getHeight(): number
    
    /**
    * Returns the width of the texture in pixels.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureProvider/methods/TextureProvider-getWidth.md Edit}
    */
    getWidth(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureStretchMode/TextureStretchMode-description.md Edit}

* @deprecated
*/
declare enum TextureStretchMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureStretchMode/properties/TextureStretchMode-Fit.md Edit}
    */
    Fit,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureStretchMode/properties/TextureStretchMode-Fill.md Edit}
    */
    Fill,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureStretchMode/properties/TextureStretchMode-Stretch.md Edit}
    */
    Stretch,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureStretchMode/properties/TextureStretchMode-FitHeight.md Edit}
    */
    FitHeight,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TextureStretchMode/properties/TextureStretchMode-FitWidth.md Edit}
    */
    FitWidth
}

/**
* Defines the bounding area used for texture tiling with [TextFill's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextFill) `tileZone` property.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TileZone/TileZone-description.md Edit}
*/
declare enum TileZone {
    /**
    * The attached [ScreenTransform's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) bounding rectangle is used for texture tiling
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TileZone/properties/TileZone-Rect.md Edit}
    */
    Rect,
    /**
    * The Text component's drawn area (extents) is used for texture tiling
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TileZone/properties/TileZone-Extents.md Edit}
    */
    Extents,
    /**
    * Each character uses its own drawn area for texture tiling
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TileZone/properties/TileZone-Character.md Edit}
    */
    Character,
    /**
    * The position of each character in screen space is used for tiling
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TileZone/properties/TileZone-Screen.md Edit}
    */
    Screen
}

/**
* This provider is returned by `global.touchSystem` and allows your lens to handle any touches on the screen, and optionally let certain touch types to pass through (let Snapchat handle the touch).

* Possible TouchType exception values:

* "TouchTypeNone"
* "TouchTypeTouch"
* "TouchTypeTap"
* "TouchTypeDoubleTap"
* "TouchTypeScale"
* "TouchTypePan"
* "TouchTypeSwipe"

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchDataProvider/TouchDataProvider-description.md Edit}
*/
interface TouchDataProvider extends ScriptObject {
    /**
    * Returns a copy of `currentMask` with the `newException` flag set to true.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchDataProvider/methods/TouchDataProvider-composeTouchBlockingExceptionMask.md Edit}
    */
    composeTouchBlockingExceptionMask(currentMask: number, newException: string): number
    
    /**
    * Allow or stop allowing a certain `TouchType` to pass through your lens. Useful for allowing Snapchat to handle certain `TouchType`, e.g. allowing `TouchTypeDoubleTap` to flip the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchDataProvider/methods/TouchDataProvider-enableTouchBlockingException.md Edit}
    */
    enableTouchBlockingException(exception: string, enable: boolean): void
    
    /**
    * Set your lens to handle touches on the screen, preventing default Snapchat touch behavior from occuring. Useful for enabling full screen touches without any touch components. It is similar to creating a plane the size of the screen in front of the camera.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchDataProvider/properties/TouchDataProvider-touchBlocking.md Edit}
    */
    touchBlocking: boolean
    
    /**
    * The current touch mask.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchDataProvider/properties/TouchDataProvider-touchBlockingExceptionMask.md Edit}
    */
    touchBlockingExceptionMask: number
    
}

/**
* Triggered when a touch event ends.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchEndEvent/TouchEndEvent-description.md Edit}
*/
interface TouchEndEvent extends SceneObjectEvent {
    /**
    * Returns the ID of this specific touch. Useful for distinguishing between touches when multiple are occurring simultaneously.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchEndEvent/methods/TouchEndEvent-getTouchId.md Edit}
    */
    getTouchId(): number
    
    /**
    * Returns the normalized 2D screen position of the users touch.
    * The normalized coordinates range from ([0-1], [0-1]), (0,0) being top-left and (1,1) being bottom-right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchEndEvent/methods/TouchEndEvent-getTouchPosition.md Edit}
    */
    getTouchPosition(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchEndEvent/methods/TouchEndEvent-isCancelled.md Edit}
    
    * @private
    */
    isCancelled(): boolean
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchEndEventArgs/TouchEndEventArgs-description.md Edit}
*/
interface TouchEndEventArgs extends ScriptObject {
    /**
    * Indicates if the TouchEndEvent was caused by interrupting the touch by Snapchat UI or an upper Lens.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchEndEventArgs/properties/TouchEndEventArgs-isCancelled.md Edit}
    
    * @readonly
    
    * @private
    */
    isCancelled: boolean
    
    /**
    * The position of the touch on the screen. [0,0] being top left, and [1,1] being bottom right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchEndEventArgs/properties/TouchEndEventArgs-position.md Edit}
    
    * @readonly
    */
    position: vec2
    
    /**
    * Returns the ID of this specific touch. Useful for distinguishing between touches when multiple are occurring simultaneously.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchEndEventArgs/properties/TouchEndEventArgs-touchId.md Edit}
    
    * @readonly
    */
    touchId: number
    
}

/**
* Triggered when a touch position on the screen is moved.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEvent/TouchMoveEvent-description.md Edit}
*/
interface TouchMoveEvent extends SceneObjectEvent {
    /**
    * Returns the ID of this specific touch. Useful for distinguishing between touches when multiple are occurring simultaneously.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEvent/methods/TouchMoveEvent-getTouchId.md Edit}
    */
    getTouchId(): number
    
    /**
    * Returns the normalized 2D screen position of the users touch.
    * The normalized coordinates range from ([0-1], [0-1]), (0,0) being top-left and (1,1) being bottom-right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEvent/methods/TouchMoveEvent-getTouchPosition.md Edit}
    */
    getTouchPosition(): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEvent/properties/TouchMoveEvent-updateLimit.md Edit}
    
    * @private
    */
    updateLimit: TouchMoveEvent.UpdateLimit
    
}

declare namespace TouchMoveEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEvent.UpdateLimit/TouchMoveEvent.UpdateLimit-description.md Edit}
    
    * @private
    */
    enum UpdateLimit {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEvent.UpdateLimit/properties/TouchMoveEvent.UpdateLimit-NoLimit.md Edit}
        
        * @private
        */
        NoLimit,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEvent.UpdateLimit/properties/TouchMoveEvent.UpdateLimit-OnePointPerFrame.md Edit}
        
        * @private
        */
        OnePointPerFrame,
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEvent.UpdateLimit/properties/TouchMoveEvent.UpdateLimit-TwoPointsPerFrame.md Edit}
        
        * @private
        */
        TwoPointsPerFrame
    }

}

/**
* Arguments used with the `InteractionComponent.onTouchMove` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEventArgs/TouchMoveEventArgs-description.md Edit}
*/
interface TouchMoveEventArgs extends ScriptObject {
    /**
    * The position of the touch on the screen. [0,0] being top left, and [1,1] being bottom right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEventArgs/properties/TouchMoveEventArgs-position.md Edit}
    
    * @readonly
    */
    position: vec2
    
    /**
    * Returns the ID of this specific touch. Useful for distinguishing between touches when multiple are occurring simultaneously.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchMoveEventArgs/properties/TouchMoveEventArgs-touchId.md Edit}
    
    * @readonly
    */
    touchId: number
    
}

/**
* Triggered when a touch event starts.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchStartEvent/TouchStartEvent-description.md Edit}
*/
interface TouchStartEvent extends SceneObjectEvent {
    /**
    * Returns the ID of this specific touch. Useful for distinguishing between touches when multiple are occurring simultaneously.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchStartEvent/methods/TouchStartEvent-getTouchId.md Edit}
    */
    getTouchId(): number
    
    /**
    * Returns the normalized 2D screen position of the users touch.
    * The normalized coordinates range from ([0-1], [0-1]), (0,0) being top-left and (1,1) being bottom-right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchStartEvent/methods/TouchStartEvent-getTouchPosition.md Edit}
    */
    getTouchPosition(): vec2
    
}

/**
* Arguments used with the `InteractionComponent.onTouchStart` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchStartEventArgs/TouchStartEventArgs-description.md Edit}
*/
interface TouchStartEventArgs extends ScriptObject {
    /**
    * The position of the touch on the screen. [0,0] being top left, and [1,1] being bottom right.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchStartEventArgs/properties/TouchStartEventArgs-position.md Edit}
    
    * @readonly
    */
    position: vec2
    
    /**
    * Returns the ID of this specific touch. Useful for distinguishing between touches when multiple are occurring simultaneously.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TouchStartEventArgs/properties/TouchStartEventArgs-touchId.md Edit}
    
    * @readonly
    */
    touchId: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Trace/Trace-description.md Edit}

* @private
*/
interface Trace {
}
declare namespace Trace {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Trace/methods/Trace-event.md Edit}
    
    * @private
    */
    export function event(sliceName: string, functionToMeasure: () => void): void
    

}

/**
* Represents a mesh generated by world tracking. Only available when world mesh tracking is supported and enabled.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMesh/TrackedMesh-description.md Edit}
*/
interface TrackedMesh extends ScriptObject {
    /**
    * Returns whether the tracked mesh is valid.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMesh/properties/TrackedMesh-isValid.md Edit}
    
    * @readonly
    */
    isValid: boolean
    
    /**
    * Returns the World Transformation matrix of the detected mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMesh/properties/TrackedMesh-transform.md Edit}
    
    * @readonly
    */
    transform: mat4
    
}

/**
* Classifications of mesh face. See [TrackedMeshHitTestResult](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#TrackedMeshHitTestResult).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/TrackedMeshFaceClassification-description.md Edit}
*/
declare enum TrackedMeshFaceClassification {
    /**
    * None
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/properties/TrackedMeshFaceClassification-None.md Edit}
    */
    None,
    /**
    * Wall
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/properties/TrackedMeshFaceClassification-Wall.md Edit}
    */
    Wall,
    /**
    * Floor
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/properties/TrackedMeshFaceClassification-Floor.md Edit}
    */
    Floor,
    /**
    * Ceiling
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/properties/TrackedMeshFaceClassification-Ceiling.md Edit}
    */
    Ceiling,
    /**
    * Table
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/properties/TrackedMeshFaceClassification-Table.md Edit}
    */
    Table,
    /**
    * Seat
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/properties/TrackedMeshFaceClassification-Seat.md Edit}
    */
    Seat,
    /**
    * Window
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/properties/TrackedMeshFaceClassification-Window.md Edit}
    */
    Window,
    /**
    * Door
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshFaceClassification/properties/TrackedMeshFaceClassification-Door.md Edit}
    */
    Door
}

/**
* Provides histogram information about tracked world mesh faces in a given area. Returned by `DeviceTracking.calculateWorldMeshHistogram()`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshHistogramResult/TrackedMeshHistogramResult-description.md Edit}
*/
interface TrackedMeshHistogramResult extends ScriptObject {
    /**
    * Average normal direction, in world space, of the mesh faces.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshHistogramResult/properties/TrackedMeshHistogramResult-avgNormal.md Edit}
    
    * @readonly
    */
    avgNormal: vec3
    
    /**
    * Array of relative proportions for each classification, in the order described below. The values all add up to a total of 1.0.
    
    * The classification value order is:
    * 0: None
    * 1: Wall
    * 2: Floor
    * 3: Ceiling
    * 4: Table
    * 5: Seat
    * 6: Window
    * 7: Door
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshHistogramResult/properties/TrackedMeshHistogramResult-histogram.md Edit}
    
    * @readonly
    */
    histogram: number[]
    
}

/**
* Provides information about a TrackedMesh surface hit during a raycast. Is returned in an array when calling `DeviceTracking.hitTestWorldMesh()` or `DeviceTracking.raycastWorldMesh()`.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshHitTestResult/TrackedMeshHitTestResult-description.md Edit}
*/
interface TrackedMeshHitTestResult extends ScriptObject {
    /**
    * Returns the classification of the mesh face at the intersection point. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshHitTestResult/properties/TrackedMeshHitTestResult-classification.md Edit}
    
    * @readonly
    */
    classification: TrackedMeshFaceClassification
    
    /**
    * Returns the TrackedMesh that was hit.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshHitTestResult/properties/TrackedMeshHitTestResult-mesh.md Edit}
    
    * @readonly
    */
    mesh: TrackedMesh
    
    /**
    * Returns the world space normal direction of the intersection point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshHitTestResult/properties/TrackedMeshHitTestResult-normal.md Edit}
    
    * @readonly
    */
    normal: vec3
    
    /**
    * Returns the world space position of the intersection point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedMeshHitTestResult/properties/TrackedMeshHitTestResult-position.md Edit}
    
    * @readonly
    */
    position: vec3
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/TrackedObject-description.md Edit}

* @unreleased
*/
interface TrackedObject extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/methods/TrackedObject-fillMask.md Edit}
    
    * @private
    */
    fillMask(maskBuffer: Uint8Array): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/methods/TrackedObject-getEventConfidence.md Edit}
    
    * @private
    */
    getEventConfidence(eventLabel: string): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/methods/TrackedObject-getLandmark.md Edit}
    
    * @unreleased
    */
    getLandmark(landmarkKey: string): vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/methods/TrackedObject-getMaskValue.md Edit}
    
    * @private
    */
    getMaskValue(x: number, y: number): number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/methods/TrackedObject-getRootRelative3dLandmark.md Edit}
    
    * @unreleased
    */
    getRootRelative3dLandmark(rootRelative3dLandmarkKey: string): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/methods/TrackedObject-getRotationVector.md Edit}
    
    * @private
    */
    getRotationVector(rotationVectorKey: string): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/methods/TrackedObject-getWorldLandmark3d.md Edit}
    
    * @private
    */
    getWorldLandmark3d(landmarkKey: string): vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/methods/TrackedObject-isTracking.md Edit}
    
    * @private
    */
    isTracking(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-boundingBoxCenter.md Edit}
    
    * @readonly
    
    * @private
    */
    boundingBoxCenter: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-boundingBoxDepth.md Edit}
    
    * @readonly
    
    * @private
    */
    boundingBoxDepth: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-boundingBoxRotation.md Edit}
    
    * @readonly
    
    * @private
    */
    boundingBoxRotation: quat
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-boundingBoxScale.md Edit}
    
    * @readonly
    
    * @private
    */
    boundingBoxScale: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-boundingBoxSize.md Edit}
    
    * @readonly
    
    * @private
    */
    boundingBoxSize: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-id.md Edit}
    
    * @unreleased
    
    * @readonly
    */
    id: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-isMaskAvailable.md Edit}
    
    * @readonly
    
    * @private
    */
    isMaskAvailable: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-isWorldLandmark3dAvailable.md Edit}
    
    * @readonly
    
    * @private
    */
    isWorldLandmark3dAvailable: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-label.md Edit}
    
    * @readonly
    
    * @private
    */
    label: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-maskPositionCenter.md Edit}
    
    * @readonly
    
    * @private
    */
    maskPositionCenter: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-maskPositionSize.md Edit}
    
    * @readonly
    
    * @private
    */
    maskPositionSize: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-maskSize.md Edit}
    
    * @readonly
    
    * @private
    */
    maskSize: vec2
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-normalsMap.md Edit}
    
    * @readonly
    
    * @private
    */
    normalsMap: Uint8Array
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedObject/properties/TrackedObject-objectSpecificData.md Edit}
    
    * @readonly
    
    * @private
    */
    objectSpecificData: ObjectSpecificData
    
}

/**
* A representation for plane detected by native tracking. Can be used with TrackedPoint.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlane/TrackedPlane-description.md Edit}
*/
interface TrackedPlane extends ScriptObject {
    /**
    * Whether the detected plane is still available to utilize
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlane/properties/TrackedPlane-isValid.md Edit}
    
    * @readonly
    */
    isValid: boolean
    
    /**
    * A coarse mesh describing the shape of the tracked plane. Can be displayed by RenderMeshVisual
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlane/properties/TrackedPlane-mesh.md Edit}
    
    * @readonly
    */
    mesh: RenderMesh
    
    /**
    * Returns the orientation of the detected plane, either vertical or horizontal.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlane/properties/TrackedPlane-orientation.md Edit}
    
    * @readonly
    */
    orientation: TrackedPlaneOrientation
    
    /**
    * The center point of the detected plane
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlane/properties/TrackedPlane-pivot.md Edit}
    
    * @readonly
    */
    pivot: vec3
    
    /**
    * The size of the detected plane, where it is described as width, 0, depth
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlane/properties/TrackedPlane-size.md Edit}
    
    * @readonly
    */
    size: vec3
    
    /**
    * The position, rotation, and scale of the detected plane
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlane/properties/TrackedPlane-transform.md Edit}
    
    * @readonly
    */
    transform: mat4
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlaneHitTestResult/TrackedPlaneHitTestResult-description.md Edit}

* @unreleased
*/
interface TrackedPlaneHitTestResult extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlaneHitTestResult/properties/TrackedPlaneHitTestResult-plane.md Edit}
    
    * @readonly
    */
    plane: TrackedPlane
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlaneHitTestResult/properties/TrackedPlaneHitTestResult-position.md Edit}
    
    * @readonly
    */
    position: vec3
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlaneOrientation/TrackedPlaneOrientation-description.md Edit}
*/
declare enum TrackedPlaneOrientation {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlaneOrientation/properties/TrackedPlaneOrientation-Horizontal.md Edit}
    */
    Horizontal,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPlaneOrientation/properties/TrackedPlaneOrientation-Vertical.md Edit}
    */
    Vertical
}

/**
* A point on the real world not attached to any detected plane.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPoint/TrackedPoint-description.md Edit}
*/
interface TrackedPoint extends ScriptObject {
    /**
    * Provides the orientation of the tracked point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPoint/properties/TrackedPoint-orientation.md Edit}
    
    * @readonly
    */
    orientation: quat
    
    /**
    * Provides the world position of the tracked point.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPoint/properties/TrackedPoint-position.md Edit}
    
    * @readonly
    */
    position: vec3
    
}

/**
* Allows you to bind the position and rotation of an object with this component to a [TrackedPoint](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#TrackedPoint).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPointComponent/TrackedPointComponent-description.md Edit}
*/
interface TrackedPointComponent extends Component {
    /**
    * Returns whether the trackedPoint is valid.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPointComponent/properties/TrackedPointComponent-isValid.md Edit}
    
    * @readonly
    */
    isValid: boolean
    
    /**
    * The [TrackedPoint](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#TrackedPoint/) which this component will copy the position and rotation from.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackedPointComponent/properties/TrackedPointComponent-trackedPoint.md Edit}
    */
    trackedPoint: TrackedPoint
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackerMode/TrackerMode-description.md Edit}

* @deprecated

* @private
*/
declare enum TrackerMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackerMode/properties/TrackerMode-Global.md Edit}
    
    * @deprecated
    
    * @private
    */
    Global,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackerMode/properties/TrackerMode-GlobalOnly.md Edit}
    
    * @deprecated
    
    * @private
    */
    GlobalOnly,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackerMode/properties/TrackerMode-Local.md Edit}
    
    * @deprecated
    
    * @private
    */
    Local
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackerType/TrackerType-description.md Edit}

* @deprecated

* @private
*/
declare enum TrackerType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackerType/properties/TrackerType-Global.md Edit}
    
    * @deprecated
    
    * @private
    */
    Global,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackerType/properties/TrackerType-GlobalOnly.md Edit}
    
    * @deprecated
    
    * @private
    */
    GlobalOnly,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackerType/properties/TrackerType-Local.md Edit}
    
    * @deprecated
    
    * @private
    */
    Local
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackingMode/TrackingMode-description.md Edit}

* @private
*/
declare enum TrackingMode {
    /**
    * Tracks ground plane
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackingMode/properties/TrackingMode-Ground.md Edit}
    
    * @private
    */
    Ground,
    /**
    * Tracks planes perpendicular to ground
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackingMode/properties/TrackingMode-Wall.md Edit}
    
    * @private
    */
    Wall,
    /**
    * Tracks everything and gives 6 degrees of freedom pose
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackingMode/properties/TrackingMode-SixDof.md Edit}
    
    * @private
    */
    SixDof,
    /**
    * Tracks orientation
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackingMode/properties/TrackingMode-ThreeDof.md Edit}
    
    * @private
    */
    ThreeDof,
    /**
    * Not tracking anything
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackingMode/properties/TrackingMode-NoTracking.md Edit}
    
    * @private
    */
    NoTracking
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TrackingScopeAsset/TrackingScopeAsset-description.md Edit}

* @private
*/
interface TrackingScopeAsset extends Asset {
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TranscriptionErrorEventArgs/TranscriptionErrorEventArgs-description.md Edit}

* @private
*/
interface TranscriptionErrorEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TranscriptionErrorEventArgs/properties/TranscriptionErrorEventArgs-description.md Edit}
    
    * @readonly
    
    * @private
    */
    description: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TranscriptionErrorEventArgs/properties/TranscriptionErrorEventArgs-error.md Edit}
    
    * @readonly
    
    * @private
    */
    error: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TranscriptionUpdateEventArgs/TranscriptionUpdateEventArgs-description.md Edit}

* @private
*/
interface TranscriptionUpdateEventArgs extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TranscriptionUpdateEventArgs/properties/TranscriptionUpdateEventArgs-isFinalTranscription.md Edit}
    
    * @readonly
    
    * @private
    */
    isFinalTranscription: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TranscriptionUpdateEventArgs/properties/TranscriptionUpdateEventArgs-transcription.md Edit}
    
    * @readonly
    
    * @private
    */
    transcription: string
    
}

/**
* Controls the position, rotation, and scale of a [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject).  Every SceneObject automatically has a Transform attached.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/Transform-description.md Edit}
*/
interface Transform extends ScriptObject {
    /**
    * Returns the Transform's world-to-local transformation matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getInvertedWorldTransform.md Edit}
    */
    getInvertedWorldTransform(): mat4
    
    /**
    * Returns the Transform's position relative to its parent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getLocalPosition.md Edit}
    */
    getLocalPosition(): vec3
    
    /**
    * Returns the Transform's rotation relative to its parent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getLocalRotation.md Edit}
    */
    getLocalRotation(): quat
    
    /**
    * Returns the Transform's scale relative to its parent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getLocalScale.md Edit}
    */
    getLocalScale(): vec3
    
    /**
    * Returns the SceneObject the Transform is attached to.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getSceneObject.md Edit}
    */
    getSceneObject(): SceneObject
    
    /**
    * Returns the Transform's position relative to the world.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getWorldPosition.md Edit}
    */
    getWorldPosition(): vec3
    
    /**
    * Returns the Transform's rotation relative to the world.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getWorldRotation.md Edit}
    */
    getWorldRotation(): quat
    
    /**
    * Returns the Transform's scale relative to the world.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getWorldScale.md Edit}
    */
    getWorldScale(): vec3
    
    /**
    * Returns the Transform's local-to-world transformation matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-getWorldTransform.md Edit}
    */
    getWorldTransform(): mat4
    
    /**
    * Sets the Transform's position relative to its parent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-setLocalPosition.md Edit}
    */
    setLocalPosition(pos: vec3): void
    
    /**
    * Sets the Transform's rotation relative to its parent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-setLocalRotation.md Edit}
    */
    setLocalRotation(rotation: quat): void
    
    /**
    * Sets the Transform's scale relative to its parent.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-setLocalScale.md Edit}
    */
    setLocalScale(scale: vec3): void
    
    /**
    * Sets the Transform's local transformation matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-setLocalTransform.md Edit}
    */
    setLocalTransform(transformMat: mat4): void
    
    /**
    * Sets the Transform's position relative to the world.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-setWorldPosition.md Edit}
    */
    setWorldPosition(pos: vec3): void
    
    /**
    * Sets the Transform's rotation relative to the world.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-setWorldRotation.md Edit}
    */
    setWorldRotation(rotation: quat): void
    
    /**
    * Sets the Transform's scale relative to the world.
    * This may produce lossy results when parent objects are rotated, so use `setLocalScale()` instead if possible.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-setWorldScale.md Edit}
    */
    setWorldScale(scale: vec3): void
    
    /**
    * Sets the Transform's transformation matrix.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/methods/Transform-setWorldTransform.md Edit}
    */
    setWorldTransform(transformMat: mat4): void
    
    /**
    * Returns the Transform's back directional vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/properties/Transform-back.md Edit}
    
    * @readonly
    */
    back: vec3
    
    /**
    * Returns the Transform's down directional vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/properties/Transform-down.md Edit}
    
    * @readonly
    */
    down: vec3
    
    /**
    * Returns the Transform's forward directional vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/properties/Transform-forward.md Edit}
    
    * @readonly
    */
    forward: vec3
    
    /**
    * Returns the Transform's left directional vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/properties/Transform-left.md Edit}
    
    * @readonly
    */
    left: vec3
    
    /**
    * Returns the Transform's right directional vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/properties/Transform-right.md Edit}
    
    * @readonly
    */
    right: vec3
    
    /**
    * When scaling a parent with segment scale enabled, instead of scaling child objects, it creates position offsets. This setting is used when exporting from certain 3d authoring tools.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/properties/Transform-segmentScaleCompensate.md Edit}
    */
    segmentScaleCompensate: boolean
    
    /**
    * Returns the Transform's up directional vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transform/properties/Transform-up.md Edit}
    
    * @readonly
    */
    up: vec3
    
}

/**
* Applies additional transform processing on data for InputPlaceholders and OutputPlaceholders used with MLComponent.
* For more information, see the [MLComponent Overview](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/ml-component-overview).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transformer/Transformer-description.md Edit}
*/
interface Transformer extends ScriptObject {
    /**
    * Inverse transformation matrix of this Transformer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transformer/properties/Transformer-inverseMatrix.md Edit}
    
    * @readonly
    */
    inverseMatrix: mat3
    
    /**
    * Transformation matrix of this Transformer.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Transformer/properties/Transformer-matrix.md Edit}
    
    * @readonly
    */
    matrix: mat3
    
}

/**
* Builds Transformer objects for MLComponent.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/TransformerBuilder-description.md Edit}
*/
interface TransformerBuilder extends ScriptObject {
    /**
    * Builds and returns a Transformer object based on the current settings.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-build.md Edit}
    */
    build(): Transformer
    
    /**
    * Sets the fill value used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setFillColor.md Edit}
    */
    setFillColor(color: vec4): TransformerBuilder
    
    /**
    * Enables or disables horizontal flipping.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setFlipX.md Edit}
    */
    setFlipX(value: boolean): TransformerBuilder
    
    /**
    * Enables or disables vertical flipping.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setFlipY.md Edit}
    */
    setFlipY(value: boolean): TransformerBuilder
    
    /**
    * Sets the horizontal alignment type used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setHorizontalAlignment.md Edit}
    */
    setHorizontalAlignment(mode: HorizontalAlignment): TransformerBuilder
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setMipBias.md Edit}
    
    * @deprecated
    
    * @private
    */
    setMipBias(bias: number): TransformerBuilder
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setResamplingQuality.md Edit}
    
    * @deprecated
    
    * @private
    */
    setResamplingQuality(quality: ResamplingQuality): TransformerBuilder
    
    /**
    * Sets the rotation type used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setRotation.md Edit}
    */
    setRotation(mode: TransformerRotation): TransformerBuilder
    
    /**
    * Sets the stretching type used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setStretch.md Edit}
    */
    setStretch(value: boolean): TransformerBuilder
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setUseMipmaps.md Edit}
    
    * @deprecated
    
    * @private
    */
    setUseMipmaps(value: boolean): TransformerBuilder
    
    /**
    * Sets the vertical alignment type used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerBuilder/methods/TransformerBuilder-setVerticalAlignment.md Edit}
    */
    setVerticalAlignment(mode: VerticalAlignment): TransformerBuilder
    
}

/**
* Rotation types used by TransformBuilder.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerRotation/TransformerRotation-description.md Edit}
*/
declare enum TransformerRotation {
    /**
    * No rotation
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerRotation/properties/TransformerRotation-None.md Edit}
    */
    None,
    /**
    * Rotates by 90 degrees
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerRotation/properties/TransformerRotation-Rotate90.md Edit}
    */
    Rotate90,
    /**
    * Rotates by 180 degrees
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerRotation/properties/TransformerRotation-Rotate180.md Edit}
    */
    Rotate180,
    /**
    * Rotates by 270 degrees
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TransformerRotation/properties/TransformerRotation-Rotate270.md Edit}
    */
    Rotate270
}

/**
* Triangle hit information, available when a ray cast intersects a collision mesh.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriangleHit/TriangleHit-description.md Edit}
*/
interface TriangleHit extends ScriptObject {
    /**
    * Barycentric coordinate of the hit on the triangle. This is used to interpolate values over the triangle surface. Essentially, these are weights for each of the 3 triangle vertices. For example, you can compute the hit position from vertex positions as: (V0\*b0 + V1\*b1 + V2\*b2). We already have the hit position in RayCastHit, but 'V' can be any interpolated value, such as color or texture coordinate.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriangleHit/properties/TriangleHit-barycentricCoordinate.md Edit}
    
    * @readonly
    */
    barycentricCoordinate: vec3
    
    /**
    * Index of the triangle in the mesh. Note, this is the index of the triangle in the collision mesh, which won't necessarily correspond to the same index on the render mesh (depending on type and bake settings).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriangleHit/properties/TriangleHit-index.md Edit}
    
    * @readonly
    */
    index: number
    
    /**
    * Collision mesh containing the triangle.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriangleHit/properties/TriangleHit-mesh.md Edit}
    
    * @readonly
    */
    mesh: CollisionMesh
    
    /**
    * Vertex indices in the mesh. Note, these are the indices of the vertices in the collision mesh, which won't necessarily correspond to the same indices in the render mesh (depending on type and bake settings).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriangleHit/properties/TriangleHit-vertexIndices.md Edit}
    
    * @readonly
    */
    vertexIndices: number[]
    
    /**
    * World-space vertex positions.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriangleHit/properties/TriangleHit-vertexPositions.md Edit}
    
    * @readonly
    */
    vertexPositions: vec3[]
    
}

/**
* Gets called when the user triggers the primary input on their device. For example touch on touch screens.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriggerPrimaryEvent/TriggerPrimaryEvent-description.md Edit}
*/
interface TriggerPrimaryEvent extends SceneObjectEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriggerPrimaryEvent/properties/TriggerPrimaryEvent-position.md Edit}
    
    * @readonly
    */
    position: vec2
    
}

/**
* Arguments used with the `InteractionComponent.onTriggerPrimary` event.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TriggerPrimaryEventArgs/TriggerPrimaryEventArgs-description.md Edit}
*/
interface TriggerPrimaryEventArgs extends ScriptObject {
}

/**
* Triggered when the lens turns off.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TurnOffEvent/TurnOffEvent-description.md Edit}
*/
interface TurnOffEvent extends SceneEvent {
}

/**
* This event has been **deprecated**, please use the [OnStartEvent](https://lensstudio.snapchat.com/api/classes/OnStartEvent) instead.

* Triggered when the lens turns on.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/TurnOnEvent/TurnOnEvent-description.md Edit}

* @deprecated
*/
interface TurnOnEvent extends SceneEvent {
}

/**
* Triggered every frame.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpdateEvent/UpdateEvent-description.md Edit}
*/
interface UpdateEvent extends SceneEvent {
    /**
    * Returns the time elapsed (in seconds) between the current frame and previous frame.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpdateEvent/methods/UpdateEvent-getDeltaTime.md Edit}
    */
    getDeltaTime(): number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpperBodyRenderObjectProvider/UpperBodyRenderObjectProvider-description.md Edit}

* @private
*/
interface UpperBodyRenderObjectProvider extends RenderObjectProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpperBodyRenderObjectProvider/properties/UpperBodyRenderObjectProvider-annotatorOptionsAsset.md Edit}
    
    * @private
    */
    annotatorOptionsAsset: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpperBodyRenderObjectProvider/properties/UpperBodyRenderObjectProvider-faceIndex.md Edit}
    
    * @private
    */
    faceIndex: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpperBodyRenderObjectProvider/properties/UpperBodyRenderObjectProvider-upperBodyModel.md Edit}
    
    * @private
    */
    upperBodyModel: BinAsset
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpperBodyTrackingAsset/UpperBodyTrackingAsset-description.md Edit}

* @private
*/
interface UpperBodyTrackingAsset extends Object3DAsset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpperBodyTrackingAsset/properties/UpperBodyTrackingAsset-annotatorOptionsAsset.md Edit}
    
    * @private
    */
    annotatorOptionsAsset: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UpperBodyTrackingAsset/properties/UpperBodyTrackingAsset-upperBodyModel.md Edit}
    
    * @private
    */
    upperBodyModel: BinAsset
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriRequestType/UriRequestType-description.md Edit}

* @private
*/
interface UriRequestType {
}
declare namespace UriRequestType {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriRequestType/properties/UriRequestType-DELETE.md Edit}
    
    * @private
    */
    let DELETE: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriRequestType/properties/UriRequestType-GET.md Edit}
    
    * @private
    */
    let GET: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriRequestType/properties/UriRequestType-HEAD.md Edit}
    
    * @private
    */
    let HEAD: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriRequestType/properties/UriRequestType-POST.md Edit}
    
    * @private
    */
    let POST: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriRequestType/properties/UriRequestType-PUT.md Edit}
    
    * @private
    */
    let PUT: string
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriSystem/UriSystem-description.md Edit}

* @private
*/
interface UriSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriSystem/methods/UriSystem-performJsonRequest.md Edit}
    
    * @private
    */
    performJsonRequest(uri: string, method: string, successCallback: (response: string) => void, failureCallback: (error: number, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriSystem/methods/UriSystem-performJsonRequestWithData.md Edit}
    
    * @private
    */
    performJsonRequestWithData(uri: string, method: string, json: string, successCallback: (response: string) => void, failureCallback: (error: number, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriSystem/methods/UriSystem-publish.md Edit}
    
    * @private
    */
    publish(uri: string, method: string, json: string, successCallback: (response: string) => void, failureCallback: (error: number, description: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriSystem/methods/UriSystem-subscribe.md Edit}
    
    * @private
    */
    subscribe(uri: string, method: string, successCallback: (response: string) => void, failureCallback: (error: number, description: string) => void): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriSystem/methods/UriSystem-subscribeWithData.md Edit}
    
    * @private
    */
    subscribeWithData(uri: string, method: string, json: string, successCallback: (response: string) => void, failureCallback: (error: number, description: string) => void): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UriSystem/methods/UriSystem-unsubscribe.md Edit}
    
    * @private
    */
    unsubscribe(requestId: string): void
    
}

/**
* Provides information about the user such as display name, birthday, and current weather. Accessible through `global.userContextSystem`.

* All callbacks will execute as soon as the requested information is available. In some rare cases, the requested information may be completely unavailable, and the callback will never occur.

* Note that formatted or localized strings may appear differently to users depending on their region.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/UserContextSystem-description.md Edit}
*/
interface UserContextSystem extends ScriptObject {
    /**
    * Retrieve the Snapchatter's friends list in order to access details like display name, birthdate, or Bitmoji
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-getAllFriends.md Edit}
    
    * @exposesUserData
    */
    getAllFriends(callback: (data: SnapchatUser[]) => void): void
    
    /**
    * Retrieve the Snapchatter's best friends in order to access details like display name, birthdate, or Bitmoji.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-getBestFriends.md Edit}
    
    * @exposesUserData
    */
    getBestFriends(callback: (data: SnapchatUser[]) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-getChatGroups.md Edit}
    
    * @exposesUserData
    
    * @private
    */
    getChatGroups(callback: (data: SnapchatGroup[]) => void): void
    
    /**
    * Retrieve a SnapchatUser representing the current user.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-getCurrentUser.md Edit}
    
    * @exposesUserData
    */
    getCurrentUser(callback: (data: SnapchatUser) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-getFriendsInCurrentContext.md Edit}
    
    * @exposesUserData
    
    * @private
    */
    getFriendsInCurrentContext(callback: (data: SnapchatUser[]) => void): void
    
    /**
    * Retrieve a SnapchatUser object for MyAI which you can use to access the MyAI Bitmoji or other details.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-getMyAIUser.md Edit}
    
    * @exposesUserData
    */
    getMyAIUser(callback: (data: SnapchatUser) => void): void
    
    /**
    * Gets the list of friends in the current context, such as 1:1 chats, 1:many chats, and group chats. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-getUsersInCurrentContext.md Edit}
    
    * @exposesUserData
    */
    getUsersInCurrentContext(callback: (data: SnapchatUser[]) => void): void
    
    /**
    * Provides the user's current altitude as a localized string.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestAltitudeFormatted.md Edit}
    */
    requestAltitudeFormatted(callback: (formattedData: string) => void): void
    
    /**
    * Provides the user's current altitude in meters.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestAltitudeInMeters.md Edit}
    */
    requestAltitudeInMeters(callback: (data: number) => void): void
    
    /**
    * Provides the user's birth date as a Date object.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestBirthdate.md Edit}
    
    * @exposesUserData
    */
    requestBirthdate(callback: (data: Date) => void): void
    
    /**
    * Provides the user's birth date as localized string.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestBirthdateFormatted.md Edit}
    
    * @exposesUserData
    */
    requestBirthdateFormatted(callback: (formattedData: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestBitmojiAvatarId.md Edit}
    
    * @exposesUserData
    
    * @private
    */
    requestBitmojiAvatarId(callback: (data: string) => void): void
    
    /**
    * Provides the name of the city the user is currently located in.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestCity.md Edit}
    
    * @exposesUserData
    */
    requestCity(callback: (data: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestCountryCode.md Edit}
    
    * @exposesUserData
    
    * @private
    */
    requestCountryCode(callback: (data: string) => void): void
    
    /**
    * Provides the user's display name.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestDisplayName.md Edit}
    */
    requestDisplayName(callback: (data: string) => void): void
    
    /**
    * Provides the user's current temperature in celsius.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestTemperatureCelsius.md Edit}
    */
    requestTemperatureCelsius(callback: (data: number) => void): void
    
    /**
    * Provides the user's current temperature in fahrenheit.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestTemperatureFahrenheit.md Edit}
    */
    requestTemperatureFahrenheit(callback: (data: number) => void): void
    
    /**
    * Provides the user's current temperature as a localized string.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestTemperatureFormatted.md Edit}
    */
    requestTemperatureFormatted(callback: (formattedData: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestUserId.md Edit}
    
    * @exposesUserData
    
    * @private
    */
    requestUserId(callback: (data: string) => void): void
    
    /**
    * Provides the user's username.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestUsername.md Edit}
    
    * @exposesUserData
    */
    requestUsername(callback: (data: string) => void): void
    
    /**
    * Provides the user's current weather condition.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestWeatherCondition.md Edit}
    */
    requestWeatherCondition(callback: (data: WeatherCondition) => void): void
    
    /**
    * Provides the user's current weather condition as a localized string.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserContextSystem/methods/UserContextSystem-requestWeatherLocalized.md Edit}
    */
    requestWeatherLocalized(callback: (formattedData: string) => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserInfoSystem/UserInfoSystem-description.md Edit}

* @private
*/
interface UserInfoSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserInfoSystem/methods/UserInfoSystem-getBitmojiLinkStatus.md Edit}
    
    * @private
    */
    getBitmojiLinkStatus(): string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserInfoSystem/methods/UserInfoSystem-requestBitmoji.md Edit}
    
    * @private
    */
    requestBitmoji(isBitmojiRequired: boolean): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserLocationInfo/UserLocationInfo-description.md Edit}

* @private
*/
interface UserLocationInfo {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserLocationInfo/properties/UserLocationInfo-latitude.md Edit}
    
    * @readonly
    
    * @exposesUserData
    
    * @private
    */
    latitude: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserLocationInfo/properties/UserLocationInfo-locality.md Edit}
    
    * @readonly
    
    * @private
    */
    locality: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserLocationInfo/properties/UserLocationInfo-longitude.md Edit}
    
    * @readonly
    
    * @exposesUserData
    
    * @private
    */
    longitude: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserLocationInfo/properties/UserLocationInfo-time.md Edit}
    
    * @readonly
    
    * @private
    */
    time: Date
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/UserLocationInfo/properties/UserLocationInfo-venueName.md Edit}
    
    * @readonly
    
    * @private
    */
    venueName?: string
    
}

/**
* A two dimensional vector.
* Vectors can only store finite numbers in the range Number.MIN_VALUE to Number.MAX_VALUE.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/vec2-description.md Edit}
*/
declare class vec2 {
    /**
    * Creates a new instance of a vec2.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-vec2.md Edit}
    */
    constructor(x: number, y: number)
    
    /**
    * Returns the vector plus `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-add.md Edit}
    */
    add(vec: vec2): vec2
    
    /**
    * Returns the result of this added to `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-addVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    addVec(vec: vec2): vec2
    
    /**
    * Returns the angle between the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-angleTo.md Edit}
    */
    angleTo(vec: vec2): number
    
    /**
    * Returns a copy of the vector with its length clamped to `length`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-clampLength.md Edit}
    */
    clampLength(length: number): vec2
    
    /**
    * Returns the distance between the vector and the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-distance.md Edit}
    */
    distance(vec: vec2): number
    
    /**
    * Like `distance()`, but returns the squared distance between vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-distanceSquared.md Edit}
    */
    distanceSquared(vec: vec2): number
    
    /**
    * Returns the division of the vector by the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-div.md Edit}
    */
    div(vec: vec2): vec2
    
    /**
    * Returns the result of this divided by `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-divVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    divVec(vec: vec2): vec2
    
    /**
    * Returns the dot product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-dot.md Edit}
    */
    dot(vec: vec2): number
    
    /**
    * Returns whether this is equal to `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-equal.md Edit}
    */
    equal(vec: vec2): boolean
    
    /**
    * Returns a copy of the vector moved towards the point `point` by the amount `magnitude`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-moveTowards.md Edit}
    */
    moveTowards(point: vec2, magnitude: number): vec2
    
    /**
    * Returns the result of this multiplied by `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-mulVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    mulVec(vec: vec2): vec2
    
    /**
    * Returns the component-wise multiplication product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-mult.md Edit}
    */
    mult(vec: vec2): vec2
    
    /**
    * Returns a copy of the vector with its length scaled to 1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-normalize.md Edit}
    */
    normalize(): vec2
    
    /**
    * Returns a copy of the vector projected onto the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-project.md Edit}
    */
    project(vec: vec2): vec2
    
    /**
    * Projects the vector onto the plane represented by the normal `normal`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-projectOnPlane.md Edit}
    */
    projectOnPlane(normal: vec2): vec2
    
    /**
    * Returns a copy of the vector reflected across the plane defined by the normal `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-reflect.md Edit}
    */
    reflect(vec: vec2): vec2
    
    /**
    * Returns the component-wise multiplication product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-scale.md Edit}
    */
    scale(vec: vec2): vec2
    
    /**
    * Returns the vector minus `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-sub.md Edit}
    */
    sub(vec: vec2): vec2
    
    /**
    * Returns the result of `vec` subtracted from this.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-subVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    subVec(vec: vec2): vec2
    
    /**
    * Returns a string representation of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-toString.md Edit}
    */
    toString(): string
    
    /**
    * Multiplies the components by the number `scale`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-uniformScale.md Edit}
    */
    uniformScale(scale: number): vec2
    
    /**
    * Alternate name for the y component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/properties/vec2-g.md Edit}
    */
    g: number
    
    /**
    * Returns the length of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/properties/vec2-length.md Edit}
    */
    length: number
    
    /**
    * Returns the squared length of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/properties/vec2-lengthSquared.md Edit}
    */
    lengthSquared: number
    
    /**
    * Alternate name for the x component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/properties/vec2-r.md Edit}
    */
    r: number
    
    /**
    * x component of the vec2.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/properties/vec2-x.md Edit}
    */
    x: number
    
    /**
    * y component of the vec2.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/properties/vec2-y.md Edit}
    */
    y: number
    
}
declare namespace vec2 {
    /**
    * Returns the vector (0, -1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-down.md Edit}
    */
    export function down(): vec2
    
    /**
    * Returns the vector (-1, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-left.md Edit}
    */
    export function left(): vec2
    
    /**
    * Linearly interpolates between the two vectors `vecA` and `vecB` by the factor `t`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-lerp.md Edit}
    */
    export function lerp(vecA: vec2, vecB: vec2, t: number): vec2
    
    /**
    * Returns a new vector containing the largest value of each component in the two vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-max.md Edit}
    */
    export function max(vecA: vec2, vecB: vec2): vec2
    
    /**
    * Returns a new vector containing the smallest value of each component in the two vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-min.md Edit}
    */
    export function min(vecA: vec2, vecB: vec2): vec2
    
    /**
    * Returns the vector (1, 1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-one.md Edit}
    */
    export function one(): vec2
    
    /**
    * Generate a random 2D direction vector. This is equivalent to a random point on a unit-radius circle.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-randomDirection.md Edit}
    */
    export function randomDirection(): vec2
    
    /**
    * Returns the vector (1, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-right.md Edit}
    */
    export function right(): vec2
    
    /**
    * Returns the vector (0, 1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-up.md Edit}
    */
    export function up(): vec2
    
    /**
    * Returns the vector (0, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec2/methods/vec2-zero.md Edit}
    */
    export function zero(): vec2
    

}

/**
* Represents an animation track using vec2 value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec2AnimationTrack/Vec2AnimationTrack-description.md Edit}

* @deprecated
*/
interface Vec2AnimationTrack extends AnimationTrack {
}

/**
* Represents an animation track using vec2 value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec2AnimationTrackKeyFramed/Vec2AnimationTrackKeyFramed-description.md Edit}

* @deprecated
*/
interface Vec2AnimationTrackKeyFramed extends Vec2AnimationTrack {
    /**
    * Adds a keyframe value `value` at time `time`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec2AnimationTrackKeyFramed/methods/Vec2AnimationTrackKeyFramed-addKey.md Edit}
    */
    addKey(time: number, value: vec2): void
    
    /**
    * Removes all keyframes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec2AnimationTrackKeyFramed/methods/Vec2AnimationTrackKeyFramed-removeAllKeys.md Edit}
    */
    removeAllKeys(): void
    
    /**
    * Removes the keyframe at `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec2AnimationTrackKeyFramed/methods/Vec2AnimationTrackKeyFramed-removeKeyAt.md Edit}
    */
    removeKeyAt(index: number): void
    
}

/**
* A three dimensional vector. 
* Vectors can only store finite numbers in the range Number.MIN_VALUE to Number.MAX_VALUE.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/vec3-description.md Edit}
*/
declare class vec3 {
    /**
    * Creates a new instance of a vec3.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-vec3.md Edit}
    */
    constructor(x: number, y: number, z: number)
    
    /**
    * Returns the vector plus `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-add.md Edit}
    */
    add(vec: vec3): vec3
    
    /**
    * Returns the result of this added to `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-addVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    addVec(vec: vec3): vec3
    
    /**
    * Returns the angle in radians between the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-angleTo.md Edit}
    */
    angleTo(vec: vec3): number
    
    /**
    * Returns a copy of the vector with its length clamped to `length`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-clampLength.md Edit}
    */
    clampLength(length: number): vec3
    
    /**
    * Returns the cross product of the vector and `vec`
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-cross.md Edit}
    */
    cross(vec: vec3): vec3
    
    /**
    * Returns the distance between the vector and the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-distance.md Edit}
    */
    distance(vec: vec3): number
    
    /**
    * Like `distance()`, but returns the squared distance between vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-distanceSquared.md Edit}
    */
    distanceSquared(vec: vec3): number
    
    /**
    * Returns the division of the vector by the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-div.md Edit}
    */
    div(vec: vec3): vec3
    
    /**
    * Returns the result of this divided by `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-divVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    divVec(vec: vec3): vec3
    
    /**
    * Returns the dot product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-dot.md Edit}
    */
    dot(vec: vec3): number
    
    /**
    * Returns whether this is equal to `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-equal.md Edit}
    */
    equal(vec: vec3): boolean
    
    /**
    * Returns a copy of the vector moved towards the point `point` by the amount `magnitude`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-moveTowards.md Edit}
    */
    moveTowards(point: vec3, magnitude: number): vec3
    
    /**
    * Returns the result of this multiplied by `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-mulVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    mulVec(vec: vec3): vec3
    
    /**
    * Returns the component-wise multiplication product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-mult.md Edit}
    */
    mult(vec: vec3): vec3
    
    /**
    * Returns a copy of the vector with its length scaled to 1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-normalize.md Edit}
    */
    normalize(): vec3
    
    /**
    * Returns a copy of the vector projected onto the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-project.md Edit}
    */
    project(vec: vec3): vec3
    
    /**
    * Projects the vector onto the plane represented by the normal `normal`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-projectOnPlane.md Edit}
    */
    projectOnPlane(normal: vec3): vec3
    
    /**
    * Returns a copy of the vector reflected across the plane defined by the normal `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-reflect.md Edit}
    */
    reflect(vec: vec3): vec3
    
    /**
    * Returns a copy of the vector rotated towards the `target` vector by `step` radians.
    
    * The vectors may be non-normalized. The function always returns a vector with the source vector's magnitude.
    * This prevents overshoot. If `step` exceeds the angle between vectors, it stops at the `target` direction.
    * If `step` is negative, this rotates the source vector away from `target`. It stops when the direction is precisely opposite to `target`.
    * If the vectors are in opposite directions, the result is rotated along an arbitrary (but consistent) axis.
    * If either vector is zero magnitude, it returns the source vector.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-rotateTowards.md Edit}
    */
    rotateTowards(target: vec3, step: number): vec3
    
    /**
    * Returns the component-wise multiplication product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-scale.md Edit}
    */
    scale(vec: vec3): vec3
    
    /**
    * Returns the vector minus `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-sub.md Edit}
    */
    sub(vec: vec3): vec3
    
    /**
    * Returns the result of `vec` subtracted from this.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-subVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    subVec(vec: vec3): vec3
    
    /**
    * Returns a string representation of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-toString.md Edit}
    */
    toString(): string
    
    /**
    * Multiplies the components by the number `scale`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-uniformScale.md Edit}
    */
    uniformScale(scale: number): vec3
    
    /**
    * Alternate name for the z component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/properties/vec3-b.md Edit}
    */
    b: number
    
    /**
    * Alternate name for the y component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/properties/vec3-g.md Edit}
    */
    g: number
    
    /**
    * Returns the length of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/properties/vec3-length.md Edit}
    */
    length: number
    
    /**
    * Returns the squared length of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/properties/vec3-lengthSquared.md Edit}
    */
    lengthSquared: number
    
    /**
    * Alternate name for the x component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/properties/vec3-r.md Edit}
    */
    r: number
    
    /**
    * x component of the vec3.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/properties/vec3-x.md Edit}
    */
    x: number
    
    /**
    * y component of the vec3.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/properties/vec3-y.md Edit}
    */
    y: number
    
    /**
    * z component of the vec3.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/properties/vec3-z.md Edit}
    */
    z: number
    
}
declare namespace vec3 {
    /**
    * Returns the vector (0, 0, -1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-back.md Edit}
    */
    export function back(): vec3
    
    /**
    * Returns the vector (0, -1, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-down.md Edit}
    */
    export function down(): vec3
    
    /**
    * Returns the vector (0, 0, 1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-forward.md Edit}
    */
    export function forward(): vec3
    
    /**
    * Returns the vector (-1, 0, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-left.md Edit}
    */
    export function left(): vec3
    
    /**
    * Linearly interpolates between the two vectors `vecA` and `vecB` by the factor `t`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-lerp.md Edit}
    */
    export function lerp(vecA: vec3, vecB: vec3, t: number): vec3
    
    /**
    * Returns a new vector containing the largest value of each component in the two vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-max.md Edit}
    */
    export function max(vecA: vec3, vecB: vec3): vec3
    
    /**
    * Returns a new vector containing the smallest value of each component in the two vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-min.md Edit}
    */
    export function min(vecA: vec3, vecB: vec3): vec3
    
    /**
    * Returns the vector (1, 1, 1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-one.md Edit}
    */
    export function one(): vec3
    
    /**
    * Makes the vectors `vecA` and `vecB` normalized and orthogonal to each other.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-orthonormalize.md Edit}
    */
    export function orthonormalize(vecA: vec3, vecB: vec3): void
    
    /**
    * Generate random 3D direction vector. This is equivalent to a random point on a unit-radius sphere.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-randomDirection.md Edit}
    */
    export function randomDirection(): vec3
    
    /**
    * Returns the vector (1, 0, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-right.md Edit}
    */
    export function right(): vec3
    
    /**
    * Spherically interpolates between the two vectors `vecA` and `vecB` by the factor `t`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-slerp.md Edit}
    */
    export function slerp(vecA: vec3, vecB: vec3, t: number): vec3
    
    /**
    * Returns the vector (0, 1, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-up.md Edit}
    */
    export function up(): vec3
    
    /**
    * Returns the vector (0, 0, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec3/methods/vec3-zero.md Edit}
    */
    export function zero(): vec3
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationPropertyTrack/Vec3AnimationPropertyTrack-description.md Edit}

* @private
*/
interface Vec3AnimationPropertyTrack extends AnimationPropertyTrack {
}

/**
* Represents an animation track using vec3 value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationTrack/Vec3AnimationTrack-description.md Edit}

* @deprecated
*/
interface Vec3AnimationTrack extends AnimationTrack {
}

/**
* Represents an animation track using vec3 value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationTrackKeyFramed/Vec3AnimationTrackKeyFramed-description.md Edit}

* @deprecated
*/
interface Vec3AnimationTrackKeyFramed extends Vec3AnimationTrack {
    /**
    * Adds a keyframe value `value` at time `time`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationTrackKeyFramed/methods/Vec3AnimationTrackKeyFramed-addKey.md Edit}
    */
    addKey(time: number, value: vec3): void
    
    /**
    * Removes all keyframes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationTrackKeyFramed/methods/Vec3AnimationTrackKeyFramed-removeAllKeys.md Edit}
    */
    removeAllKeys(): void
    
    /**
    * Removes the keyframe at `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationTrackKeyFramed/methods/Vec3AnimationTrackKeyFramed-removeKeyAt.md Edit}
    */
    removeKeyAt(index: number): void
    
}

/**
* Represents an animation track using vec3 animation tracks.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationTrackXYZ/Vec3AnimationTrackXYZ-description.md Edit}

* @deprecated
*/
interface Vec3AnimationTrackXYZ extends Vec3AnimationTrack {
    /**
    * Returns the child track at index `index`
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationTrackXYZ/methods/Vec3AnimationTrackXYZ-getChildTrackByIndex.md Edit}
    */
    getChildTrackByIndex(index: number): AnimationTrack
    
    /**
    * Sets the child track at index `index` to `track`
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec3AnimationTrackXYZ/methods/Vec3AnimationTrackXYZ-setChildTrackByIndex.md Edit}
    */
    setChildTrackByIndex(index: number, track: AnimationTrack): void
    
}

/**
* A four dimensional vector.
* Vectors can only store finite numbers in the range Number.MIN_VALUE to Number.MAX_VALUE.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/vec4-description.md Edit}
*/
declare class vec4 {
    /**
    * Creates a new instance of a vec4.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-vec4.md Edit}
    */
    constructor(x: number, y: number, z: number, w: number)
    
    /**
    * Returns the vector plus `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-add.md Edit}
    */
    add(vec: vec4): vec4
    
    /**
    * Returns the result of this added to `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-addVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    addVec(vec: vec4): vec4
    
    /**
    * Returns the angle between the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-angleTo.md Edit}
    */
    angleTo(vec: vec4): number
    
    /**
    * Returns a copy of the vector with its length clamped to `length`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-clampLength.md Edit}
    */
    clampLength(length: number): vec4
    
    /**
    * Returns the distance between the vector and the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-distance.md Edit}
    */
    distance(vec: vec4): number
    
    /**
    * Like `distance()`, but returns the squared distance between vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-distanceSquared.md Edit}
    */
    distanceSquared(vec: vec4): number
    
    /**
    * Returns the division of the vector by the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-div.md Edit}
    */
    div(vec: vec4): vec4
    
    /**
    * Returns the result of this divided by `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-divVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    divVec(vec: vec4): vec4
    
    /**
    * Returns the dot product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-dot.md Edit}
    */
    dot(vec: vec4): number
    
    /**
    * Returns whether this is equal to `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-equal.md Edit}
    */
    equal(vec: vec4): boolean
    
    /**
    * Returns a copy of the vector moved towards the point `point` by the amount `magnitude`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-moveTowards.md Edit}
    */
    moveTowards(point: vec4, magnitude: number): vec4
    
    /**
    * Returns the result of this multiplied by `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-mulVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    mulVec(vec: vec4): vec4
    
    /**
    * Returns the component-wise multiplication product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-mult.md Edit}
    */
    mult(vec: vec4): vec4
    
    /**
    * Returns a copy of the vector with its length scaled to 1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-normalize.md Edit}
    */
    normalize(): vec4
    
    /**
    * Returns a copy of the vector projected onto the vector `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-project.md Edit}
    */
    project(vec: vec4): vec4
    
    /**
    * Projects the vector onto the plane represented by the normal `normal`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-projectOnPlane.md Edit}
    */
    projectOnPlane(normal: vec4): vec4
    
    /**
    * Returns a copy of the vector reflected across the plane defined by the normal `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-reflect.md Edit}
    */
    reflect(vec: vec4): vec4
    
    /**
    * Returns the component-wise multiplication product of the vector and `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-scale.md Edit}
    */
    scale(vec: vec4): vec4
    
    /**
    * Returns the vector minus `vec`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-sub.md Edit}
    */
    sub(vec: vec4): vec4
    
    /**
    * Returns the result of `vec` subtracted from this.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-subVec.md Edit}
    
    * @deprecated
    
    * @private
    */
    subVec(vec: vec4): vec4
    
    /**
    * Returns a string representation of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-toString.md Edit}
    */
    toString(): string
    
    /**
    * Multiplies the components by the number `scale`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-uniformScale.md Edit}
    */
    uniformScale(scale: number): vec4
    
    /**
    * Alternate name for the w component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-a.md Edit}
    */
    a: number
    
    /**
    * Alternate name for the z component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-b.md Edit}
    */
    b: number
    
    /**
    * Alternate name for the y component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-g.md Edit}
    */
    g: number
    
    /**
    * Returns the length of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-length.md Edit}
    */
    length: number
    
    /**
    * Returns the squared length of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-lengthSquared.md Edit}
    */
    lengthSquared: number
    
    /**
    * Alternate name for the x component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-r.md Edit}
    */
    r: number
    
    /**
    * w component of the vec4.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-w.md Edit}
    */
    w: number
    
    /**
    * x component of the vec4.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-x.md Edit}
    */
    x: number
    
    /**
    * y component of the vec4.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-y.md Edit}
    */
    y: number
    
    /**
    * z component of the vec4.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/properties/vec4-z.md Edit}
    */
    z: number
    
}
declare namespace vec4 {
    /**
    * Linearly interpolates between the two vectors `vecA` and `vecB` by the factor `t`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-lerp.md Edit}
    */
    export function lerp(vecA: vec4, vecB: vec4, t: number): vec4
    
    /**
    * Returns a new vector containing the largest value of each component in the two vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-max.md Edit}
    */
    export function max(vecA: vec4, vecB: vec4): vec4
    
    /**
    * Returns a new vector containing the smallest value of each component in the two vectors.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-min.md Edit}
    */
    export function min(vecA: vec4, vecB: vec4): vec4
    
    /**
    * Returns the vector (1, 1, 1, 1).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-one.md Edit}
    */
    export function one(): vec4
    
    /**
    * Returns the vector (0, 0, 0, 0).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4/methods/vec4-zero.md Edit}
    */
    export function zero(): vec4
    

}

/**
* Represents an animation track using vec4 value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec4AnimationTrack/Vec4AnimationTrack-description.md Edit}

* @deprecated
*/
interface Vec4AnimationTrack extends AnimationTrack {
}

/**
* Represents an animation track using vec4 value keyframes.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec4AnimationTrackKeyFramed/Vec4AnimationTrackKeyFramed-description.md Edit}

* @deprecated
*/
interface Vec4AnimationTrackKeyFramed extends Vec4AnimationTrack {
    /**
    * Adds a key with value `value` at time `time`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec4AnimationTrackKeyFramed/methods/Vec4AnimationTrackKeyFramed-addKey.md Edit}
    */
    addKey(time: number, value: vec4): void
    
    /**
    * Removes all keys.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec4AnimationTrackKeyFramed/methods/Vec4AnimationTrackKeyFramed-removeAllKeys.md Edit}
    */
    removeAllKeys(): void
    
    /**
    * Removes key at index `index`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Vec4AnimationTrackKeyFramed/methods/Vec4AnimationTrackKeyFramed-removeKeyAt.md Edit}
    */
    removeKeyAt(index: number): void
    
}

/**
* A vector containing 4 boolean values.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/vec4b-description.md Edit}
*/
declare class vec4b {
    /**
    * Creates a new instance of a vec4b.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/methods/vec4b-vec4b.md Edit}
    */
    constructor(x: boolean, y: boolean, z: boolean, w: boolean)
    
    /**
    * Returns a string representation of the vector.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/methods/vec4b-toString.md Edit}
    */
    toString(): string
    
    /**
    * Alternate name for the w component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/properties/vec4b-a.md Edit}
    */
    a: boolean
    
    /**
    * Alternate name for the z component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/properties/vec4b-b.md Edit}
    */
    b: boolean
    
    /**
    * Alternate name for the y component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/properties/vec4b-g.md Edit}
    */
    g: boolean
    
    /**
    * Alternate name for the x component.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/properties/vec4b-r.md Edit}
    */
    r: boolean
    
    /**
    * w component of the vec4b.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/properties/vec4b-w.md Edit}
    */
    w: boolean
    
    /**
    * x component of the vec4b.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/properties/vec4b-x.md Edit}
    */
    x: boolean
    
    /**
    * y component of the vec4b.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/properties/vec4b-y.md Edit}
    */
    y: boolean
    
    /**
    * z component of the vec4b.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/vec4b/properties/vec4b-z.md Edit}
    */
    z: boolean
    
}

/**
* Used to help control vertex animations on the SceneObject.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexCache/VertexCache-description.md Edit}
*/
interface VertexCache extends Component {
    /**
    * The current time of vertex animations on this SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexCache/properties/VertexCache-currentTime.md Edit}
    */
    currentTime: number
    
    /**
    * The weight applied to vertex animations on this SceneObject.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexCache/properties/VertexCache-weight.md Edit}
    */
    weight: number
    
}

/**
* Provides settings for vertex physics in the ClothVisual component.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/VertexSimulationSettings-description.md Edit}
*/
interface VertexSimulationSettings extends ScriptObject {
    /**
    * Bend Stiffness value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/properties/VertexSimulationSettings-bendStiffness.md Edit}
    */
    bendStiffness: number
    
    /**
    * BendStiffness value weight on Global Simulation Settings for this vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/properties/VertexSimulationSettings-bendStiffnessGlobalWeight.md Edit}
    */
    bendStiffnessGlobalWeight: number
    
    /**
    * Friction value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/properties/VertexSimulationSettings-friction.md Edit}
    */
    friction: number
    
    /**
    * Friction value weight on Global Simulation Settings for this vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/properties/VertexSimulationSettings-frictionGlobalWeight.md Edit}
    */
    frictionGlobalWeight: number
    
    /**
    * Mass value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/properties/VertexSimulationSettings-mass.md Edit}
    */
    mass: number
    
    /**
    * Mass value weight on Global Simulation Settings for this vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/properties/VertexSimulationSettings-massGlobalWeight.md Edit}
    */
    massGlobalWeight: number
    
    /**
    * Stretch Stiffness value.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/properties/VertexSimulationSettings-stretchStiffness.md Edit}
    */
    stretchStiffness: number
    
    /**
    * StretchStiffness value weight on Global Simulation Settings for this vertex.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VertexSimulationSettings/properties/VertexSimulationSettings-stretchStiffnessGlobalWeight.md Edit}
    */
    stretchStiffnessGlobalWeight: number
    
}

/**
* Used by the `verticalAlignment` property in [MeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual).
* When a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) is attached to the same SceneObject, this determines how the mesh will be positioned vertically.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VerticalAlignment/VerticalAlignment-description.md Edit}
*/
declare enum VerticalAlignment {
    /**
    * The mesh will be aligned to the bottom side.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VerticalAlignment/properties/VerticalAlignment-Bottom.md Edit}
    */
    Bottom,
    /**
    * The mesh will be centered.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VerticalAlignment/properties/VerticalAlignment-Center.md Edit}
    */
    Center,
    /**
    * The mesh will be aligned to the top side.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VerticalAlignment/properties/VerticalAlignment-Top.md Edit}
    */
    Top
}

/**
* Options for handling vertical text overflow. Used by [Text component's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `verticalOverflow` property.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VerticalOverflow/VerticalOverflow-description.md Edit}
*/
declare enum VerticalOverflow {
    /**
    * Text will continue to draw past the end of the vertical boundaries.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VerticalOverflow/properties/VerticalOverflow-Overflow.md Edit}
    */
    Overflow,
    /**
    * Text will be clipped at the end of the vertical boundaries.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VerticalOverflow/properties/VerticalOverflow-Truncate.md Edit}
    */
    Truncate,
    /**
    * Text will shrink to fit within the vertical boundaries.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VerticalOverflow/properties/VerticalOverflow-Shrink.md Edit}
    */
    Shrink
}

/**
* Defines a VFX to use with [VFX Component](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#VFXComponent). For more information, see the [VFX Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/graphics/particles/vfx-editor/introduction-and-concepts).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXAsset/VFXAsset-description.md Edit}
*/
interface VFXAsset extends Asset {
    /**
    * Clones the VFX asset and returns a copy. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXAsset/methods/VFXAsset-clone.md Edit}
    */
    clone(): VFXAsset
    
    /**
    * Returns a PassWrapper containing all feedback passes in a VFX asset
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXAsset/properties/VFXAsset-feedbacks.md Edit}
    
    * @readonly
    */
    feedbacks: PassWrappers
    
    /**
    * When `Mesh` is selected as a Geometry Type in the VFX Output Container, the system will render particles using this mesh, otherwise particles will be rendered as quads. Refer to the Custom Mesh Emitter built-in asset as a starting point when working with custom meshes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXAsset/properties/VFXAsset-mesh.md Edit}
    */
    mesh: RenderMesh
    
    /**
    * Returns a PassWrapper containing all output passes in a VFX asset
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXAsset/properties/VFXAsset-outputs.md Edit}
    
    * @readonly
    */
    outputs: PassWrappers
    
    /**
    * Controls properties for the VFXAsset. Any scriptable properties on a VFX Graph will automatically become properties of this Properties class. For example, if the VFX Graph defines a variable named `baseColor`, a script would be able to access that property as `vfxAsset.properties.baseColor`.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXAsset/properties/VFXAsset-properties.md Edit}
    
    * @readonly
    */
    properties: Properties
    
    /**
    * Returns a PassWrapper containing all simulation passes in a VFX asset
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXAsset/properties/VFXAsset-simulations.md Edit}
    
    * @readonly
    */
    simulations: PassWrappers
    
}

/**
* A VFX visual used to show a [VFX Asset](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#VFXAsset).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXComponent/VFXComponent-description.md Edit}
*/
interface VFXComponent extends BaseMeshVisual {
    /**
    * Clear the VFX system.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXComponent/methods/VFXComponent-clear.md Edit}
    */
    clear(): void
    
    /**
    * Restart the VFX system.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXComponent/methods/VFXComponent-restart.md Edit}
    */
    restart(): void
    
    /**
    * The [VFX Asset](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#VFXAsset) that describes the VFX simulation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VFXComponent/properties/VFXComponent-asset.md Edit}
    */
    asset: VFXAsset
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/VideoRecorderComponent-description.md Edit}

* @private
*/
interface VideoRecorderComponent extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/methods/VideoRecorderComponent-cancelRecording.md Edit}
    
    * @private
    */
    cancelRecording(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/methods/VideoRecorderComponent-getPreviewTexture.md Edit}
    
    * @private
    */
    getPreviewTexture(onSuccess: (texture: Texture) => void, onFailure: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/methods/VideoRecorderComponent-hasPreviewTexture.md Edit}
    
    * @private
    */
    hasPreviewTexture(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/methods/VideoRecorderComponent-isRecording.md Edit}
    
    * @private
    */
    isRecording(): boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/methods/VideoRecorderComponent-startRecording.md Edit}
    
    * @private
    */
    startRecording(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/methods/VideoRecorderComponent-stopRecording.md Edit}
    
    * @private
    */
    stopRecording(onSuccess: (texture: Texture) => void, onFailure: () => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/properties/VideoRecorderComponent-sourceTexture.md Edit}
    
    * @private
    */
    sourceTexture: Texture
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoRecorderComponent/properties/VideoRecorderComponent-textureScale.md Edit}
    
    * @private
    */
    textureScale: number
    
}

/**
* Describes the current status of a [VideoTextureProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Providers#VideoTextureProvider).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoStatus/VideoStatus-description.md Edit}
*/
declare enum VideoStatus {
    /**
    * The video playback has stopped
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoStatus/properties/VideoStatus-Stopped.md Edit}
    */
    Stopped,
    /**
    * The video is being prepared
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoStatus/properties/VideoStatus-Preparing.md Edit}
    */
    Preparing,
    /**
    * The video is playing
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoStatus/properties/VideoStatus-Playing.md Edit}
    */
    Playing,
    /**
    * The video playback is paused
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoStatus/properties/VideoStatus-Paused.md Edit}
    */
    Paused
}

/**
* Controls a video texture resource. Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/VideoTextureProvider-description.md Edit}
*/
interface VideoTextureProvider extends TextureProvider {
    /**
    * Returns the number of times the video has played consecutively.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-getCurrentPlayCount.md Edit}
    
    * @deprecated
    */
    getCurrentPlayCount(): number
    
    /**
    * Returns the status of the video resource.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-getStatus.md Edit}
    
    * @deprecated
    */
    getStatus(): VideoStatus
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-isReady.md Edit}
    
    * @deprecated
    
    * @private
    */
    isReady(): boolean
    
    /**
    * Pauses the video playback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-pause.md Edit}
    */
    pause(): void
    
    /**
    * Plays the video `playCount` times. If `playCount` is less than 0, it loops infinitely.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-play.md Edit}
    */
    play(playCount: number): void
    
    /**
    * Resumes the video playback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-resume.md Edit}
    */
    resume(): void
    
    /**
    * Sets the current playback time to the specified time in seconds.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-seek.md Edit}
    */
    seek(value: number): boolean
    
    /**
    * Sets `callback` as the function invoked when the video resource stops playing.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-setOnFinish.md Edit}
    
    * @deprecated
    */
    setOnFinish(callback: () => void): void
    
    /**
    * Sets `callback` as the function invoked when the video resource is ready to be played.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-setOnReady.md Edit}
    
    * @deprecated
    */
    setOnReady(onReadyCallback: () => void): void
    
    /**
    * Stops the video playback.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/methods/VideoTextureProvider-stop.md Edit}
    */
    stop(): void
    
    /**
    * Returns the number of played cycles.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-currentPlayCount.md Edit}
    
    * @readonly
    */
    currentPlayCount: number
    
    /**
    * Returns the current time in seconds, or zero if accessed during playback being in unprepared state.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-currentTime.md Edit}
    
    * @readonly
    */
    currentTime: number
    
    /**
    * Returns the duration of playback range in seconds, or zero if accessed while playback is in an unprepared state.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-duration.md Edit}
    
    * @readonly
    */
    duration: number
    
    /**
    * Returns true if video file has been loaded and is ready for decoding and false otherwise.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-isPlaybackReady.md Edit}
    
    * @readonly
    */
    isPlaybackReady: boolean
    
    /**
    * Returns the time of the last acquired texture in seconds, or zero if accessed during playback being in unprepared state.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-lastFrameTime.md Edit}
    
    * @readonly
    */
    lastFrameTime: number
    
    /**
    * The event for being reported about playback finished. When this event is triggered, lens developers can evict this texture from material slots to avoid disrupting user's experience.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-onPlaybackDone.md Edit}
    
    * @readonly
    */
    onPlaybackDone: event0<void>
    
    /**
    * The event for being reported about playback start. When this event is triggered, lens developers can set video texture to material slots and see actual video frames.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-onPlaybackReady.md Edit}
    
    * @readonly
    */
    onPlaybackReady: event0<void>
    
    /**
    * The playback rate of the video. The rate is set when starting playback, meaning that updates to this property does not take effect until the video is stopped and started again. Defaults to 1.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-playbackRate.md Edit}
    */
    playbackRate: number
    
    /**
    * Sets or returns playback end time in unit range.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-relativeEndTime.md Edit}
    */
    relativeEndTime: number
    
    /**
    * Sets or returns playback start time in unit range.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-relativeStartTime.md Edit}
    */
    relativeStartTime: number
    
    /**
    * A read-only property that returns the status of provider. Suggested as a substitution for the existing getStatus()
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-status.md Edit}
    
    * @readonly
    */
    status: VideoStatus
    
    /**
    * Returns the duration of loaded video file in seconds, or zero if accessed during playback being in unprepared state.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-totalDuration.md Edit}
    
    * @readonly
    */
    totalDuration: number
    
    /**
    * The audio volume of the video resource, normalized from 0 to 1.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VideoTextureProvider/properties/VideoTextureProvider-volume.md Edit}
    */
    volume: number
    
}

/**
* Base class for all visual Components (e.g. MeshVisual).

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Visual/Visual-description.md Edit}
*/
interface Visual extends Component {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Visual/methods/Visual-debugRender.md Edit}
    
    * @private
    */
    debugRender(): DebugRender
    
    /**
    * Returns the order of this Visual in the render queue.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Visual/methods/Visual-getRenderOrder.md Edit}
    */
    getRenderOrder(): number
    
    /**
    * Sets the order of this Visual in the render queue.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Visual/methods/Visual-setRenderOrder.md Edit}
    */
    setRenderOrder(value: number): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Visual/properties/Visual-internalRenderOrder.md Edit}
    
    * @deprecated
    
    * @private
    */
    internalRenderOrder: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Visual/properties/Visual-renderOrder.md Edit}
    
    * @private
    */
    renderOrder: number
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML/VoiceML-description.md Edit}
*/
interface VoiceML {
}

declare namespace VoiceML {
    /**
    * Additional parameters are used to provide additional data for NlpModels and NlpResponses. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.AdditionalParam/VoiceML.AdditionalParam-description.md Edit}
    */
    interface AdditionalParam extends ScriptObject {
        /**
        * The key of the additional parameter.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.AdditionalParam/properties/VoiceML.AdditionalParam-key.md Edit}
        
        * @readonly
        */
        key: string
        
        /**
        * The value of the additional parameter.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.AdditionalParam/properties/VoiceML.AdditionalParam-value.md Edit}
        
        * @readonly
        */
        value: string
        
    }

}

declare namespace VoiceML {
    /**
    * NlpModels are used to provide the VoiceML NLP engine information about how the transcript of the input audio should be processed. BaseNlpModels is the abstract base class all NlpModels ([NlpKeywordModel](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpKeywordModel), [NlpIntentModel](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpIntentModel)) inherit from.
    
    * You can specify multiple NlpModels to process the same audio, all of their results will be returned in [ListeningUpdateEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLListeningUpdateEventArgs)
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.BaseNlpModel/VoiceML.BaseNlpModel-description.md Edit}
    */
    interface BaseNlpModel extends ScriptObject {
        /**
        * Adds additional params to set in the ML engine.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.BaseNlpModel/methods/VoiceML.BaseNlpModel-addParam.md Edit}
        */
        addParam(key: string, value: string): void
        
        /**
        * Additional params to send in the response.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.BaseNlpModel/properties/VoiceML.BaseNlpModel-additionalParams.md Edit}
        
        * @readonly
        
        * @private
        */
        additionalParams: VoiceML.AdditionalParam[]
        
    }

}

declare namespace VoiceML {
    /**
    * The abstract base class all NlpResponses inherit from. NlpResponses are used as the result from the VoiceML NLP engine with information after processing the transcript of the input audio.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.BaseNlpResponse/VoiceML.BaseNlpResponse-description.md Edit}
    */
    interface BaseNlpResponse extends ScriptObject {
        /**
        * Additional params to send in the response.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.BaseNlpResponse/properties/VoiceML.BaseNlpResponse-additionalParams.md Edit}
        
        * @readonly
        */
        additionalParams: VoiceML.AdditionalParam[]
        
        /**
        * Name of the model that sent the response.  In current studio release, you can expect the result to contain either  `VOICE_ENABLED_UI` like described in [NlpModel](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpIntentModel).  If using `enableSystemCommands()`, `SYSTEM_COMMANDS` will be returned as well. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.BaseNlpResponse/properties/VoiceML.BaseNlpResponse-modelName.md Edit}
        
        * @readonly
        */
        modelName: string
        
        /**
        * The status of the NLP response. in case of successful result, the value should be `VoiceMLModule.NlpResponsesStatusCodes.OK`, in case of failure, the value should be `VoiceMLModule.NlpResponsesStatusCodes.ERROR`. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.BaseNlpResponse/properties/VoiceML.BaseNlpResponse-status.md Edit}
        
        * @readonly
        */
        status: VoiceML.NlpResponseStatus
        
    }

}

declare namespace VoiceML {
    /**
    * An NLP model used to detect keywords in the transcript of the input audio.  For example, you can have keyword detection which will trigger every time the word "red" is said, and another trigger for the word "yellow". 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.KeywordModelGroup/VoiceML.KeywordModelGroup-description.md Edit}
    */
    interface KeywordModelGroup extends ScriptObject {
        /**
        * Array of keywords that are being sent to the ML model for detection with similar meaning. For example, putting the word "yellow" would trigger a response in the sentence "I saw a yellow bird". The keyword detection model supports slight variation in the word transcription. We recommend adding possible synonyms of the same keyword. So for example, should you want to detect "movie", you might want to consider adding "video" and possibly "feature" and "flick" as well to the list resulting in `["movie", "video", "feature","flick"]` as different people might express themselves differently.  
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.KeywordModelGroup/properties/VoiceML.KeywordModelGroup-keywords.md Edit}
        
        * @readonly
        */
        keywords: string[]
        
        /**
        * Name of the keyword group. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.KeywordModelGroup/properties/VoiceML.KeywordModelGroup-name.md Edit}
        
        * @readonly
        */
        name: string
        
    }

}

declare namespace VoiceML {
    /**
    * ListeningErrorEventArgs object returns in onListeningError callback. It contains the error code and description of the error. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningErrorEventArgs/VoiceML.ListeningErrorEventArgs-description.md Edit}
    */
    interface ListeningErrorEventArgs extends ScriptObject {
        /**
        * Returns the description of the error. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningErrorEventArgs/properties/VoiceML.ListeningErrorEventArgs-description.md Edit}
        
        * @readonly
        */
        description: string
        
        /**
        * Returns the Error code number. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningErrorEventArgs/properties/VoiceML.ListeningErrorEventArgs-error.md Edit}
        
        * @readonly
        */
        error: number
        
    }

}

declare namespace VoiceML {
    /**
    * Provides the configuration for the audio input processing output. This can either include NLP processing using the ([nlpModels](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLBaseNlpModel)) or directly retrieving the transcription.  `speechContext` provides the ability to further improve the transcription accuracy given an assumed context. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/VoiceML.ListeningOptions-description.md Edit}
    */
    interface ListeningOptions extends ScriptObject {
        /**
        * In cases where specific words are expected from the users, the transcription accuracy of these words can be improved, by strengthening their likelihood in context. The strength is scaled `1-10` (10 being the strongest increase) the default value is `5`. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/methods/VoiceML.ListeningOptions-addSpeechContext.md Edit}
        */
        addSpeechContext(phrases: string[], boost: number): void
        
        /**
        * The language which VoiceML should listen to.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/properties/VoiceML.ListeningOptions-languageCode.md Edit}
        */
        languageCode: string
        
        /**
        * Options for the ML model to be used. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/properties/VoiceML.ListeningOptions-nlpModels.md Edit}
        */
        nlpModels: VoiceML.BaseNlpModel[]
        
        /**
        * An array of VoiceML.QnaAction elements. It is used to pass the context in each QnaAction to the DialogML.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/properties/VoiceML.ListeningOptions-postProcessingActions.md Edit}
        */
        postProcessingActions: VoiceML.PostProcessingAction[]
        
        /**
        * Should complete transcription returned. Such transcriptions after the user stopped speaking. This transcription is marked with `isFinalTranscription=true` in the `OnListeningUpdate`. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/properties/VoiceML.ListeningOptions-shouldReturnAsrTranscription.md Edit}
        */
        shouldReturnAsrTranscription: boolean
        
        /**
        * Should interim transcription returned. Such transcriptions are returned while the user still speaks, however they may be less accurate, and can be changed on following transcriptions. This interim results are marked with `isFinalTranscription=false` in the `OnListeningUpdate`. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/properties/VoiceML.ListeningOptions-shouldReturnInterimAsrTranscription.md Edit}
        */
        shouldReturnInterimAsrTranscription: boolean
        
        /**
        * Supports multiple speech contexts for increased transcription accuracy. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/properties/VoiceML.ListeningOptions-speechContexts.md Edit}
        */
        speechContexts: VoiceML.SpeechContext[]
        
        /**
        * An optional attribute to specify which speech recognizer ML model to use when transcribing.  When creating a new `ListeningOptions` the value of this attrbute is defaulted to `SPEECH_RECOGNIZER`.   The supported values are: `SPEECH_RECOGNIZER`. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/properties/VoiceML.ListeningOptions-speechRecognizer.md Edit}
        */
        speechRecognizer: string
        
    }

}
declare namespace VoiceML {
    namespace ListeningOptions {
        /**
        * Creates voice command options. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningOptions/methods/VoiceML.ListeningOptions-create.md Edit}
        */
        export function create(): VoiceML.ListeningOptions
        
    
    }

}

declare namespace VoiceML {
    /**
    * The parameter when the callback registered on from `VoiceMLModule.onListeningUpdate` is called. This is to mark the input audio transcription (and possibly NlpModels as a result) was updated.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningUpdateEventArgs/VoiceML.ListeningUpdateEventArgs-description.md Edit}
    */
    interface ListeningUpdateEventArgs extends ScriptObject {
        /**
        * In case `enableSystemCommands()` function used, returns the command executed by the system. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningUpdateEventArgs/methods/VoiceML.ListeningUpdateEventArgs-getCommandResponses.md Edit}
        */
        getCommandResponses(): VoiceML.NlpCommandResponse[]
        
        /**
        * In case an NLP intent model used, returns intent response from the ML engine. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningUpdateEventArgs/methods/VoiceML.ListeningUpdateEventArgs-getIntentResponses.md Edit}
        */
        getIntentResponses(): VoiceML.NlpIntentResponse[]
        
        /**
        * In case a keyword detection model used, returns results from the keywords model.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningUpdateEventArgs/methods/VoiceML.ListeningUpdateEventArgs-getKeywordResponses.md Edit}
        */
        getKeywordResponses(): VoiceML.NlpKeywordResponse[]
        
        /**
        * Returns an array of QnaResponse elements, each representing an answer to the question in the eventArgs.transcript. It has properties answer(a string with the ML's response) and answerStatusCode, which can take values 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningUpdateEventArgs/methods/VoiceML.ListeningUpdateEventArgs-getQnaResponses.md Edit}
        */
        getQnaResponses(): VoiceML.QnaResponse[]
        
        /**
        * Specifies whether the transcription returned is final, or partial (interim) which can be updated later as the sentence continues.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningUpdateEventArgs/properties/VoiceML.ListeningUpdateEventArgs-isFinalTranscription.md Edit}
        
        * @readonly
        */
        isFinalTranscription: boolean
        
        /**
        * Returns the transcription from the Automatic Speech Recognition. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.ListeningUpdateEventArgs/properties/VoiceML.ListeningUpdateEventArgs-transcription.md Edit}
        
        * @readonly
        */
        transcription: string
        
    }

}

declare namespace VoiceML {
    /**
    * May be returned when [enableSystemCommands()](https://lensstudio.snapchat.com/api/classes/VoiceMLModule#enableSystemCommands) API is used.
    * The NlpCommandResponse contains the results of the servers' NLP command model classification on the last sentence and indicates that a predetermined system command was detected.
    * Current supported commands:
    
    * “Take a Snap”: takes a snapshot.
    * “Start Recording”: starts a video recording if not already started.
    * "Stop Recording”: stops an ongoing video recording, if applicable.
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpCommandResponse/VoiceML.NlpCommandResponse-description.md Edit}
    */
    interface NlpCommandResponse extends VoiceML.BaseNlpResponse {
        /**
        * The classification result of the NLP command model for the sentence. For example, for the sentence "Take a snap!" with the [enableSystemCommands()](https://lensstudio.snapchat.com/api/classes/VoiceMLModule#enableSystemCommands) API enabled, the result will be a [NlpCommandResponse](https://lensstudio.snapchat.com/api/classes/VoiceMLModule/NlpCommandResponse) holding a `take a snap` [Command](https://lensstudio.snapchat.com/api/classes/VoiceMLModule/NlpCommandRespons#command). In addition, the following values could be returned: 
        
        * `#SNAP_ERROR_INCONCLUSIVE`: two or more commands detected.
        * `#SNAP_ERROR_INDECISIVE`: no command detected.
        * `#SNAP_ERROR_NONVERBAL`: no transcribable human voice was detected.
        * `#SNAP_ERROR_SILENCE`: silence was detected. 
        
        * Anything starting with `#SNAP_ERROR_`: Errors that are not currently defined in this documentation and should be ignored.
        
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpCommandResponse/properties/VoiceML.NlpCommandResponse-command.md Edit}
        
        * @readonly
        */
        command: string
        
    }

}

declare namespace VoiceML {
    /**
    * Specifies which NLP Intent model should run to classify the transcription of the input audio. NLP Intent classification meant to extract the meaning of a sentence rather than detecting certain keywords. Multiple intent models can be used on the same transcription, and will run only on complete sentences (`isFinalTranscription = True`). Supported intent models: `VOICE_ENABLED_UI`. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpIntentModel/VoiceML.NlpIntentModel-description.md Edit}
    */
    interface NlpIntentModel extends VoiceML.BaseNlpModel {
        /**
        * A list of the intents the `Intent ML` engine should use when classifying the sentence, for example `["back", "next"]`, in case no list provided, all possible intents of the model are used.  
        
        * Supported intents for `VOICE_ENABLED_UI`: `next`, `back`, `left`, `right`, `up`, `down`, `first`, `second`, `third`, `fourth`, `fifth`, `sixth`, `seventh`, `eighth`, `ninth`, `tenth`. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpIntentModel/properties/VoiceML.NlpIntentModel-possibleIntents.md Edit}
        */
        possibleIntents: string[]
        
    }

}

declare namespace VoiceML {
    /**
    * Returned when [NlpIntentModel](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpIntentModel) was specificed in the ListeningOptions, it contains the results of the NLP Intent model classification on the last sentence. `NlpIntentResponse` will only run on complete sentences (`isFinalTranscription = true`).  
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpIntentResponse/VoiceML.NlpIntentResponse-description.md Edit}
    */
    interface NlpIntentResponse extends VoiceML.BaseNlpResponse {
        /**
        * The classification result of the NLP intent model for the sentence. For example for the sentence "show me the next item" with the model `VOICE_ENABLED_UI`, the result will be `next` for `VOICE_ENABLED_UI` the following intents are valid: `next`, `back`, `left`, `right`, `up`, `down`, `first`, `second`, `third`, `fourth`, `fifth`, `sixth`, `seventh`, `eighth`, `ninth`, `tenth`. In addition, the following values could be returned: 
        
        * `#SNAP_ERROR_INCONCLUSIVE`: two or more intents detected.
        * `#SNAP_ERROR_INDECISIVE`: no intent detected.
        * `#SNAP_ERROR_NONVERBAL`: no transcribable human voice was detected.
        * `#SNAP_ERROR_SILENCE`: silence was detected. 
        
        * Anything starting with `#SNAP_ERROR_`: Errors that are not currently defined in this documentation and should be ignored.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpIntentResponse/properties/VoiceML.NlpIntentResponse-intent.md Edit}
        
        * @readonly
        */
        intent: string
        
    }

}

declare namespace VoiceML {
    /**
    * Contains helper functions for NlpIntentModel.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpIntentsModelOptions/VoiceML.NlpIntentsModelOptions-description.md Edit}
    */
    interface NlpIntentsModelOptions {
    }

}
declare namespace VoiceML {
    namespace NlpIntentsModelOptions {
        /**
        * Creates a new NlpIntentModel.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpIntentsModelOptions/methods/VoiceML.NlpIntentsModelOptions-create.md Edit}
        */
        export function create(intentModelName: string): VoiceML.NlpIntentModel
        
    
    }

}

declare namespace VoiceML {
    /**
    * Used to detect usage of certain keywords from the input audio.
    
    * Keyword detection (whose results will be returned in [NlpKeywordResponse](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpKeywordResponse) in the [ListeningUpdateEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLListeningUpdateEventArgs)) can happen in the mid input sentence (and in such case the the isFinalTranscription=false) or can happen at the end of the sentence (isFinalTranscription=true). Mid sentence detection have closer proximity to the time the word was spoken, but might be less accurate. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpKeywordModel/VoiceML.NlpKeywordModel-description.md Edit}
    */
    interface NlpKeywordModel extends VoiceML.BaseNlpModel {
        /**
        * Adds a keyword group to the keywords model, the group name will be returned in NlpKeywordResponse to indicate one of the keywords in the group has been detected. Groups are used to include synonyms, or context similar words.  `addKeywordGroup("walk", ["walk", "jog", "strolls"])`. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpKeywordModel/methods/VoiceML.NlpKeywordModel-addKeywordGroup.md Edit}
        */
        addKeywordGroup(name: string, keywords: string[]): void
        
        /**
        * Holds group of keywords to be used in the ML model. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpKeywordModel/properties/VoiceML.NlpKeywordModel-keywordGroups.md Edit}
        
        * @readonly
        */
        keywordGroups: VoiceML.KeywordModelGroup[]
        
    }

}

declare namespace VoiceML {
    /**
    * Contains helper functions for NlpKeywordModel.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpKeywordModelOptions/VoiceML.NlpKeywordModelOptions-description.md Edit}
    */
    interface NlpKeywordModelOptions {
    }

}
declare namespace VoiceML {
    namespace NlpKeywordModelOptions {
        /**
        * Creates a new NlpKeywordModel.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpKeywordModelOptions/methods/VoiceML.NlpKeywordModelOptions-create.md Edit}
        */
        export function create(): VoiceML.NlpKeywordModel
        
    
    }

}

declare namespace VoiceML {
    /**
    * NlpKeywordResponse will be returned if KeywordModel has been supplied as an input model in the ListeningOptions.  The keyword model allows detection of keywords (or short phrases) in an input audio. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpKeywordResponse/VoiceML.NlpKeywordResponse-description.md Edit}
    */
    interface NlpKeywordResponse extends VoiceML.BaseNlpResponse {
        /**
        * The keywords detected by the NLP keyword detection model.  In addition, the following values could be returned: 
        
        * `#SNAP_ERROR_INCONCLUSIVE`: two or more intents detected.
        * `#SNAP_ERROR_INDECISIVE`: no intent detected.
        * `#SNAP_ERROR_NONVERBAL`: no transcribable human voice was detected.
        * `#SNAP_ERROR_SILENCE`: silence was detected.
        
        * Anything starting with `#SNAP_ERROR_`: Errors that are not currently defined in this documentation and should be ignored
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpKeywordResponse/properties/VoiceML.NlpKeywordResponse-keywords.md Edit}
        
        * @readonly
        */
        keywords: string[]
        
    }

}

declare namespace VoiceML {
    /**
    * The NLP Response Status indicates wether the NLP was successful in parsing the sentence. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpResponseStatus/VoiceML.NlpResponseStatus-description.md Edit}
    */
    interface NlpResponseStatus extends ScriptObject {
        /**
        * Nlp status code coming from the ML engine. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpResponseStatus/properties/VoiceML.NlpResponseStatus-code.md Edit}
        
        * @readonly
        */
        code: number
        
        /**
        * Nlp status description coming from the ML engine. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.NlpResponseStatus/properties/VoiceML.NlpResponseStatus-description.md Edit}
        
        * @readonly
        */
        description: string
        
    }

}

declare namespace VoiceML {
    /**
    * The `PostProcessingAction` is the base class for `QnaAction` and other post processing actions that need to processed after the transcription phase.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.PostProcessingAction/VoiceML.PostProcessingAction-description.md Edit}
    */
    interface PostProcessingAction extends ScriptObject {
    }

}

declare namespace VoiceML {
    /**
    * The `PostProcessingActionResponse` is the base class for `QnaActionRespose` and other post processing actions responses. It holds the id and status properties for all deriving objects.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.PostProcessingActionResponse/VoiceML.PostProcessingActionResponse-description.md Edit}
    */
    interface PostProcessingActionResponse extends ScriptObject {
        /**
        * The id of the `PostProcessingAction` so returning results can be tied to post processing actions
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.PostProcessingActionResponse/properties/VoiceML.PostProcessingActionResponse-id.md Edit}
        
        * @readonly
        */
        id: number
        
        /**
        * The status holds the description and code for the post processing actions. In case of success the description will be empty and the code will be 0
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.PostProcessingActionResponse/properties/VoiceML.PostProcessingActionResponse-status.md Edit}
        
        * @readonly
        */
        status: VoiceML.PostProcessingActionResponseStatus
        
    }

}

declare namespace VoiceML {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.PostProcessingActionResponseStatus/VoiceML.PostProcessingActionResponseStatus-description.md Edit}
    */
    interface PostProcessingActionResponseStatus extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.PostProcessingActionResponseStatus/properties/VoiceML.PostProcessingActionResponseStatus-code.md Edit}
        
        * @readonly
        */
        code: number
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.PostProcessingActionResponseStatus/properties/VoiceML.PostProcessingActionResponseStatus-description.md Edit}
        
        * @readonly
        */
        description: string
        
    }

}

declare namespace VoiceML {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.QnaAction/VoiceML.QnaAction-description.md Edit}
    */
    interface QnaAction extends VoiceML.PostProcessingAction {
        /**
        * The context passed to the QnaAction. The QnaAction is passed to VoiceML.listeningOptions to use the DialogML within the VoiceML automatically
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.QnaAction/properties/VoiceML.QnaAction-context.md Edit}
        */
        context: string
        
    }

}
declare namespace VoiceML {
    namespace QnaAction {
        /**
        * Parameter: string context. Creates a QnaAction object with a given context i.e. source text for the Dialog ML. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.QnaAction/methods/VoiceML.QnaAction-create.md Edit}
        */
        export function create(context: string): VoiceML.QnaAction
        
    
    }

}

declare namespace VoiceML {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.QnaResponse/VoiceML.QnaResponse-description.md Edit}
    */
    interface QnaResponse extends VoiceML.PostProcessingActionResponse {
        /**
        * The response string the module came up with in response to the eventArgs.transcript
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.QnaResponse/properties/VoiceML.QnaResponse-answer.md Edit}
        
        * @readonly
        */
        answer: string
        
        /**
        * The status of the QnaResponse
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.QnaResponse/properties/VoiceML.QnaResponse-answerStatusCode.md Edit}
        
        * @readonly
        */
        answerStatusCode: number
        
    }

}

declare namespace VoiceML {
    /**
    * Speech context is used in cases where specific words are expected from the users, the transcription accuracy of these words can be improved, by straightening their likelihood in context. The strength is scaled 1-10 (10 being the strongest increase) the default value is 5.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.SpeechContext/VoiceML.SpeechContext-description.md Edit}
    */
    interface SpeechContext extends ScriptObject {
        /**
        * The strength is scaled 1-10 (10 being the strongest increase) the default value is 5.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.SpeechContext/properties/VoiceML.SpeechContext-boost.md Edit}
        
        * @readonly
        */
        boost: number
        
        /**
        * Array of keyword to enhance by the ML engine. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.SpeechContext/properties/VoiceML.SpeechContext-phrases.md Edit}
        
        * @readonly
        */
        phrases: string[]
        
    }

}

declare namespace VoiceML {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.TranscriptionOptions/VoiceML.TranscriptionOptions-description.md Edit}
    
    * @private
    */
    interface TranscriptionOptions extends ScriptObject {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.TranscriptionOptions/methods/VoiceML.TranscriptionOptions-addSpeechContext.md Edit}
        
        * @private
        */
        addSpeechContext(phrases: string[], boost: number): void
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.TranscriptionOptions/properties/VoiceML.TranscriptionOptions-languageCode.md Edit}
        
        * @private
        */
        languageCode: string
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.TranscriptionOptions/properties/VoiceML.TranscriptionOptions-speechContexts.md Edit}
        
        * @readonly
        
        * @private
        */
        speechContexts: VoiceML.SpeechContext[]
        
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.TranscriptionOptions/properties/VoiceML.TranscriptionOptions-speechRecognizer.md Edit}
        
        * @private
        */
        speechRecognizer: string
        
    }

}
declare namespace VoiceML {
    namespace TranscriptionOptions {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceML.TranscriptionOptions/methods/VoiceML.TranscriptionOptions-create.md Edit}
        
        * @private
        */
        export function create(): VoiceML.TranscriptionOptions
        
    
    }

}

/**
* VoiceML Module allows voice input and commands. It enables transciption of the speech, detecting keywords within the transcription, intents as well as system commands (such as "Take a Snap"). You can use one VoiceML Module per Lens. 

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/VoiceMLModule-description.md Edit}
*/
interface VoiceMLModule extends Asset {
    /**
    * Allows the user to provide voice commands for the VoiceML to execute on behalf of the users.  Current supported commands: "Take a Snap", "Start Recording", "Stop Recording". In case a command was detected, it will be automtically executed by the system and returned as part of the [NlpCommandResponse](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpCommandResponse) in the `onListeningUpdate` callback. You can retrieve the command that was executed using the following snippet: 
    
    * ```js
    * var onUpdateListeningEventHandler = function(eventArgs) {
    *     var commandResponses = eventArgs.getCommandResponses();
    *     var nlpResponseText = "";
    
    *     for (var i = 0; i < commandResponses.length; i++) {
    *         var commandResponse = commandResponses[i];
    *         nlpResponseText += "Command Response: " + commandResponse.modelName + "\n command: " + commandResponse.command;     
    *     }
    * }
    * ``` 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/methods/VoiceMLModule-enableSystemCommands.md Edit}
    */
    enableSystemCommands(): void
    
    /**
    * Starts transcribing the user audio, the NLP model is connected and sends back results using an event, optionally could request for transcription and interim results.  Notice, you can only `startListening`, after microphone permissions have been granted. It is recommended to use `startListening` method only after `onListeningEnabled` callback was called.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/methods/VoiceMLModule-startListening.md Edit}
    
    * @exposesUserData
    */
    startListening(options: VoiceML.ListeningOptions): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/methods/VoiceMLModule-startTranscription.md Edit}
    
    * @exposesUserData
    
    * @private
    */
    startTranscription(options: VoiceML.TranscriptionOptions): void
    
    /**
    * Stops voice commands. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/methods/VoiceMLModule-stopListening.md Edit}
    */
    stopListening(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/methods/VoiceMLModule-stopTranscription.md Edit}
    
    * @private
    */
    stopTranscription(): void
    
    /**
    * Registers a callback which will be called when microphone permissions are taken from the lens. `stopListening()` is implicitly called in such case. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/properties/VoiceMLModule-onListeningDisabled.md Edit}
    
    * @readonly
    */
    onListeningDisabled: event0<void>
    
    /**
    * Registers a callback which will be called when microphone permissions are granted to the Lens, the microphone is initialized, and is actively listening. The expected design pattern is to start the listening session once those permissions have been granted: 
    
    * ```js
    * //@input Asset.VoiceMLModule vmlModule
    * var onListeningEnabledHandler = function(){
    *     script.vmlModule.startListening(options);  
    * }
    * script.vmlModule.onListeningEnabled.add(onListeningEnabledHandler); 
    * ```
    
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/properties/VoiceMLModule-onListeningEnabled.md Edit}
    
    * @readonly
    */
    onListeningEnabled: event0<void>
    
    /**
    * Registers a callback, which will be called in case the VoiceML module can't process the inputs. Most errors are due to network connectivity, or misconfigured NLP inputs. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/properties/VoiceMLModule-onListeningError.md Edit}
    
    * @readonly
    */
    onListeningError: event1<VoiceML.ListeningErrorEventArgs, void>
    
    /**
    * Registers a callback, which will be called with interim transcription or related NLP models. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/properties/VoiceMLModule-onListeningUpdate.md Edit}
    
    * @readonly
    */
    onListeningUpdate: event1<VoiceML.ListeningUpdateEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/properties/VoiceMLModule-onTranscriptionError.md Edit}
    
    * @readonly
    
    * @private
    */
    onTranscriptionError: event1<TranscriptionErrorEventArgs, void>
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule/properties/VoiceMLModule-onTranscriptionUpdate.md Edit}
    
    * @readonly
    
    * @private
    */
    onTranscriptionUpdate: event1<TranscriptionUpdateEventArgs, void>
    
}

declare namespace VoiceMLModule {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.AnswerStatusCodes/VoiceMLModule.AnswerStatusCodes-description.md Edit}
    */
    enum AnswerStatusCodes {
        /**
        * Should never show up in javascript frontend. Default value.
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.AnswerStatusCodes/properties/VoiceMLModule.AnswerStatusCodes-UNSET.md Edit}
        */
        UNSET,
        /**
        * Answer found
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.AnswerStatusCodes/properties/VoiceMLModule.AnswerStatusCodes-STATUS_OK.md Edit}
        */
        STATUS_OK,
        /**
        * User transcript was not a question
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.AnswerStatusCodes/properties/VoiceMLModule.AnswerStatusCodes-NOT_A_QUESTION.md Edit}
        */
        NOT_A_QUESTION,
        /**
        * There was a question, but we don't know the answer
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.AnswerStatusCodes/properties/VoiceMLModule.AnswerStatusCodes-NO_ANSWER_FOUND.md Edit}
        */
        NO_ANSWER_FOUND
    }

}

declare namespace VoiceMLModule {
    /**
    * Status Codes for NLP Responses. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.NlpResponsesStatusCodes/VoiceMLModule.NlpResponsesStatusCodes-description.md Edit}
    */
    enum NlpResponsesStatusCodes {
        /**
        * Ok Status Code for NLP Responses, this indicates a successful processing of the NLP model. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.NlpResponsesStatusCodes/properties/VoiceMLModule.NlpResponsesStatusCodes-OK.md Edit}
        */
        OK,
        /**
        * Error Status Code for NLP Responses, this indicates an unsuccessful processing of the NLP model. 
        
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.NlpResponsesStatusCodes/properties/VoiceMLModule.NlpResponsesStatusCodes-ERROR.md Edit}
        */
        ERROR
    }

}

declare namespace VoiceMLModule {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.SpeechRecognizer/VoiceMLModule.SpeechRecognizer-description.md Edit}
    */
    interface SpeechRecognizer {
    }

}
declare namespace VoiceMLModule {
    namespace SpeechRecognizer {
        /**
        * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/VoiceMLModule.SpeechRecognizer/properties/VoiceMLModule.SpeechRecognizer-Default.md Edit}
        */
        let Default: string
        
    
    }

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Weather/Weather-description.md Edit}

* @private
*/
interface Weather {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Weather/properties/Weather-currentCondition.md Edit}
    
    * @readonly
    
    * @private
    */
    currentCondition: WeatherCondition
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Weather/properties/Weather-currentConditionLocalized.md Edit}
    
    * @readonly
    
    * @private
    */
    currentConditionLocalized: string
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Weather/properties/Weather-temperatureInCelsius.md Edit}
    
    * @readonly
    
    * @private
    */
    temperatureInCelsius: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Weather/properties/Weather-temperatureInFahrenheit.md Edit}
    
    * @readonly
    
    * @private
    */
    temperatureInFahrenheit: number
    
}

/**
* Types of weather returned by [UserContextSystem's](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#UserContextSystem) `requestWeatherCondition()` callback.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/WeatherCondition-description.md Edit}
*/
declare enum WeatherCondition {
    /**
    * Unknown or unsupported weather condition
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-Unknown.md Edit}
    */
    Unknown,
    /**
    * Lightning
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-Lightning.md Edit}
    */
    Lightning,
    /**
    * Low Visibility
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-LowVisibility.md Edit}
    */
    LowVisibility,
    /**
    * Partly Cloudy
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-PartlyCloudy.md Edit}
    */
    PartlyCloudy,
    /**
    * Clear Night
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-ClearNight.md Edit}
    */
    ClearNight,
    /**
    * Cloudy
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-Cloudy.md Edit}
    */
    Cloudy,
    /**
    * Rainy
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-Rainy.md Edit}
    */
    Rainy,
    /**
    * Hail
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-Hail.md Edit}
    */
    Hail,
    /**
    * Snow
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-Snow.md Edit}
    */
    Snow,
    /**
    * Windy
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-Windy.md Edit}
    */
    Windy,
    /**
    * Sunny
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherCondition/properties/WeatherCondition-Sunny.md Edit}
    */
    Sunny
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherSystem/WeatherSystem-description.md Edit}

* @private
*/
interface WeatherSystem extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherSystem/methods/WeatherSystem-requestWeatherAtLocation.md Edit}
    
    * @private
    */
    requestWeatherAtLocation(lattitude: number, longitude: number, successCallback: (weather: Weather) => void, failureCallback: (error: string) => void): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeatherSystem/methods/WeatherSystem-requestWeatherForUser.md Edit}
    
    * @private
    */
    requestWeatherForUser(userLocation: UserLocationInfo, successCallback: (weather: Weather) => void, failureCallback: (error: string) => void): void
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeightedMode/WeightedMode-description.md Edit}
*/
declare enum WeightedMode {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeightedMode/properties/WeightedMode-Both.md Edit}
    */
    Both,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeightedMode/properties/WeightedMode-Left.md Edit}
    */
    Left,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeightedMode/properties/WeightedMode-None.md Edit}
    */
    None,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WeightedMode/properties/WeightedMode-Right.md Edit}
    */
    Right
}

/**
* Groups physics objects in its subtree into an independent world simulation.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldComponent/WorldComponent-description.md Edit}
*/
interface WorldComponent extends Component {
    /**
    * Create an intersection probe for a specific world.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldComponent/methods/WorldComponent-createProbe.md Edit}
    */
    createProbe(): Probe
    
    /**
    * Update order of this world relative to other worlds (lower values are earlier). The implicit root world order is 0, so worlds with negative order will update before the root world, and worlds with non-negative order update after.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldComponent/properties/WorldComponent-updateOrder.md Edit}
    */
    updateOrder: number
    
    /**
    * Reference to world settings. If not set, use the default world settings for the project.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldComponent/properties/WorldComponent-worldSettings.md Edit}
    */
    worldSettings: Physics.WorldSettingsAsset
    
}

/**
* Holds settings for world mesh tracking in DeviceTracking component. Accessible through DeviceTracking.worldOptions.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/WorldOptions-description.md Edit}
*/
interface WorldOptions extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/methods/WorldOptions-saveSpatialMap.md Edit}
    
    * @experimental
    
    * @private
    */
    saveSpatialMap(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-adjustSpectaclesSixDofWithCameraHeight.md Edit}
    
    * @private
    */
    adjustSpectaclesSixDofWithCameraHeight: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-adjustSpectaclesSixDofWithDepth.md Edit}
    
    * @private
    */
    adjustSpectaclesSixDofWithDepth: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-driftCorrectionType.md Edit}
    
    * @experimental
    
    * @wearableOnly
    
    * @private
    */
    driftCorrectionType: DriftCorrectionType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-enablePlaneClassification.md Edit}
    
    * @experimental
    
    * @wearableOnly
    
    * @private
    */
    enablePlaneClassification: boolean
    
    /**
    * Enables or disables world mesh classification gathering.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-enableWorldMeshesClassificationTracking.md Edit}
    */
    enableWorldMeshesClassificationTracking: boolean
    
    /**
    * Enables or disables the generation of world meshes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-enableWorldMeshesTracking.md Edit}
    */
    enableWorldMeshesTracking: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-nativePlaneTrackingType.md Edit}
    */
    nativePlaneTrackingType: NativePlaneTrackingType
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-pointCloudEnabled.md Edit}
    */
    pointCloudEnabled: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-spatialMapMode.md Edit}
    
    * @experimental
    
    * @private
    */
    spatialMapMode: SpatialMapMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldOptions/properties/WorldOptions-spatialMapSessionId.md Edit}
    
    * @experimental
    
    * @private
    */
    spatialMapSessionId: string
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQuery/WorldQuery-description.md Edit}

* @deprecated

* @experimental
*/
interface WorldQuery extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQuery/methods/WorldQuery-hitTest.md Edit}
    
    * @deprecated
    
    * @experimental
    */
    hitTest(rayStart: vec3, rayEnd: vec3): WorldQueryHitTestResult
    
}
declare namespace WorldQuery {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQuery/methods/WorldQuery-createContext.md Edit}
    
    * @deprecated
    
    * @experimental
    */
    export function createContext(): WorldQuery
    

}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQueryHitTestResult/WorldQueryHitTestResult-description.md Edit}

* @wearableOnly
*/
interface WorldQueryHitTestResult extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQueryHitTestResult/properties/WorldQueryHitTestResult-normal.md Edit}
    
    * @readonly
    
    * @wearableOnly
    */
    normal: vec3
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQueryHitTestResult/properties/WorldQueryHitTestResult-position.md Edit}
    
    * @readonly
    
    * @wearableOnly
    */
    position: vec3
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQueryModule/WorldQueryModule-description.md Edit}

* @wearableOnly
*/
interface WorldQueryModule extends Asset {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQueryModule/methods/WorldQueryModule-createHitTestSession.md Edit}
    
    * @wearableOnly
    */
    createHitTestSession(): HitTestSession
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldQueryModule/methods/WorldQueryModule-createHitTestSessionWithOptions.md Edit}
    
    * @wearableOnly
    */
    createHitTestSessionWithOptions(options: HitTestSessionOptions): HitTestSession
    
}

/**
* Provider for RenderMesh data representing the estimated shape of real world objects generated from depth information. Only available when world mesh tracking is supported and enabled.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/WorldRenderObjectProvider-description.md Edit}
*/
interface WorldRenderObjectProvider extends RenderObjectProvider {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/methods/WorldRenderObjectProvider-reset.md Edit}
    
    * @private
    */
    reset(): void
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-depthModelAsset.md Edit}
    
    * @private
    */
    depthModelAsset: BinAsset
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-enableDepthModelBasedTracking.md Edit}
    
    * @private
    */
    enableDepthModelBasedTracking: boolean
    
    /**
    * Enable or disable world mesh tracking.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-enableWorldMeshesTracking.md Edit}
    */
    enableWorldMeshesTracking: boolean
    
    /**
    * Returns the number of faces of the mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-faceCount.md Edit}
    
    * @readonly
    */
    faceCount: number
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-forceInternalMeshBuilder.md Edit}
    
    * @private
    */
    forceInternalMeshBuilder: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-internalMeshBuilderConfig.md Edit}
    
    * @readonly
    
    * @private
    */
    internalMeshBuilderConfig: InternalMeshBuilderConfig
    
    /**
    * Mesh classification format being used.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-meshClassificationFormat.md Edit}
    */
    meshClassificationFormat: MeshClassificationFormat
    
    /**
    * Enable or disable normal direction usage.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-useNormals.md Edit}
    */
    useNormals: boolean
    
    /**
    * Returns the number of vertices of the mesh.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldRenderObjectProvider/properties/WorldRenderObjectProvider-vertexCount.md Edit}
    
    * @readonly
    */
    vertexCount: number
    
}

/**
* Provides information about whether certain world tracking features are supported by the device.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingCapabilities/WorldTrackingCapabilities-description.md Edit}
*/
interface WorldTrackingCapabilities extends ScriptObject {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingCapabilities/properties/WorldTrackingCapabilities-planesTrackingSupported.md Edit}
    
    * @readonly
    */
    planesTrackingSupported: boolean
    
    /**
    * Returns true if the device supports scene reconstruction.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingCapabilities/properties/WorldTrackingCapabilities-sceneReconstructionSupported.md Edit}
    
    * @readonly
    */
    sceneReconstructionSupported: boolean
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingCapabilities/properties/WorldTrackingCapabilities-trackedWorldPointsSupported.md Edit}
    
    * @readonly
    */
    trackedWorldPointsSupported: boolean
    
}

/**
* Triggered when new world tracking meshes are detected. Only available when a Device Tracking component is in the scene, and world mesh tracking is supported and enabled.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingMeshesAddedEvent/WorldTrackingMeshesAddedEvent-description.md Edit}
*/
interface WorldTrackingMeshesAddedEvent extends SceneEvent {
    /**
    * Returns an array of newly added Tracked Meshes.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingMeshesAddedEvent/methods/WorldTrackingMeshesAddedEvent-getMeshes.md Edit}
    */
    getMeshes(): TrackedMesh[]
    
}

/**
* Triggered when some world tracking meshes are no longer detected. Only available when a Device Tracking component is in the scene, and world mesh tracking is supported and enabled.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingMeshesRemovedEvent/WorldTrackingMeshesRemovedEvent-description.md Edit}
*/
interface WorldTrackingMeshesRemovedEvent extends SceneEvent {
    /**
    * Returns an array of TrackedMeshes that are no longer detected.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingMeshesRemovedEvent/methods/WorldTrackingMeshesRemovedEvent-getMeshes.md Edit}
    */
    getMeshes(): TrackedMesh[]
    
}

/**
* Triggered when world tracking meshes are updated. Only available when a Device Tracking component is in the scene, and world mesh tracking is supported and enabled.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingMeshesUpdatedEvent/WorldTrackingMeshesUpdatedEvent-description.md Edit}
*/
interface WorldTrackingMeshesUpdatedEvent extends SceneEvent {
    /**
    * Returns an array of TrackedMeshes that were updated.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingMeshesUpdatedEvent/methods/WorldTrackingMeshesUpdatedEvent-getMeshes.md Edit}
    */
    getMeshes(): TrackedMesh[]
    
}

/**
* Triggered when the world tracking mode has changed.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingModeChangedEvent/WorldTrackingModeChangedEvent-description.md Edit}

* @private
*/
interface WorldTrackingModeChangedEvent extends SceneEvent {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingModeChangedEvent/methods/WorldTrackingModeChangedEvent-getCurrentTrackingMode.md Edit}
    
    * @private
    */
    getCurrentTrackingMode(): TrackingMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingModeChangedEvent/methods/WorldTrackingModeChangedEvent-getPreviousTrackingMode.md Edit}
    
    * @private
    */
    getPreviousTrackingMode(): TrackingMode
    
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingModeChangedEvent/methods/WorldTrackingModeChangedEvent-getTrackingMode.md Edit}
    
    * @deprecated
    
    * @private
    */
    getTrackingMode(): string
    
}

/**
* Triggered when plane(s) are newly detected. The `worldOptions.nativePlaneTrackingType` must be set to anything other than `NativePlaneTrackingType.None`. In addition, [Device Tracking](https://lensstudio.snapchat.com/api/classes/devicetracking) component must be set to `World` mode to orient the Camera relative to the planes correctly.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingPlanesAddedEvent/WorldTrackingPlanesAddedEvent-description.md Edit}
*/
interface WorldTrackingPlanesAddedEvent extends SceneEvent {
    /**
    * Returns an array of newly added [TrackedPlanes](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#trackedplane).
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingPlanesAddedEvent/methods/WorldTrackingPlanesAddedEvent-getPlanes.md Edit}
    */
    getPlanes(): TrackedPlane[]
    
}

/**
* Triggered when plane(s) are no longer detected.  This usually happens when two planes merge into one.  Planes persist when no longer seen by camera(s) and when previously detected objects move (e.g. a door is opened) to create a static scene. [Device Tracking](https://lensstudio.snapchat.com/api/classes/devicetracking) component must be set to `World` mode to orient the Camera relative to the planes correctly.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingPlanesRemovedEvent/WorldTrackingPlanesRemovedEvent-description.md Edit}
*/
interface WorldTrackingPlanesRemovedEvent extends SceneEvent {
    /**
    * Returns an array of [TrackedPlanes](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#trackedplane) that are no longer detected. 
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingPlanesRemovedEvent/methods/WorldTrackingPlanesRemovedEvent-getPlanes.md Edit}
    */
    getPlanes(): TrackedPlane[]
    
}

/**
* Triggered when currently detected plane(s) are updated.  This usually happens when a plane grows in size. The `worldOptions.nativePlaneTrackingType` must be set to anything other than `NativePlaneTrackingType.None`. In addition, [Device Tracking](https://lensstudio.snapchat.com/api/classes/devicetracking) component must be set to `World` mode to orient the Camera relative to the planes correctly.


* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingPlanesUpdatedEvent/WorldTrackingPlanesUpdatedEvent-description.md Edit}
*/
interface WorldTrackingPlanesUpdatedEvent extends SceneEvent {
    /**
    * Returns an array of [TrackedPlanes](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#trackedplane) that were updated.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldTrackingPlanesUpdatedEvent/methods/WorldTrackingPlanesUpdatedEvent-getPlanes.md Edit}
    */
    getPlanes(): TrackedPlane[]
    
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WorldUnderstandingModule/WorldUnderstandingModule-description.md Edit}
*/
interface WorldUnderstandingModule extends Asset {
}

/**
* Describes how a texture should be sampled when using coordinates outside of the normal range.

* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WrapMode/WrapMode-description.md Edit}
*/
declare enum WrapMode {
    /**
    * Take the average of the border color and stretch it out.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WrapMode/properties/WrapMode-ClampToEdge.md Edit}
    */
    ClampToEdge,
    /**
    * Repeats the current texture at the edge again.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WrapMode/properties/WrapMode-Repeat.md Edit}
    */
    Repeat,
    /**
    * Repeats the current texture at the edge again, but flipping the orientation.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WrapMode/properties/WrapMode-MirroredRepeat.md Edit}
    */
    MirroredRepeat,
    /**
    * Take the border color at the edge of a texture and stretch it out.
    
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WrapMode/properties/WrapMode-ClampToBorder.md Edit}
    */
    ClampToBorder
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WritePermissions/WritePermissions-description.md Edit}

* @private
*/
declare enum WritePermissions {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WritePermissions/properties/WritePermissions-User.md Edit}
    
    * @private
    */
    User,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WritePermissions/properties/WritePermissions-Session.md Edit}
    
    * @private
    */
    Session,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/WritePermissions/properties/WritePermissions-Global.md Edit}
    
    * @private
    */
    Global
}

/**
* {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/Zodiac-description.md Edit}
*/
declare enum Zodiac {
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Aquarius.md Edit}
    */
    Aquarius,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Aries.md Edit}
    */
    Aries,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Cancer.md Edit}
    */
    Cancer,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Capricorn.md Edit}
    */
    Capricorn,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Gemini.md Edit}
    */
    Gemini,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Leo.md Edit}
    */
    Leo,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Libra.md Edit}
    */
    Libra,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Pisces.md Edit}
    */
    Pisces,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Sagittarius.md Edit}
    */
    Sagittarius,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Scorpio.md Edit}
    */
    Scorpio,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Taurus.md Edit}
    */
    Taurus,
    /**
    * {@link https://github.sc-corp.net/Snapchat/studio3d-documentation/edit/main/api_generation/./api_scenarium/input/api_text_descriptions/Zodiac/properties/Zodiac-Virgo.md Edit}
    */
    Virgo
}



declare var script : ScriptComponent;

interface event0<R> {
    add(callback: () => R) : EventRegistration
    remove(eventRegistration: EventRegistration) : void
}
interface event1<T0,R> {
    add(callback: (arg0:T0) => R) : EventRegistration
    remove(eventRegistration: EventRegistration) : void
}
interface event2<T0,T1,R> {
    add(callback: (arg0:T0, arg1:T1) => R) : EventRegistration
    remove(eventRegistration: EventRegistration) : void
}
interface event3<T0,T1,T2,R> {
    add(callback: (arg0:T0, arg1:T1, arg2:T2) => R) : EventRegistration
    remove(eventRegistration: EventRegistration) : void
}
interface event4<T0,T1,T2,T3,R> {
    add(callback: (arg0:T0, arg1:T1, arg2:T2, arg3:T3) => R) : EventRegistration
    remove(eventRegistration: EventRegistration) : void
}
interface event5<T0,T1,T2,T3,T4,R> {
    add(callback: (arg0:T0, arg1:T1, arg2:T2, arg3:T3, arg4:T4) => R) : EventRegistration
    remove(eventRegistration: EventRegistration) : void
}

/**
* Not for real use. Contains a fake instance of every class. Helpful for checking the API of a class.

* @deprecated
*/
declare namespace _palette {
    /**
    * The base class for data accessible through [DataComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DataComponent).
    
    * @private
    */
    let AbstractData: AbstractData
    
    /**
    * @private
    */
    let AccessLevel: AccessLevel
    
    /**
    * Interface for sending Blizzard analytics events. Accessible from [DataComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#DataComponent).
    
    * @private
    */
    let AnalyticsSystem: AnalyticsSystem
    
    /**
    * An object containing the position of an object relative to a LocationAsset. 
    */
    let Anchor: Anchor
    
    /**
    * Controls an animated texture resource. Can be accessed from [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#texture--control) on an animated texture.
    * See also: [2D Animation Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/2d/2d-animation).
    */
    let AnimatedTextureFileProvider: AnimatedTextureFileProvider
    
    /**
    * Used by [AnimationMixer](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AnimationMixer) to animate a single object in the hierarchy.
    * These are automatically added to SceneObjects when importing animated FBX files.
    * See also: [Playing 3D Animation Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/additional-examples/playing-3d-animation), [AnimationMixer](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AnimationMixer), [AnimationLayer](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#AnimationLayer).
    
    * @deprecated
    */
    let Animation: Animation
    
    /**
    * Asset that contains multiple animation layers. Animation assets themselves do not handle playing or orchestrating animations. This is left to the animation player component to handle.
    */
    let AnimationAsset: AnimationAsset
    
    /**
    * Animation Clip is what an Animation Player uses to manage playback for a specific animation. It defines that animation by referencing an Animation Asset and providing start and end points, playback speed and direction, and blending information. 
    */
    let AnimationClip: AnimationClip
    
    /**
    * Used by [AnimationMixerLayer](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AnimationMixerLayer) for setting animation looping behavior.
    
    * @deprecated
    */
    let AnimationClip_PostInfinity: AnimationClip.PostInfinity
    
    /**
    * Used by [AnimationMixerLayer](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AnimationMixerLayer) for setting animation clip range type.
    
    * @deprecated
    */
    let AnimationClip_RangeType: AnimationClip.RangeType
    
    let AnimationCurve: AnimationCurve
    
    let AnimationCurveTrack: AnimationCurveTrack
    
    /**
    * @private
    */
    let AnimationEventRegistration: AnimationEventRegistration
    
    /**
    * @private
    */
    let AnimationEventTrack: AnimationEventTrack
    
    let AnimationKeyFrame: AnimationKeyFrame
    
    /**
    * Configures an animation layer for a single [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject).
    * Gives access to position, rotation, scale and blend shape animation tracks.
    * See also: [Playing 3D Animation Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/additional-examples/playing-3d-animation), [AnimationMixer](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AnimationMixer), [Animation](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Animation).
    
    * @deprecated
    */
    let AnimationLayer: AnimationLayer
    
    let AnimationLayerBlendMode: AnimationLayerBlendMode
    
    /**
    * @private
    */
    let AnimationLayerOnEventArgs: AnimationLayerOnEventArgs
    
    let AnimationLayerScaleMode: AnimationLayerScaleMode
    
    /**
    * Controls playback of animations on the attached [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) and its child objects.
    * Please refer to the [Playing 3D Animation Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/additional-examples/playing-3d-animation) for setting up and playing animations.
    
    * @deprecated
    */
    let AnimationMixer: AnimationMixer
    
    /**
    * Controls animation playback for a single animation layer.
    * See also: [AnimationMixer](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AnimationMixer).
    
    * @deprecated
    */
    let AnimationMixerLayer: AnimationMixerLayer
    
    /**
    * Component that handles playing animation clips as well as binding callbacks to user defined events.
    */
    let AnimationPlayer: AnimationPlayer
    
    let AnimationPlayerOnEventArgs: AnimationPlayerOnEventArgs
    
    let AnimationPropertyEventRegistration: AnimationPropertyEventRegistration
    
    /**
    * A layer containing different properties. Examples include position, rotation, scale or any other arbitrary properties a user would like to add and sample from.
    */
    let AnimationPropertyLayer: AnimationPropertyLayer
    
    /**
    * @private
    */
    let AnimationPropertyTrack: AnimationPropertyTrack
    
    /**
    * The base class for animation tracks.
    */
    let AnimationTrack: AnimationTrack
    
    /**
    * @private
    */
    let AnyData: AnyData
    
    /**
    * @private
    */
    let ARDepthTextureProvider: ARDepthTextureProvider
    
    /**
    * Base class for all assets used in the engine.
    */
    let Asset: Asset
    
    /**
    * @private
    */
    let AssetSystem: AssetSystem
    
    /**
    * Used by [Head.setAttachmentPointType()](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Head) to specify the type of attachment used with a Head binding.
    */
    let AttachmentPointType: AttachmentPointType
    
    /**
    * The curve that specifies how sound fades with the distance from Audio Component to the Audio Listener.****
    */
    let Audio_DistanceCurveType: Audio.DistanceCurveType
    
    /**
    * @private
    */
    let Audio_PanType: Audio.PanType
    
    /**
    * @snapOsOnly
    */
    let Audio_PlaybackMode: Audio.PlaybackMode
    
    /**
    * @private
    */
    let AudioAnalysisEvent: AudioAnalysisEvent
    
    /**
    * Used to play audio in a Lens.
    * You can assign an [AudioTrackAsset](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AudioTrackAsset) to play through script or through the AudioComponent's inspector in Lens Studio.
    * See the [Playing Audio](https://lensstudio.snapchat.com/guides/audio) guide for more information.
    */
    let AudioComponent: AudioComponent
    
    /**
    * Configures an audio effect for [AudioEffectComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AudioEffectComponent).
    */
    let AudioEffectAsset: AudioEffectAsset
    
    /**
    * Used to add an audio effect to a Lens.
    * When present in the scene, it will automatically apply the selected audio effect to recordings made with the Lens.
    * See the [Audio Effect](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/audio/audio-effect) guide for more information.
    
    */
    let AudioEffectComponent: AudioEffectComponent
    
    /**
    * Provider for [AudioEffectAsset](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#AudioEffectAsset).
    */
    let AudioEffectProvider: AudioEffectProvider
    
    /**
    * A component that receives input from Audio Components that have Spatial Audio enabled. Calculates their positions relative to the scene object it is attached to,and properly mixes them.
    */
    let AudioListenerComponent: AudioListenerComponent
    
    /**
    * Provider of the Audio Output Audio Track asset. 
    */
    let AudioOutputProvider: AudioOutputProvider
    
    /**
    * @private
    */
    let AudioSystem: AudioSystem
    
    /**
    * Represents an audio file asset.
    * See also: [AudioComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AudioComponent).
    */
    let AudioTrackAsset: AudioTrackAsset
    
    /**
    * Base class for Audio Track providers.
    */
    let AudioTrackProvider: AudioTrackProvider
    
    /**
    * @private
    */
    let AudioTriggerComponent: AudioTriggerComponent
    
    /**
    * Cardinal axis enumeration.
    */
    let Axis: Axis
    
    /**
    * Settings for rendering the background on a [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) component.
    * Accessible through the [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) component's `backgroundSettings` property.
    */
    let BackgroundSettings: BackgroundSettings
    
    /**
    * @private
    */
    let Base64: Base64
    
    /**
    * The base class for all mesh rendering components.
    * Comparable to the former class "MeshVisual", which was split into the classes:
    * [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual),
    * [MaterialMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MaterialMeshVisual),
    * and [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).
    */
    let BaseMeshVisual: BaseMeshVisual
    
    /**
    * Base class for MultiplayerSession options. This class is not used directly - use ConnectedLensSessionOptions instead.
    */
    let BaseMultiplayerSessionOptions: BaseMultiplayerSessionOptions
    
    /**
    * @private
    */
    let BaseNeuralFaceEffectTextureProvider: BaseNeuralFaceEffectTextureProvider
    
    /**
    * Base class for Input and Output Placeholders used by MLComponent.
    */
    let BasePlaceholder: BasePlaceholder
    
    /**
    * Provides basic information about a transformation.
    * See also: [DeviceTracking](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking)
    */
    let BasicTransform: BasicTransform
    
    /**
    * @deprecated
    
    * @private
    */
    let BillboardVisual: BillboardVisual
    
    /**
    * File based asset.
    */
    let BinAsset: BinAsset
    
    /**
    * @unreleased
    */
    let BinFileProvider: BinFileProvider
    
    /**
    * @private
    */
    let BitmapGlyph: BitmapGlyph
    
    let Bitmoji2DOptions: Bitmoji2DOptions
    
    let Bitmoji2DResource: Bitmoji2DResource
    
    let Bitmoji3DOptions: Bitmoji3DOptions
    
    /**
    * Provides information about the current user's 3D Bitmoji avatar to be downloaded via the RemoteMediaModule.
    */
    let Bitmoji3DResource: Bitmoji3DResource
    
    /**
    * @private
    */
    let BitmojiAliasIds: BitmojiAliasIds
    
    /**
    * Provides access to getting information about the current user's Bitmoji.
    */
    let BitmojiModule: BitmojiModule
    
    /**
    * @private
    */
    let BitmojiStickerType: BitmojiStickerType
    
    /**
    * @deprecated
    
    * @private
    */
    let BitmojiSystem: BitmojiSystem
    
    /**
    * @private
    */
    let BitmojiTextureProvider: BitmojiTextureProvider
    
    /**
    * @private
    */
    let BlendFactor: BlendFactor
    
    let BlendMode: BlendMode
    
    /**
    * @private
    */
    let BlendOperation: BlendOperation
    
    /**
    * Controls blend shapes connected to imported animation content.
    
    * Note: this class has been deprecated. Please use the blend shapes functions in [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).
    
    * @deprecated
    */
    let BlendShapes: BlendShapes
    
    /**
    * @private
    */
    let BlendState: BlendState
    
    /**
    * Used to analyze the camera input and apply similar image artifacts to your AR objects in order to allow it to blend and match the real world better.
    */
    let BlurNoiseEstimation: BlurNoiseEstimation
    
    /**
    * Derived from ColliderComponent, attaching this to a SceneObject turns it into a dynamic rigid-body that is automatically moved by the physics simulation in response to gravity, collisions, and other forces.
    */
    let BodyComponent: BodyComponent
    
    /**
    * Provides depth values of the tracked body encoded as D24_UNORM_S8_UINT in screen resolution. Depth is normalized between 0-1, and the stencil component is ignored. The values may be remapped from normalized units (0 to 1) to negative centimeters from the camera (-near in cm to -far in cm) using the `Depth Map` mode of the `Texture 2D Sample` node in Material Editor.
    
    */
    let BodyDepthTextureProvider: BodyDepthTextureProvider
    
    /**
    * Provides surface normal values of the tracked body encoded as RGBA (x, y, z, confidence) in `R8G8B8A8_UNORM` format in screen resolution. The XYZ values may need to be remapped from [0 -> 1] to [-1 -> 1] using the "Normal Map" mode of the `Texture 2D Sample` node in Material Editor.
    */
    let BodyNormalsTextureProvider: BodyNormalsTextureProvider
    
    /**
    * Provider for full Body Mesh render object.
    */
    let BodyRenderObjectProvider: BodyRenderObjectProvider
    
    /**
    * Asset used to configure Body Tracking for the [ObjectTracking3D](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ObjectTracking3D) component.
    */
    let BodyTrackingAsset: BodyTrackingAsset
    
    /**
    * @private
    */
    let BodyTrackingAssetOptions: BodyTrackingAssetOptions
    
    /**
    * @private
    */
    let BoundedVideoTextureProvider: BoundedVideoTextureProvider
    
    /**
    * @private
    */
    let BoundingBox: BoundingBox
    
    /**
    * A box collision shape.
    */
    let BoxShape: BoxShape
    
    /**
    * Triggered when eyebrows are lowered on the tracked face.
    */
    let BrowsLoweredEvent: BrowsLoweredEvent
    
    /**
    * Triggered when eyebrows are raised on the tracked face.
    */
    let BrowsRaisedEvent: BrowsRaisedEvent
    
    /**
    * Triggered when eyebrows are returned to normal on the tracked face.
    */
    let BrowsReturnedToNormalEvent: BrowsReturnedToNormalEvent
    
    let CameoAsset: CameoAsset
    
    /**
    * @private
    */
    let CameosPerformanceMode: CameosPerformanceMode
    
    /**
    * Renders the scene to a Render Target texture.
    * A Camera will only render a SceneObject if the SceneObject's render layer is enabled on the Camera.
    * For more information, see the [Camera and Layers](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/camera) guide.
    */
    let Camera: Camera
    
    /**
    * The base class from which ColorRenderTarget and DepthStencilRenderTarget are derived from
    */
    let Camera_BaseRenderTarget: Camera.BaseRenderTarget
    
    /**
    * @private
    */
    let Camera_CameraMaskChannel: Camera.CameraMaskChannel
    
    /**
    * Color based RenderTarget.
    */
    let Camera_ColorRenderTarget: Camera.ColorRenderTarget
    
    /**
    * Different faces of the cubemap that a camera can render into.
    */
    let Camera_CubemapFace: Camera.CubemapFace
    
    /**
    * Used in [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `depthBufferMode` property.
    * Each mode is suited for handling objects at a certain distance range.
    * For more information on depth modes, see the [Camera and Layers](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/camera) guide.
    */
    let Camera_DepthBufferMode: Camera.DepthBufferMode
    
    /**
    * This class inherits from the BaseRenderTarget class. BaseRenderTarget class is not available for creation and is used like the base class for DepthStencilRenderTarget class to provide access to targetTexture, inputTexture and maskTexture properties.
    */
    let Camera_DepthStencilRenderTarget: Camera.DepthStencilRenderTarget
    
    /**
    * Used in [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `devicePropertyUsage` property.
    * Specifies which camera properties should be overridden by device properties.
    */
    let Camera_DeviceProperty: Camera.DeviceProperty
    
    /**
    * Returned from [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `type` property.
    */
    let Camera_Type: Camera.Type
    
    /**
    * Triggered when the device's back facing camera becomes active.
    */
    let CameraBackEvent: CameraBackEvent
    
    /**
    * @experimental
    
    * @exposesUserData
    
    * @snapOsOnly
    */
    let CameraFrame: CameraFrame
    
    /**
    * Triggered when the device's front facing camera becomes active.
    */
    let CameraFrontEvent: CameraFrontEvent
    
    /**
    * @experimental
    
    * @exposesUserData
    
    * @snapOsOnly
    */
    let CameraModule: CameraModule
    
    /**
    * @experimental
    
    * @exposesUserData
    
    * @snapOsOnly
    */
    let CameraModule_CameraId: CameraModule.CameraId
    
    /**
    * @experimental
    
    * @exposesUserData
    
    * @snapOsOnly
    */
    let CameraModule_CameraRequest: CameraModule.CameraRequest
    
    /**
    * @private
    */
    let CameraRawModule: CameraRawModule
    
    let CameraTextureProvider: CameraTextureProvider
    
    /**
    * @unreleased
    */
    let CandideUpdatedEvent: CandideUpdatedEvent
    
    /**
    * A 2D canvas anchored in 3D space that acts as the root of the ScreenTransform hierarchy. ScreenTransform SceneObjects can be placed on the Canvas, and the Canvas can be sized and placed anywhere in 3D space. It is like a painter’s canvas for ScreenTransforms.
    */
    let Canvas: Canvas
    
    let Canvas_SortingType: Canvas.SortingType
    
    let Canvas_UnitType: Canvas.UnitType
    
    /**
    * Changes the capitalization of the text component. Useful when using dynamic texts.
    */
    let CapitilizationOverride: CapitilizationOverride
    
    /**
    * A capsule collision shape. Also known as a capped cylinder.
    */
    let CapsuleShape: CapsuleShape
    
    /**
    * Settings for how color will be cleared before rendering.
    */
    let ClearColorOption: ClearColorOption
    
    /**
    * Clears depth in the drawing order.
    */
    let ClearDepth: ClearDepth
    
    /**
    * @private
    */
    let ClientInterfaceAction: ClientInterfaceAction
    
    /**
    * @private
    */
    let ClientInterfaceActionTakenEvent: ClientInterfaceActionTakenEvent
    
    /**
    * @private
    */
    let ClientInterfaceComponent: ClientInterfaceComponent
    
    /**
    * @private
    */
    let ClientInterfaceElement: ClientInterfaceElement
    
    /**
    * @private
    */
    let ClientInterfaceSystem: ClientInterfaceSystem
    
    /**
    * Handles the mesh data of cloth and prepares it for cloth simulation. Also controls all the parameters of the cloth simulator and colliders.
    */
    let ClothVisual: ClothVisual
    
    /**
    * Cloth bend mode to use for cloth simulation.
    */
    let ClothVisual_BendMode: ClothVisual.BendMode
    
    /**
    * Options associated with the listValues method call.
    */
    let CloudStorageListOptions: CloudStorageListOptions
    
    /**
    * Provides access to Cloud Storage.
    */
    let CloudStorageModule: CloudStorageModule
    
    /**
    * Used to configure `Cloud Storage Module` with various options. Note: if `session` scoped storage is required, this option must be provided.
    
    */
    let CloudStorageOptions: CloudStorageOptions
    
    /**
    * Options associated with the getValue/deleteValue methods for Cloud Storage.
    */
    let CloudStorageReadOptions: CloudStorageReadOptions
    
    /**
    * Options associated with the setValue method for Cloud Storage.
    */
    let CloudStorageWriteOptions: CloudStorageWriteOptions
    
    /**
    * An instance of Cloud Storage that can store data in a multiplayer experience.
    */
    let CloudStore: CloudStore
    
    /**
    * Collider used by the [Hair Visual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#HairVisual) for its simulation.
    */
    let ColliderComponent: ColliderComponent
    
    /**
    * A state generated for ColliderComponent collision events.
    */
    let Collision: Collision
    
    /**
    * Args used for [ColliderComponent.onCollisionEnter](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered when a collision begins.
    */
    let CollisionEnterEventArgs: CollisionEnterEventArgs
    
    /**
    * Args used for [ColliderComponent.onCollisionExit](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered when a collision ends.
    */
    let CollisionExitEventArgs: CollisionExitEventArgs
    
    let CollisionMesh: CollisionMesh
    
    /**
    * Args used for [ColliderComponent.onCollisionStay](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered every frame while a collision continues.
    */
    let CollisionStayEventArgs: CollisionStayEventArgs
    
    /**
    * Not usable from JS. Accessed via the Colocated Landmarks 2D Mesh resource. Contains the 2D keypoints when creating a Colocated map. Expanded by the material provided with template.
    */
    let ColocatedLandmarks2DRenderObjectProvider: ColocatedLandmarks2DRenderObjectProvider
    
    /**
    * Not usable from JS. Accessed via the Colocated Landmarks 3D Mesh resource. Contains the 3D landmarks when creating a Colocated map. Expanded by the material provided with template.
    */
    let ColocatedLandmarks3DRenderObjectProvider: ColocatedLandmarks3DRenderObjectProvider
    
    let ColocatedLandmarksRenderObjectProviderBase: ColocatedLandmarksRenderObjectProviderBase
    
    /**
    * Creates Colocated Connected Lenses experiences by enabling the creation and tracking of a shared space which can be used to place several users in the same coordinate frame. This shared space will be made available and can be tracked by any friend you invite to join your session via Snapcode. Users are expected to be located in the same room when using the colocated feature. This component needs to be attached to the camera. 
    */
    let ColocatedTrackingComponent: ColocatedTrackingComponent
    
    /**
    * @private
    */
    let ColocatedTrackingComponent_BuildingConfiguration: ColocatedTrackingComponent.BuildingConfiguration
    
    /**
    * Data type used for color values.
    */
    let Colorspace: Colorspace
    
    /**
    * @private
    */
    let CompassAccuracy: CompassAccuracy
    
    /**
    * The base class for all components.  Components are attached to [SceneObjects](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject).
    */
    let Component: Component
    
    /**
    * @private
    */
    let ComponentDisabledEvent: ComponentDisabledEvent
    
    /**
    * @private
    */
    let ComponentEnabledEvent: ComponentEnabledEvent
    
    /**
    * @private
    */
    let ComponentEvent: ComponentEvent
    
    /**
    * @private
    */
    let CompressionQuality: CompressionQuality
    
    /**
    * A cone collision shape.
    */
    let ConeShape: ConeShape
    
    /**
    * @private
    */
    let ConfigurationReader: ConfigurationReader
    
    /**
    * Event fired when the "Launch connected lens" button was pressed. Wait for this event to be triggered before creating a session, as having this event gaurantees the user has accepted the necessary disclosures to use a connected lens experience.
    */
    let ConnectedLensEnteredEvent: ConnectedLensEnteredEvent
    
    /**
    * Connected Lenses Module allows use of networked Lens communication capabilities (real-time communication, co-located session creation and joining, and shared persistent storage). It's recommended to only use one ConnectedLensModule per Lens.
    */
    let ConnectedLensModule: ConnectedLensModule
    
    /**
    * Information that is bootstrapped to the user who just connected to the session.
    */
    let ConnectedLensModule_ConnectionInfo: ConnectedLensModule.ConnectionInfo
    
    /**
    * Information about the host update.
    */
    let ConnectedLensModule_HostUpdateInfo: ConnectedLensModule.HostUpdateInfo
    
    /**
    * Provides extra context about a RealtimeStore's creation.
    */
    let ConnectedLensModule_RealtimeStoreCreationInfo: ConnectedLensModule.RealtimeStoreCreationInfo
    
    /**
    * Gives information about the Realtime Store delete operation. 
    */
    let ConnectedLensModule_RealtimeStoreDeleteInfo: ConnectedLensModule.RealtimeStoreDeleteInfo
    
    /**
    * Provides information about a key being removed from a RealtimeStore.
    */
    let ConnectedLensModule_RealtimeStoreKeyRemovalInfo: ConnectedLensModule.RealtimeStoreKeyRemovalInfo
    
    /**
    * Provides information about a RealtimeStore's ownership being updated.
    */
    let ConnectedLensModule_RealtimeStoreOwnershipUpdateInfo: ConnectedLensModule.RealtimeStoreOwnershipUpdateInfo
    
    /**
    * Gives information about the Realtime Store update operation.
    */
    let ConnectedLensModule_RealtimeStoreUpdateInfo: ConnectedLensModule.RealtimeStoreUpdateInfo
    
    /**
    * Used by ConnectedLensesModule to specify the session share type.
    */
    let ConnectedLensModule_SessionShareType: ConnectedLensModule.SessionShareType
    
    /**
    * Provides information about a user in a Connected Lens session.
    */
    let ConnectedLensModule_UserInfo: ConnectedLensModule.UserInfo
    
    /**
    * Settings for configuring a Connected Lens session.
    */
    let ConnectedLensSessionOptions: ConnectedLensSessionOptions
    
    /**
    * Type of the created Connected Lens session.
    */
    let ConnectedLensSessionOptions_SessionCreationType: ConnectedLensSessionOptions.SessionCreationType
    
    /**
    * Constraints body motion in configurable ways, for simulating physical objects such as joints and hinges.
    */
    let Constraint: Constraint
    
    /**
    * Used to apply a constraint to an object.
    */
    let ConstraintComponent: ConstraintComponent
    
    /**
    * Contact point between two colliding objects.  See also: [ColliderComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), [CollisionEnterEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#CollisionEnterEventArgs), [CollisionExitEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#CollisionExitEventArgs), [CollisionStayEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#CollisionStayEventArgs).
    */
    let Contact: Contact
    
    /**
    * @private
    */
    let CoreMLModule: CoreMLModule
    
    /**
    * @private
    */
    let CoreVersionChecks: CoreVersionChecks
    
    /**
    * Base class for Texture Providers that crop an input texture.
    */
    let CropTextureProvider: CropTextureProvider
    
    /**
    * Used with [Pass's](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Pass) `cullMode` property.
    * Determines which faces of a surface are culled (not rendered).
    */
    let CullMode: CullMode
    
    /**
    * @private
    */
    let CustomClientUIActionEvent: CustomClientUIActionEvent
    
    /**
    * @private
    */
    let CustomLandmarkers: CustomLandmarkers
    
    /**
    * @private
    */
    let CustomLandmarkers_CustomLocationBuilder: CustomLandmarkers.CustomLocationBuilder
    
    /**
    * @private
    */
    let CustomLandmarkers_CustomLocationBuilder_Permission: CustomLandmarkers.CustomLocationBuilder.Permission
    
    /**
    * A cylinder collision shape.
    */
    let CylinderShape: CylinderShape
    
    /**
    * Provides access to external data. Do not add multiple data components to the same scene, since they will interfere with each other. Instead, always have a single data component.
    
    * @deprecated
    
    * @private
    */
    let DataComponent: DataComponent
    
    /**
    * @private
    */
    let DataStoreComponent: DataStoreComponent
    
    /**
    * @private
    */
    let DataStoreWithScene: DataStoreWithScene
    
    /**
    * @private
    */
    let DataStoreWrapper: DataStoreWrapper
    
    /**
    * @deprecated
    
    * @private
    */
    let DateTime: DateTime
    
    /**
    * @private
    */
    let DebugRender: DebugRender
    
    let DeformingCollisionMesh: DeformingCollisionMesh
    
    /**
    * Creates a buffer for the audio data.
    */
    let Delay: Delay
    
    /**
    * Builder class for the Delay.
    */
    let DelayBuilder: DelayBuilder
    
    /**
    * An event that gets triggered after a delay.
    */
    let DelayedCallbackEvent: DelayedCallbackEvent
    
    /**
    * Local estimate of the derivative of the input data along the selected axis. Outputs the derivative of the input features along the window.
    */
    let Delta: Delta
    
    /**
    * Builder class for Delta.
    */
    let DeltaBuilder: DeltaBuilder
    
    /**
    * Settings for the depth clear option modes on a DepthStencilRenderTargetProvider.
    */
    let DepthClearOption: DepthClearOption
    
    /**
    * @private
    */
    let DepthExtractionModel: DepthExtractionModel
    
    /**
    * @private
    */
    let DepthMeshBuilder: DepthMeshBuilder
    
    /**
    * @private
    */
    let DepthMeshBuilder_MeshType: DepthMeshBuilder.MeshType
    
    /**
    * @private
    */
    let DepthProcessingOptions: DepthProcessingOptions
    
    /**
    * @private
    */
    let DepthProcessingOptions_HoleFillingStrategy: DepthProcessingOptions.HoleFillingStrategy
    
    /**
    * Writes video feed depth information to the depth buffer, which automatically sets up depth occlusion for 3D visuals.
    * Only works in some cases, such as in Lenses for Spectacles 3.
    * See the [Lenses for Spectacles guide](https://lensstudio.snapchat.com/lens-studio/references/guides/distributing/spectacles/spectacles-3/lenses-for-spectacles-3) for more information.
    */
    let DepthSetter: DepthSetter
    
    /**
    * Access to a Depth Stencil Render Target that can output depth and stencil values from a Camera in Depth24/Stencil8 format.
    */
    let DepthStencilRenderTargetProvider: DepthStencilRenderTargetProvider
    
    /**
    * @private
    */
    let DepthStencilRenderTargetProvider_OutputResolution: DepthStencilRenderTargetProvider.OutputResolution
    
    /**
    * Provides depth information of the video feed that the Lens is being applied to when available, such as in Lenses for Spectacles 3.
    * Can be accessed from `mainPass.baseTex.control` of a Spectacles Depth material.
    
    * See the [Lenses for Spectacles guide](https://lensstudio.snapchat.com/lens-studio/references/guides/distributing/spectacles/spectacles-2021/lenses-for-spectacles) for more information.
    */
    let DepthTextureProvider: DepthTextureProvider
    
    /**
    * @private
    */
    let DetectedHandObject: DetectedHandObject
    
    /**
    * @private
    */
    let DetectedObject: DetectedObject
    
    /**
    * Provides information about the device's camera.
    */
    let DeviceCamera: DeviceCamera
    
    /**
    * Provides information about the device running the Lens. Accessible through `global.deviceInfoSystem`.
    */
    let DeviceInfoSystem: DeviceInfoSystem
    
    /**
    * Used to track a landmarker in the camera. Moves the SceneObject's transform to match the detected landmarker scene.
    * See the [Landmarker guide](https://lensstudio.snapchat.com/templates/landmarker) for more information.
    */
    let DeviceLocationTrackingComponent: DeviceLocationTrackingComponent
    
    /**
    * @private
    */
    let DeviceMotion: DeviceMotion
    
    /**
    * Moves or rotates the SceneObject to match device orientation.
    
    * If using "Surface" tracking mode, adding this to a SceneObject enables surface tracking for the scene, and moves the
    * object to a position and rotation that matches the physical camera's pose in the world. Surface tracking can also be enhanced
    * with native AR by enabling the "Use Native AR" option in the Inspector panel, or through script by setting the
    * component's [`surfaceOptions.enhanceWithNativeAR`](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SurfaceOptions) property.
    
    * If using "Rotation" tracking mode, adding this to a SceneObject will apply the device's real world rotation to the object.
    
    * If using "World" tracking mode, adding this to a SceneObject enables native AR tracking for the scene, and moves the
    * object to a position and rotation that matches the physical camera's pose in the world.
    
    * See the [Tracking Modes](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/tracking-modes) guide for more information.
    
    **Note:** This component was named "WorldTracking" in previous versions of Lens Studio.
    */
    let DeviceTracking: DeviceTracking
    
    /**
    * Tracking modes used by the [DeviceTracking](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) component to specify what type of tracking to use.
    */
    let DeviceTrackingMode: DeviceTrackingMode
    
    let DeviceTrackingModule: DeviceTrackingModule
    
    /**
    * @private
    */
    let DeviceUIAction: DeviceUIAction
    
    /**
    * @private
    */
    let DeviceUIElement: DeviceUIElement
    
    /**
    * Provides answer information in response to `DialogModule.askQuestions()`.
    */
    let Dialog_Answer: Dialog.Answer
    
    let DialogModule: DialogModule
    
    /**
    * An Audio Component effect that simulates sound attenuation based on the orientation of the transform relative to the [AudioListenerComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AudioListenerComponent). 
    */
    let DirectivityEffect: DirectivityEffect
    
    let DirectMultiplayerSessionOptions: DirectMultiplayerSessionOptions
    
    /**
    * An audio effect that simulates sound attenuation based on the distance between the Audio and the [AudioListenerComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#AudioListenerComponent). 
    */
    let DistanceEffect: DistanceEffect
    
    /**
    * @unreleased
    */
    let DomainInfo: DomainInfo
    
    /**
    * @private
    */
    let DopplerEffect: DopplerEffect
    
    /**
    * @unreleased
    */
    let DoubleTapEvent: DoubleTapEvent
    
    /**
    * @unreleased
    */
    let DoubleTapEventArgs: DoubleTapEventArgs
    
    /**
    * @private
    */
    let DrawingSystem2D: DrawingSystem2D
    
    /**
    * @experimental
    
    * @wearableOnly
    
    * @private
    */
    let DriftCorrectionType: DriftCorrectionType
    
    /**
    * Used in [Text's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `dropShadowSettings` property.
    * Configures how dropshadow will appear on a Text component.
    */
    let DropshadowSettings: DropshadowSettings
    
    /**
    * @private
    */
    let DynamicEnvLight: DynamicEnvLight
    
    let DynamicMeshRenderObjectProvider: DynamicMeshRenderObjectProvider
    
    /**
    * A resource that is resolved at runtime.
    */
    let DynamicResource: DynamicResource
    
    /**
    * @private
    */
    let EmojiTextureProvider: EmojiTextureProvider
    
    /**
    * @private
    */
    let EncodingType: EncodingType
    
    /**
    * @private
    */
    let EnvironmentMapTextureProvider: EnvironmentMapTextureProvider
    
    /**
    * @private
    */
    let EventPropertyTrack: EventPropertyTrack
    
    let EventRegistration: EventRegistration
    
    let ExperimentalClass: ExperimentalClass
    
    /**
    * @private
    */
    let ExperimentSystem: ExperimentSystem
    
    /**
    * Expression names used with `FaceRenderObjectProvider.getExpressionWeightByName()`
    * and returned by `FaceRenderObjectProvider.getExpressionNames()`.
    */
    let Expressions: Expressions
    
    /**
    * @private
    */
    let ExtendedTrackingMode: ExtendedTrackingMode
    
    /**
    * @private
    */
    let ExternalEvent: ExternalEvent
    
    let ExternalRendererComponent: ExternalRendererComponent
    
    /**
    * @private
    */
    let ExternalStreamTextureProvider: ExternalStreamTextureProvider
    
    /**
    * @private
    */
    let ExtrudedMeshBuilder: ExtrudedMeshBuilder
    
    /**
    * @deprecated
    
    * @private
    */
    let Eye: Eye
    
    /**
    * Applies an eye color effect to a face.
    */
    let EyeColorVisual: EyeColorVisual
    
    /**
    * @private
    */
    let EyeIndex: EyeIndex
    
    /**
    * @unreleased
    */
    let EyeToRender: EyeToRender
    
    /**
    * @private
    */
    let FaceCount: FaceCount
    
    /**
    * Texture Provider giving a cropped region of the input texture, calculated based on face position.
    * Can be accessed using `Texture.control` on a FaceCropTexture asset.
    * For more information, see the [Crop Textures](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/crop-textures#crop-textures) guide.
    */
    let FaceCropTextureProvider: FaceCropTextureProvider
    
    /**
    * Triggered when a new face is detected and starts being tracked.
    */
    let FaceFoundEvent: FaceFoundEvent
    
    /**
    * Controls the face image picker texture resource.
    * Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#texture--control) on a Face Image Picker texture.
    * For more information, see the [Face Image Picker Texture guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-image-picker-texture).
    */
    let FaceImagePickerTextureProvider: FaceImagePickerTextureProvider
    
    /**
    * Used with [FaceInsetVisual.faceRegion](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#FaceInsetVisual) for setting the face region to draw.
    */
    let FaceInsetRegion: FaceInsetRegion
    
    /**
    * Draws a section of a tracked face.
    */
    let FaceInsetVisual: FaceInsetVisual
    
    /**
    * @private
    */
    let FacelessTextureProvider: FacelessTextureProvider
    
    /**
    * Triggered when a face can no longer be tracked.  For example, if a face gets blocked from the camera's view, or gets too far away.
    */
    let FaceLostEvent: FaceLostEvent
    
    /**
    * Applies a face mask effect. See the [Face Mask Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-mask) for more information.
    */
    let FaceMaskVisual: FaceMaskVisual
    
    /**
    * @private
    */
    let FaceMeshSource: FaceMeshSource
    
    /**
    * @private
    */
    let FaceNeutralityDataSender: FaceNeutralityDataSender
    
    /**
    * Mesh provider for a Face Mesh. Accessible through the `control` property on a Face Mesh `RenderMesh`.
    */
    let FaceRenderObjectProvider: FaceRenderObjectProvider
    
    /**
    * @private
    */
    let FaceSegmentationPostprocessor: FaceSegmentationPostprocessor
    
    /**
    * Applies a face stretch effect.
    * Face stretch features can be added to a FaceStretchVisual through the Inspector panel in Lens Studio.
    * See the [Face Stretch Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-stretch) for more information.
    */
    let FaceStretchVisual: FaceStretchVisual
    
    /**
    * TextureProvider for face textures.
    * See the [Face Texture Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-texture) for more information.
    * Can be accessed using [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider) on a face texture asset.
    */
    let FaceTextureProvider: FaceTextureProvider
    
    /**
    * This is the base class for all face tracking events. This event won't actually get triggered itself, so use one of the child classes instead.
    */
    let FaceTrackingEvent: FaceTrackingEvent
    
    /**
    * @private
    */
    let FaceTrackingMode: FaceTrackingMode
    
    /**
    * @unreleased
    */
    let FaceTrackingModule: FaceTrackingModule
    
    /**
    * Provider for file based Audio Tracks.
    */
    let FileAudioTrackProvider: FileAudioTrackProvider
    
    /**
    * Provides an image marker based on an imported image file.
    * For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.
    */
    let FileBasedMarkerProvider: FileBasedMarkerProvider
    
    /**
    * A file track provider of the Licensed Sounds from Asset LIbrary.
    */
    let FileLicensedSoundProvider: FileLicensedSoundProvider
    
    /**
    * A [TextureProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextureProvider) for textures originating from files.
    */
    let FileTextureProvider: FileTextureProvider
    
    /**
    * Intersection filter settings. Unifies settings for world probes and collider overlap tests.   See also: [ColliderComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), [Physics](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#Physics).
    */
    let Filter: Filter
    
    let FilteringMode: FilteringMode
    
    let FixedCollisionMesh: FixedCollisionMesh
    
    /**
    * Fully constrain rotation and translation.  See also: [ConstraintComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ConstraintComponent).
    */
    let FixedConstraint: FixedConstraint
    
    /**
    * @private
    */
    let FloatAnimationPropertyTrack: FloatAnimationPropertyTrack
    
    /**
    * The base class for animation tracks using float values.
    
    * @deprecated
    */
    let FloatAnimationTrack: FloatAnimationTrack
    
    /**
    * Represents an animation track using float value keyframes.
    
    * @deprecated
    */
    let FloatAnimationTrackKeyFramed: FloatAnimationTrackKeyFramed
    
    /**
    * Represents an animation track using vec3 value keyframes for a bezier curve.
    
    * @deprecated
    */
    let FloatBezierAnimationTrackKeyFramed: FloatBezierAnimationTrackKeyFramed
    
    /**
    * Arguments used with the `InteractionComponent.onFocusEnd` event.
    */
    let FocusEndEventArgs: FocusEndEventArgs
    
    /**
    * Arguments used with the `InteractionComponent.onFocusStart` event.
    */
    let FocusStartEventArgs: FocusStartEventArgs
    
    /**
    * A font asset used for rendering text.
    * Used by [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text).
    * For more information, see the [Text guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/text/2d-text).
    */
    let Font: Font
    
    /**
    * @private
    */
    let FreezeFrameSystem: FreezeFrameSystem
    
    /**
    * @private
    */
    let Friend: Friend
    
    /**
    * @exposesUserData
    
    * @private
    */
    let FriendSystem: FriendSystem
    
    /**
    * Mode for setting frustum culling on Pass
    */
    let FrustumCullMode: FrustumCullMode
    
    /**
    * @private
    */
    let GalleryType: GalleryType
    
    let GaussianSplattingAsset: GaussianSplattingAsset
    
    let GaussianSplattingVisual: GaussianSplattingVisual
    
    /**
    * Class for storing and retrieving data based on keys.
    * Used by [PersistentStorageSystem](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#PersistentStorageSystem).
    * For more information, see the [Persistent Storage guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/persistent-storage).
    */
    let GeneralDataStore: GeneralDataStore
    
    /**
    * @private
    */
    let GeoData: GeoData
    
    /**
    * @private
    */
    let GeoEntity: GeoEntity
    
    /**
    * Namespace for location functionality.
    */
    let GeoLocation: GeoLocation
    
    /**
    * Enumeration of supported GPS location accuracy.
    */
    let GeoLocationAccuracy: GeoLocationAccuracy
    
    /**
    * @private
    */
    let GeometryType: GeometryType
    
    /**
    * @private
    */
    let GeoObject: GeoObject
    
    /**
    * The location of the device.
    */
    let GeoPosition: GeoPosition
    
    /**
    * @private
    */
    let GeoStorageModule: GeoStorageModule
    
    /**
    * @private
    */
    let GeoStore: GeoStore
    
    /**
    * @wearableOnly
    */
    let GestureModule: GestureModule
    
    /**
    * @wearableOnly
    
    * @private
    */
    let GestureModule_FingerType: GestureModule.FingerType
    
    /**
    * @wearableOnly
    */
    let GestureModule_HandType: GestureModule.HandType
    
    /**
    * Represents a GLTF 3D Model.
    */
    let GltfAsset: GltfAsset
    
    /**
    * Settings for importing a glTF Asset.
    * Use this with [GltfAsset](https://lensstudio.snapchat.com/api/classes/GltfAsset) component's `tryInstantiateWithSetting` method.
    */
    let GltfSettings: GltfSettings
    
    /**
    * @private
    */
    let Glyph: Glyph
    
    /**
    * @private
    */
    let GlyphLoader: GlyphLoader
    
    /**
    * @private
    */
    let GlyphMeshBuilder: GlyphMeshBuilder
    
    /**
    * @private
    */
    let GlyphOutlineEdge: GlyphOutlineEdge
    
    /**
    * @private
    */
    let GlyphOutlineShape: GlyphOutlineShape
    
    /**
    * @private
    */
    let GlyphOutlineShapes: GlyphOutlineShapes
    
    /**
    * @private
    */
    let GlyphPosition: GlyphPosition
    
    /**
    * @private
    */
    let GlyphsAndPositions: GlyphsAndPositions
    
    /**
    * @private
    */
    let GraphicsApi: GraphicsApi
    
    /**
    * @private
    */
    let GridMeshBuilder: GridMeshBuilder
    
    /**
    * This class has been **Deprecated**. Please instead use the [DeviceTracking](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) component with Tracking Mode set to Rotation.
    * See the [Tracking Modes](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/tracking-modes) guide for more information.
    
    * Applies the device's gyroscope rotation to the SceneObject it is attached to.
    
    * @deprecated
    */
    let Gyroscope: Gyroscope
    
    /**
    * Hair asset converted from an FBX containing splines to be used with [Hair Visual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#HairVisual).
    */
    let HairDataAsset: HairDataAsset
    
    /**
    * Component that renders hair simulation.
    */
    let HairVisual: HairVisual
    
    /**
    * Provides additional data for the tracked hand. You can figure out whether the tracked hand is the left hand by accessing the *isLeft* property [true/false], as well as the probability of this data through the  *isLeftProbability*  property [0-1].
    
    */
    let HandSpecificData: HandSpecificData
    
    /**
    *     
    */
    let HandTracking3DAsset: HandTracking3DAsset
    
    /**
    * @private
    */
    let HandTracking3DAssetOptions: HandTracking3DAssetOptions
    
    /**
    * @private
    */
    let HandTracking3DAssetOptions_HandType: HandTracking3DAssetOptions.HandType
    
    /**
    * Triggers haptic feedback on the device. (iOS Devices only)
    
    */
    let HapticFeedbackSystem: HapticFeedbackSystem
    
    /**
    * The method in which haptic feedback is provided. Use with the `HapticFeedbackSystem`.
    */
    let HapticFeedbackType: HapticFeedbackType
    
    /**
    * Binds the SceneObject to a tracked face.
    * See the [Head Attached 3D Objects Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/head-attached-3d-objects) for more information.
    */
    let Head: Head
    
    /**
    * Constraints translation and a single axis of rotation.  See also: [ConstraintComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ConstraintComponent).
    */
    let HingeConstraint: HingeConstraint
    
    /**
    * Used to show and hide hints to the user.
    * For more information and useful helper scripts, see the [Scripting Hints Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/additional-examples/scripting-hints).
    
    * <table cellspacing=0 cellpadding=0><thead><tr><th>Hint ID</th><th>Hint Message</th></tr></thead><tbody><tr><td>&#8220;lens_hint_blow_a_kiss&#8221;</td><td>&#8220;Blow A Kiss&#8221;</td></tr><tr><td>&#8220;lens_hint_come_closer&#8221;</td><td>&#8220;Come Closer&#8221;</td></tr><tr><td>&#8220;lens_hint_do_not_smile&#8221;</td><td>&#8220;Do Not Smile&#8221;</td></tr><tr><td>&#8220;lens_hint_do_not_try_with_a_friend&#8221;</td><td>&#8220;Do Not Try With A Friend&#8221;</td></tr><tr><td>&#8220;lens_hint_find_face&#8221;</td><td>&#8220;Find Face&#8221;</td></tr><tr><td>&#8220;lens_hint_keep_raising_your_eyebrows&#8221;</td><td>&#8220;Keep Raising Your Eyebrows&#8221;</td></tr><tr><td>&#8220;lens_hint_kiss&#8221;</td><td>&#8220;Kiss&#8221;</td></tr><tr><td>&#8220;lens_hint_kiss_again&#8221;</td><td>&#8220;Kiss Again&#8221;</td></tr><tr><td>&#8220;lens_hint_look_around&#8221;</td><td>&#8220;Look Around&#8221;</td></tr><tr><td>&#8220;lens_hint_look_down&#8221;</td><td>&#8220;Look Down&#8221;</td></tr><tr><td>&#8220;lens_hint_look_left&#8221;</td><td>&#8220;Look Left&#8221;</td></tr><tr><td>&#8220;lens_hint_look_right&#8221;</td><td>&#8220;Look Right&#8221;</td></tr><tr><td>&#8220;lens_hint_look_up&#8221;</td><td>&#8220;Look Up&#8221;</td></tr><tr><td>&#8220;lens_hint_make_some_noise&#8221;</td><td>&#8220;Make Some Noise!&#8221;</td></tr><tr><td>&#8220;lens_hint_nod_your_head&#8221;</td><td>&#8220;Nod Your Head&#8221;</td></tr><tr><td>&#8220;lens_hint_now_kiss&#8221;</td><td>&#8220;Now Kiss&#8221;</td></tr><tr><td>&#8220;lens_hint_now_open_your_mouth&#8221;</td><td>&#8220;Now Open Your Mouth&#8221;</td></tr><tr><td>&#8220;lens_hint_now_raise_your_eyebrows&#8221;</td><td>&#8220;Now Raise Your Eyebrows&#8221;</td></tr><tr><td>&#8220;lens_hint_now_smile&#8221;</td><td>&#8220;Now Smile&#8221;</td></tr><tr><td>&#8220;lens_hint_open_your_mouth&#8221;</td><td>&#8220;Open Your Mouth&#8221;</td></tr><tr><td>&#8220;lens_hint_open_your_mouth_again&#8221;</td><td>&#8220;Open Your Mouth Again&#8221;</td></tr><tr><td>&#8220;lens_hint_raise_eyebrows_or_open_mouth&#8221;</td><td>&#8220;Raise Your Eyebrows / Or / Open Your Mouth&#8221;</td></tr><tr><td>&#8220;lens_hint_raise_your_eyebrows&#8221;</td><td>&#8220;Raise Your Eyebrows&#8221;</td></tr><tr><td>&#8220;lens_hint_raise_your_eyebrows_again&#8221;</td><td>&#8220;Raise Your Eyebrows Again&#8221;</td></tr><tr><td>&#8220;lens_hint_smile&#8221;</td><td>&#8220;Smile&#8221;</td></tr><tr><td>&#8220;lens_hint_smile_again&#8221;</td><td>&#8220;Smile Again&#8221;</td></tr><tr><td>&#8220;lens_hint_swap_camera&#8221;</td><td>&#8220;Swap Camera&#8221;</td></tr><tr><td>&#8220;lens_hint_tap&#8221;</td><td>&#8220;Tap!&#8221;</td></tr><tr><td>&#8220;lens_hint_tap_a_surface&#8221;</td><td>&#8220;Tap A Surface&#8221;</td></tr><tr><td>&#8220;lens_hint_tap_ground&#8221;</td><td>&#8220;Tap The Ground&#8221;</td></tr><tr><td>&#8220;lens_hint_tap_ground_to_place&#8221;</td><td>&#8220;Tap Ground To Place&#8221;</td></tr><tr><td>&#8220;lens_hint_tap_surface_to_place&#8221;</td><td>&#8220;Tap Surface To Place&#8221;</td></tr><tr><td>&#8220;lens_hint_try_friend&#8221;</td><td>&#8220;Try It With A Friend&#8221;</td></tr><tr><td>&#8220;lens_hint_try_rear_camera&#8221;</td><td>&#8220;Try It With Your Rear Camera&#8221;</td></tr><tr><td>&#8220;lens_hint_turn_around&#8221;</td><td>&#8220;Turn Around&#8221;</td></tr><tr><td>&#8220;lens_hint_walk_through_the_door&#8221;</td><td>&#8220;Walk Through The Door&#8221;</td></tr></tbody></table>
    */
    let HintsComponent: HintsComponent
    
    /**
    * @private
    */
    let HistogramData: HistogramData
    
    /**
    * @wearableOnly
    */
    let HitTestSession: HitTestSession
    
    /**
    * @wearableOnly
    */
    let HitTestSessionOptions: HitTestSessionOptions
    
    /**
    * @private
    */
    let HoleMode: HoleMode
    
    /**
    * Used by the `horizontalAlignment` property in [MeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual).
    * When a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) is attached to the same SceneObject, this determines how the mesh will be positioned horizontally.
    */
    let HorizontalAlignment: HorizontalAlignment
    
    /**
    * Options for wrapping text horizontally.
    * Used by [Text component's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `horizontalOverflow` property.
    */
    let HorizontalOverflow: HorizontalOverflow
    
    /**
    * @private
    */
    let HoverEndEvent: HoverEndEvent
    
    /**
    * @private
    */
    let HoverEndEventArgs: HoverEndEventArgs
    
    let HoverEvent: HoverEvent
    
    /**
    * @private
    */
    let HoverEventArgs: HoverEventArgs
    
    /**
    * @private
    */
    let HoverStartEvent: HoverStartEvent
    
    /**
    * @private
    */
    let HoverStartEventArgs: HoverStartEventArgs
    
    /**
    * @private
    */
    let HRTFMode: HRTFMode
    
    /**
    * @private
    */
    let IAssetSystem: IAssetSystem
    
    /**
    * The base class for parameter objects passed into event callbacks.
    */
    let IEventParameters: IEventParameters
    
    /**
    * A 2D visual used for drawing texture assets.
    * Commonly used with [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) for drawing images on the screen.
    
    * See the [Image guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/2d/image) for more information.
    */
    let Image: Image
    
    /**
    * Controls an image picker texture and UI.
    * Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider) on an Image Picker texture.
    * For more information, see the [Image Picker Texture](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/2d/media-picker-texture) guide.
    */
    let ImagePickerTextureProvider: ImagePickerTextureProvider
    
    /**
    * @private
    */
    let ImageUploadCompressionMethod: ImageUploadCompressionMethod
    
    /**
    * @private
    */
    let ImageUploadOptions: ImageUploadOptions
    
    /**
    * @private
    */
    let Inpainting: Inpainting
    
    /**
    * Builds InputPlaceHolders for MLComponent.
    */
    let InputBuilder: InputBuilder
    
    /**
    * Controls input data for a neural network used by an MLComponent.
    * For more information, see the [MLComponent Scripting](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/scripting-ml-component) guide.
    */
    let InputPlaceholder: InputPlaceholder
    
    /**
    * @private
    */
    let IntAnimationPropertyTrack: IntAnimationPropertyTrack
    
    /**
    * The base class for animation tracks using integer values.
    
    * @deprecated
    */
    let IntAnimationTrack: IntAnimationTrack
    
    /**
    * Allows the `MeshVisual` provided to this component to handle touches on the screen (blocking Snapchat from receiving the touches), and optionally let certain touch types to pass through (let Snapchat handle the touch).
    
    * Possible `TouchType` values:
    
    * "TouchTypeNone"
    * "TouchTypeTouch"
    * "TouchTypeTap"
    * "TouchTypeDoubleTap"
    * "TouchTypeScale"
    * "TouchTypePan"
    * "TouchTypeSwipe"
    */
    let InteractionComponent: InteractionComponent
    
    /**
    * @private
    */
    let InternalMeshBuilderConfig: InternalMeshBuilderConfig
    
    /**
    * @private
    */
    let InternetModule: InternetModule
    
    /**
    * @private
    */
    let IntStepAnimationPropertyTrack: IntStepAnimationPropertyTrack
    
    /**
    * Represents an animation track using stepped integer value keyframes.
    
    * @deprecated
    */
    let IntStepAnimationTrackKeyFramed: IntStepAnimationTrackKeyFramed
    
    /**
    * Represents an animation track using stepped integer value keyframes.
    
    * @deprecated
    */
    let IntStepNoLerpAnimationTrackKeyFramed: IntStepNoLerpAnimationTrackKeyFramed
    
    /**
    * Triggered when the tracked face ends a kiss.
    */
    let KissFinishedEvent: KissFinishedEvent
    
    /**
    * Triggered when the tracked face starts a kiss.
    */
    let KissStartedEvent: KissStartedEvent
    
    /**
    * Displays text in the scene.
    * This is now deprecated in favor of [Text](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text).
    * See the [Text guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/text/2d-text) for more information.
    
    * @deprecated
    */
    let Label: Label
    
    /**
    * @private
    */
    let LandmarkersSystem: LandmarkersSystem
    
    /**
    * This event is triggered at the end of every frame, after normal [UpdateEvents](https://lensstudio.snapchat.com/api/lens-studio/Classes/Events#UpdateEvent) trigger
    * but before rendering occurs.
    */
    let LateUpdateEvent: LateUpdateEvent
    
    /**
    * Used to describe a set of layers that an object belongs to or interacts with.
    
    * See [SceneObject's](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject) `layer` property, [Camera's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Camera) `renderLayer` property, and [LightSource's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#LightSource) `renderLayer` property.
    */
    let LayerSet: LayerSet
    
    let Leaderboard: Leaderboard
    
    let Leaderboard_CreateOptions: Leaderboard.CreateOptions
    
    let Leaderboard_OrderingType: Leaderboard.OrderingType
    
    let Leaderboard_RetrievalOptions: Leaderboard.RetrievalOptions
    
    let Leaderboard_UserRecord: Leaderboard.UserRecord
    
    let Leaderboard_UsersType: Leaderboard.UsersType
    
    let LeaderboardModule: LeaderboardModule
    
    /**
    * @deprecated
    
    * @private
    */
    let LegacyFaceMeshProvider: LegacyFaceMeshProvider
    
    /**
    * @private
    */
    let LensDataKey: LensDataKey
    
    /**
    * @private
    */
    let LensDataSystem: LensDataSystem
    
    /**
    * @private
    */
    let LensEntryPoint: LensEntryPoint
    
    /**
    * Collider asset generated from a mesh to be used with the [Hair Visual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#HairVisual) as part of the hair simulation.
    */
    let LevelsetColliderAsset: LevelsetColliderAsset
    
    /**
    * A levelset collision shape. A levelset is an asset that is generated to approximate a mesh.
    */
    let LevelsetShape: LevelsetShape
    
    /**
    * Acts as a source of light in the scene.
    * See the [Light and Shadows](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/graphics/light-and-shadow) guide for more information about lighting.
    */
    let LightSource: LightSource
    
    /**
    * Applies a liquify effect to anything rendered behind it.
    */
    let LiquifyVisual: LiquifyVisual
    
    /**
    * @private
    */
    let LiveVideoStreamTextureProvider: LiveVideoStreamTextureProvider
    
    let LoadStatus: LoadStatus
    
    /**
    * @private
    */
    let LocalizationModel: LocalizationModel
    
    /**
    * Asset used with the Localizations system to support custom localization strings.
    */
    let LocalizationsAsset: LocalizationsAsset
    
    /**
    * Helps convert data types to localized string representations. Accessible through `global.localizationSystem`.
    
    * Note that formatted or localized strings may appear differently to users depending on their region.
    * The example results given here are representative of a user in the United States, but may appear differently for users in other regions.
    */
    let LocalizationSystem: LocalizationSystem
    
    /**
    * A component which modifies the [Transform](https://lensstudio.snapchat.com/api/classes/Transform) of the object it is on to a position in the real world, based on a `LocationAsset` and a `position`.
    
    */
    let LocatedAtComponent: LocatedAtComponent
    
    /**
    * @private
    */
    let LocatedAtComponent_Alignment: LocatedAtComponent.Alignment
    
    /**
    * Allows you to access a user's location information.
    
    * @private
    */
    let Location: Location
    
    /**
    * Provides a frame of reference in which to localize objects to the real world. Use with [LocatedAtComponent](https://lensstudio.snapchat.com/api/classes/LocatedAtComponent).
    */
    let LocationAsset: LocationAsset
    
    /**
    * Provides access to location cloud storage depending upon the LocationCloudStorageOptions.
    */
    let LocationCloudStorageModule: LocationCloudStorageModule
    
    /**
    * Used to configure LocationCloudStorage module with various options. 
    */
    let LocationCloudStorageOptions: LocationCloudStorageOptions
    
    /**
    * Instance of location cloud store which has a similar interface as cloud store.
    */
    let LocationCloudStore: LocationCloudStore
    
    /**
    * @private
    */
    let LocationLandmarksRenderObjectProvider: LocationLandmarksRenderObjectProvider
    
    /**
    * @unreleased
    */
    let LocationMarkerProvider: LocationMarkerProvider
    
    /**
    * Used by [DeviceLocationTrackingComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceLocationTrackingComponent) to indicate the user's distance from the landmarker location.
    * See the [Landmarker guide](https://lensstudio.snapchat.com/templates/landmarker) for more information.
    */
    let LocationProximityStatus: LocationProximityStatus
    
    /**
    * Provides access to a location's Mesh--such as when working with City Scale AR. Usually used in conjunction with `LocationTextureProvider`.
    */
    let LocationRenderObjectProvider: LocationRenderObjectProvider
    
    /**
    * The LocationService allows the user to provide their location to lens applications if they so desire. For privacy reasons, the user is asked for permission to report location information.
    */
    let LocationService: LocationService
    
    /**
    * @private
    */
    let LocationSystem: LocationSystem
    
    /**
    * Provides access to a location's texture--such as when working with City Scale AR.
    */
    let LocationTextureProvider: LocationTextureProvider
    
    /**
    * @private
    */
    let LocationType: LocationType
    
    /**
    * @private
    */
    let LongPressEndEvent: LongPressEndEvent
    
    /**
    * @private
    */
    let LongPressEndEventArgs: LongPressEndEventArgs
    
    /**
    * @private
    */
    let LongPressStartEvent: LongPressStartEvent
    
    /**
    * @private
    */
    let LongPressStartEventArgs: LongPressStartEventArgs
    
    /**
    * Every frame, LookAtComponent rotates its SceneObject to face towards a target SceneObject.
    */
    let LookAtComponent: LookAtComponent
    
    /**
    * The "aim" and "up" vectors used with [LookAtComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#LookAtComponent) when determining rotation.
    * LookAtComponent will try to point the `Aim` axis of the SceneObject towards the target,
    * while keeping the `Up` axis of the SceneObject pointing towards `worldUpVector`.
    */
    let LookAtComponent_AimVectors: LookAtComponent.AimVectors
    
    /**
    * Modes used in `LookAtComponent.lookAtMode` to determine the rotation method being used.
    */
    let LookAtComponent_LookAtMode: LookAtComponent.LookAtMode
    
    /**
    * Used with [LookAtComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#LookAtComponent) to set the "up" vector when determining rotation.
    */
    let LookAtComponent_WorldUpVector: LookAtComponent.WorldUpVector
    
    /**
    * Namespace for Machine Learning related classes and methods.
    * For more information, see the [Machine Learning Overview](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-overview).
    */
    let MachineLearning: MachineLearning
    
    /**
    * @private
    */
    let MachineLearning_AlignmentType: MachineLearning.AlignmentType
    
    /**
    * @private
    */
    let MachineLearning_DataLayout: MachineLearning.DataLayout
    
    /**
    * Timing options for when MLComponent should start or stop running. Used with `MLComponent.runScheduled()`.
    * For more information, see the [MLComponent Scripting](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/scripting-ml-component) guide.
    */
    let MachineLearning_FrameTiming: MachineLearning.FrameTiming
    
    /**
    * Inference modes used by `MLComponent.inferenceMode`. Each mode describes how the neural network will be run.
    */
    let MachineLearning_InferenceMode: MachineLearning.InferenceMode
    
    /**
    * Describes the current state of the MLComponent model.
    * For more information, see the [MLComponent Scripting](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/scripting-ml-component) guide.
    */
    let MachineLearning_ModelState: MachineLearning.ModelState
    
    /**
    * Types of output used by OutputPlaceholder.
    */
    let MachineLearning_OutputMode: MachineLearning.OutputMode
    
    /**
    * Handles input information from user touch input via the [TouchComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TouchComponent) to control Scale, Rotation, and Translation of objects.
    */
    let ManipulateComponent: ManipulateComponent
    
    /**
    * This event is triggered when manipulation on the object ends.
    */
    let ManipulateEndEvent: ManipulateEndEvent
    
    /**
    * Arguments used with the `ManipulateComponent.onManipulateEnd` event.
    */
    let ManipulateEndEventArgs: ManipulateEndEventArgs
    
    /**
    * Result object returned from [ManipulateComponent.intersectManipulateFrame()](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ManipulateComponent).
    */
    let ManipulateFrameIntersectResult: ManipulateFrameIntersectResult
    
    /**
    * This event is triggered when manipulation on the object begins.
    */
    let ManipulateStartEvent: ManipulateStartEvent
    
    /**
    * Arguments used with the `ManipulateComponent.onManipulateStart` event.
    */
    let ManipulateStartEventArgs: ManipulateStartEventArgs
    
    /**
    * Enum values specifying each type of manipulation. See [ManipulateComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ManipulateComponent).
    */
    let ManipulateType: ManipulateType
    
    /**
    * @private
    */
    let MapHandler: MapHandler
    
    /**
    * @private
    */
    let MapHandlerRequest: MapHandlerRequest
    
    /**
    * @private
    */
    let MapLayerType: MapLayerType
    
    /**
    * Module for providing Map utils. 
    */
    let MapModule: MapModule
    
    let MappingOptions: MappingOptions
    
    let MappingSession: MappingSession
    
    let MappingSession_MappingThrottling: MappingSession.MappingThrottling
    
    let MapTextureProvider: MapTextureProvider
    
    /**
    * Defines a marker to use for Marker Tracking with [MarkerTrackingComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MarkerTrackingComponent).
    * For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.
    */
    let MarkerAsset: MarkerAsset
    
    /**
    * Base class for marker providers.
    * For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.
    */
    let MarkerProvider: MarkerProvider
    
    /**
    * Used to track images in the camera. Moves the containing object's transform to match the detected image.
    * For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.
    */
    let MarkerTrackingComponent: MarkerTrackingComponent
    
    /**
    * Clips visuals and Interaction Component events within a tree hierarchy. Any Visual or Interaction Components will be clipped user defined 2D bounds. These 2D bounds are defined by a Screen Transform. Useful for clipping some screen transforms--for example a scroll view. 
    */
    let MaskingComponent: MaskingComponent
    
    /**
    * @private
    */
    let MaskTextureProvider: MaskTextureProvider
    
    /**
    * A 2x2 matrix.
    */
    let mat2: mat2
    
    /**
    * A 3x3 matrix.
    */
    let mat3: mat3
    
    /**
    * A 4x4 matrix.
    */
    let mat4: mat4
    
    /**
    * An asset that describes how visual objects should appear.
    * Each Material is a collection of [Passes](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Pass) which define the actual rendering passes.
    * Materials are used by [MeshVisuals](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual) for drawing meshes in the scene.
    */
    let Material: Material
    
    /**
    * Base class for all MeshVisual components using [Materials](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#Material) to render.
    * Comparable to the former class "MeshVisual", which was split into the classes:
    * [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual),
    * [MaterialMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#MaterialMeshVisual),
    * and [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).
    */
    let MaterialMeshVisual: MaterialMeshVisual
    
    /**
    * Provides useful math utility functions.
    */
    let MathUtils: MathUtils
    
    /**
    * Settings for the physical substance, such as friction and bounciness, of a collider. If unset, uses the default matter from the world settings.
    */
    let Matter: Matter
    
    /**
    * @private
    */
    let MediaContentType: MediaContentType
    
    /**
    * @private
    */
    let MediaPickerMode: MediaPickerMode
    
    /**
    * Base class for Texture Providers based on selectable media.
    */
    let MediaPickerTextureProvider: MediaPickerTextureProvider
    
    /**
    * Computes a mel scale spectrogram - a spectrogram where the frequencies are converted to the mel scale.
    */
    let MelSpectrogram: MelSpectrogram
    
    /**
    * A builder class for MelSpectrogram.
    */
    let MelSpectrogramBuilder: MelSpectrogramBuilder
    
    /**
    * A class for generating meshes at runtime.
    */
    let MeshBuilder: MeshBuilder
    
    /**
    * Formats of mesh classification used by WorldRenderObjectProvider.
    */
    let MeshClassificationFormat: MeshClassificationFormat
    
    /**
    * Possible index data types used by [MeshBuilder](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#MeshBuilder). `MeshIndexType.UInt16` is the value normally used.
    */
    let MeshIndexType: MeshIndexType
    
    let MeshRenderObjectProvider: MeshRenderObjectProvider
    
    let MeshShadowMode: MeshShadowMode
    
    /**
    * Allows meshes to be used as collision shapes, for ColliderComponent and BodyComponent.
    */
    let MeshShape: MeshShape
    
    /**
    * Mesh topology types used by [MeshBuilder](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#MeshBuilder).
    */
    let MeshTopology: MeshTopology
    
    /**
    * This class has been DEPRECATED starting in Lens Studio 2.3.
    * The `Component.MeshVisual` typename is now an alias for [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual).
    * When upgrading a project to Lens Studio 2.3 or higher, any instances of the MeshVisual component will be upgraded to [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).
    
    * This class was split into the following three classes, to better distinguish the behaviors of child classes.
    
    * [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual): Base class for all visual classes using meshes to render
    
    * [MaterialMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#MaterialMeshVisual): Child class of BaseMeshVisual, gives access to the [Materials](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#Material) used to render
    
    * [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual): Child class of MaterialMeshVisual, gives access to the [RenderMesh](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#RenderMesh) used to render
    */
    let MeshVisual: MeshVisual
    
    /**
    * Mel-frequency cepstral coefficients.
    */
    let MFCC: MFCC
    
    /**
    * Builder class for the MFCC (Mel Frequency Cepstral Co-efficients).
    */
    let MFCCBuilder: MFCCBuilder
    
    /**
    * The Audio Track Provider of the audio from microphone.
    */
    let MicrophoneAudioProvider: MicrophoneAudioProvider
    
    /**
    * @private
    */
    let MicrophoneRawModule: MicrophoneRawModule
    
    /**
    * Binary ML model supplied by the user.
    */
    let MLAsset: MLAsset
    
    /**
    * Transforms inputs (Textures or Float32Array) into outputs (Textures or Float32Array) using a neural network.
    * The neural network is represented by an MLAsset, which is set as the `model` property.
    * For more information, see the [MLComponent Overview](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/ml-component-overview).
    */
    let MLComponent: MLComponent
    
    /**
    * @wearableOnly
    */
    let MotionController: MotionController
    
    /**
    * @wearableOnly
    */
    let MotionController_HapticFeedback: MotionController.HapticFeedback
    
    /**
    * @wearableOnly
    */
    let MotionController_HapticRequest: MotionController.HapticRequest
    
    /**
    * @wearableOnly
    */
    let MotionController_MotionControllerOptions: MotionController.MotionControllerOptions
    
    /**
    * @wearableOnly
    */
    let MotionController_MotionType: MotionController.MotionType
    
    let MotionController_Options: MotionController.Options
    
    /**
    * @wearableOnly
    */
    let MotionController_TouchPhase: MotionController.TouchPhase
    
    /**
    * @wearableOnly
    */
    let MotionController_TrackingQuality: MotionController.TrackingQuality
    
    /**
    * @wearableOnly
    */
    let MotionControllerModule: MotionControllerModule
    
    /**
    * Triggered when the tracked face's mouth closes.
    */
    let MouthClosedEvent: MouthClosedEvent
    
    /**
    * Triggered when the tracked face's mouth opens.
    */
    let MouthOpenedEvent: MouthOpenedEvent
    
    /**
    * An instance of a Connected Lens session among a group of participants who were successfully invited into the experience. 
    */
    let MultiplayerSession: MultiplayerSession
    
    /**
    * @private
    */
    let MultiplayerSystem: MultiplayerSystem
    
    /**
    * @private
    */
    let NativeARTrackingState: NativeARTrackingState
    
    /**
    * Tracking type used by the [Device Tracking](https://lensstudio.snapchat.com/api/classes/devicetracking) component to specify what type of plane to detect. 
    */
    let NativePlaneTrackingType: NativePlaneTrackingType
    
    let NaturalFeatureMarkerProvider: NaturalFeatureMarkerProvider
    
    /**
    * @private
    */
    let NeuralFaceEffectTextureProvider: NeuralFaceEffectTextureProvider
    
    /**
    * @private
    */
    let NeuralSnapEffectTextureProvider: NeuralSnapEffectTextureProvider
    
    let NoiseReduction: NoiseReduction
    
    let NoiseReductionBuilder: NoiseReductionBuilder
    
    /**
    * Base class for configuring object tracking in the [ObjectTracking3D](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ObjectTracking3D) component.
    */
    let Object3DAsset: Object3DAsset
    
    /**
    * A reusable object hierarchy stored as a resource.
    * Can be instantiated through script or brought into the scene through Lens Studio.
    * For more information, see the [Prefabs](https://lensstudio.snapchat.com/lens-studio/references/guides/general/prefabs) guide.
    */
    let ObjectPrefab: ObjectPrefab
    
    /**
    * Provides additional data for the tracked object. For example, with hand tracking, you can figure out whether the tracked hand is the left hand by accessing the `isLeft` property [true/false], as well as the probability of this data through the `isLeftProbability` property [0-1]. 
    */
    let ObjectSpecificData: ObjectSpecificData
    
    /**
    * Used to track objects in the camera. Moves the local [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) to match the detected image.
    
    * See the [Object Tracking guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/object-tracking) and the [Hand Gestures Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/body/hand-gestures) for more information.
    */
    let ObjectTracking: ObjectTracking
    
    /**
    * Component used for tracking objects in 3D space.
    */
    let ObjectTracking3D: ObjectTracking3D
    
    /**
    * Strategies for updating attached objects. Used by the [ObjectTracking3D](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ObjectTracking3D) component.
    */
    let ObjectTracking3D_TrackingMode: ObjectTracking3D.TrackingMode
    
    /**
    * @unreleased
    */
    let ObjectTrackingAsset: ObjectTrackingAsset
    
    /**
    * @private
    */
    let ObjectTrackingEndEvent: ObjectTrackingEndEvent
    
    /**
    * @private
    */
    let ObjectTrackingEvent: ObjectTrackingEvent
    
    let ObjectTrackingMaskedTextureProvider: ObjectTrackingMaskedTextureProvider
    
    let ObjectTrackingNormalsTextureProvider: ObjectTrackingNormalsTextureProvider
    
    /**
    * @private
    */
    let ObjectTrackingStartEvent: ObjectTrackingStartEvent
    
    /**
    * @private
    */
    let ObjectTrackingSystem: ObjectTrackingSystem
    
    /**
    * Controls a segmentation texture and its placement using information provided by Object tracking.
    */
    let ObjectTrackingTextureProvider: ObjectTrackingTextureProvider
    
    /**
    * @private
    */
    let OffsetAdjustType: OffsetAdjustType
    
    /**
    * Triggered when the Lens starts, earlier than all OnStart events. Also fires immediately on a newly instantiated or copied object.
    */
    let OnAwakeEvent: OnAwakeEvent
    
    /**
    * Triggered when the associated ScriptComponent is destroyed while the lens is running.
    */
    let OnDestroyEvent: OnDestroyEvent
    
    /**
    * Triggered when the `ScriptComponent` this event is bound to is disabled.
    
    */
    let OnDisableEvent: OnDisableEvent
    
    /**
    * Triggered when the `ScriptComponent` this event is bound to is enabled.
    
    */
    let OnEnableEvent: OnEnableEvent
    
    /**
    * @private
    */
    let OnPauseEvent: OnPauseEvent
    
    /**
    * @private
    */
    let OnResumeEvent: OnResumeEvent
    
    /**
    * Triggered when the Lens starts, after all OnAwakeEvents have triggered. Also triggers later on newly instantiated or copied objects.
    */
    let OnStartEvent: OnStartEvent
    
    let OnTimeStartEvent: OnTimeStartEvent
    
    /**
    * Types of operating system that may be running on the device.
    */
    let OS: OS
    
    /**
    * @private
    */
    let OutlineGlyph: OutlineGlyph
    
    /**
    * Used in [Text's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `outlineSettings` property.
    * Configures how text outlining will appear on a Text component.
    */
    let OutlineSettings: OutlineSettings
    
    /**
    * Builds OutputPlaceholders for MLComponent.
    */
    let OutputBuilder: OutputBuilder
    
    /**
    * Provides output data from the neural network used by an MLComponent.
    * For more information, see the [MLComponent Scripting](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/scripting-ml-component) guide.
    */
    let OutputPlaceholder: OutputPlaceholder
    
    /**
    * Exposes state generated for ColliderComponent overlap events.  See also: [ColliderComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), [OverlapEnterEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#OverlapEnterEventArgs), [OverlapExitEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#OverlapExitEventArgs), [OverlapStayEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#OverlapStayEventArgs).
    */
    let Overlap: Overlap
    
    /**
    * Args used for [ColliderComponent.onOverlapEnter](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered when the collider begins overlapping another object. Typically used for volume triggers.
    */
    let OverlapEnterEventArgs: OverlapEnterEventArgs
    
    /**
    * Args used for [ColliderComponent.onOverlapEnd](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered when the collider stops overlapping another object. Typically used for volume triggers.
    */
    let OverlapExitEventArgs: OverlapExitEventArgs
    
    /**
    * Args used for [ColliderComponent.onOverlapStay](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ColliderComponent), which is triggered every frame while the collider continues overlapping another object. Typically used for volume triggers.
    */
    let OverlapStayEventArgs: OverlapStayEventArgs
    
    /**
    * @wearableOnly
    */
    let PalmTapDownArgs: PalmTapDownArgs
    
    /**
    * @wearableOnly
    */
    let PalmTapUpArgs: PalmTapUpArgs
    
    /**
    * @private
    */
    let PanEndEventArgs: PanEndEventArgs
    
    /**
    * @private
    */
    let PanGestureEndEvent: PanGestureEndEvent
    
    /**
    * @private
    */
    let PanGestureMoveEvent: PanGestureMoveEvent
    
    /**
    * @private
    */
    let PanGestureStartEvent: PanGestureStartEvent
    
    /**
    * @private
    */
    let PanMoveEventArgs: PanMoveEventArgs
    
    /**
    * @private
    */
    let PanStartEventArgs: PanStartEventArgs
    
    /**
    * @private
    */
    let ParticlesAsset: ParticlesAsset
    
    /**
    * @private
    */
    let ParticlesVisual: ParticlesVisual
    
    /**
    * Controls how a mesh will get rendered. Each Pass acts as an interface for the shader it's associated with.
    * Any properties on a Pass's shader will automatically become properties on that Pass.
    * For example, if the shader defines a variable named `baseColor`, a script would be able to access that property as `material.mainPass.baseColor`.
    */
    let Pass: Pass
    
    /**
    * @private
    */
    let PassUniformsBuffer: PassUniformsBuffer
    
    /**
    * Similar to [Pass](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Pass), except used by [VFX Assets](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#VFXAsset).
    */
    let PassWrapper: PassWrapper
    
    /**
    * Allows for retrieval of a collection of Pass objects used by VFXAsset
    */
    let PassWrappers: PassWrappers
    
    /**
    * Provides information about the device running the Lens. Accessible through `global.deviceInfoSystem.performanceIndexes`.
    
    * @unreleased
    */
    let PerformanceIndexes: PerformanceIndexes
    
    /**
    * Allows data to be stored and retrieved between Lens sessions.
    * In other words, data can be saved on device and loaded back in the next time the Lens is opened.
    * Can be accessed with `global.persistentStorageSystem`.
    
    * See the [Persistent Storage guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/persistent-storage) for more information.
    */
    let PersistentStorageSystem: PersistentStorageSystem
    
    /**
    * @private
    */
    let PersonInstanceAsset: PersonInstanceAsset
    
    /**
    * Namespace containing physics classes and static physics methods.
    */
    let Physics: Physics
    
    /**
    * Namespace containing static helper methods for [Constraints](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Constraint).
    */
    let Physics_Constraint: Physics.Constraint
    
    /**
    * Constraint type used by a [Constraint](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Contraint).   See also: [Physics.Constraint.create()](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#PhysicsConstraint), [ConstraintComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ConstraintComponent).
    */
    let Physics_ConstraintType: Physics.ConstraintType
    
    /**
    * Script interface for applying collision filtering to colliders and ray/shape-casts.
    */
    let Physics_Filter: Physics.Filter
    
    /**
    * Type of force to use when applying force or torque to a [BodyComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BodyComponent).
    */
    let Physics_ForceMode: Physics.ForceMode
    
    /**
    * Stores reusable settings uniform for a world (such as gravity magnitude and direction). See also: [WorldComponent.worldSettings](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#WorldComponent).
    */
    let Physics_WorldSettingsAsset: Physics.WorldSettingsAsset
    
    /**
    * @wearableOnly
    */
    let PinchDownArgs: PinchDownArgs
    
    /**
    * @private
    */
    let PinchEndEventArgs: PinchEndEventArgs
    
    /**
    * @unreleased
    
    * @private
    */
    let PinchGestureEndEvent: PinchGestureEndEvent
    
    /**
    * @unreleased
    
    * @private
    */
    let PinchGestureMoveEvent: PinchGestureMoveEvent
    
    /**
    * @private
    */
    let PinchGestureStartEvent: PinchGestureStartEvent
    
    /**
    * @private
    */
    let PinchMoveEventArgs: PinchMoveEventArgs
    
    /**
    * @private
    */
    let PinchStartEventArgs: PinchStartEventArgs
    
    /**
    * @wearableOnly
    */
    let PinchStrengthArgs: PinchStrengthArgs
    
    /**
    * @wearableOnly
    */
    let PinchUpArgs: PinchUpArgs
    
    /**
    * @wearableOnly
    
    * @private
    */
    let PinchVisibilityArgs: PinchVisibilityArgs
    
    /**
    * Attaches the SceneObject to the mesh surface of a different SceneObject.
    * See the [Pin To Mesh](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/3d/pin-to-mesh#adding-a-pin-to-mesh-component) guide for more information.
    */
    let PinToMeshComponent: PinToMeshComponent
    
    /**
    * Used with [PinToMeshComponent.orientation](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#PinToMeshComponent).
    */
    let PinToMeshComponent_Orientation: PinToMeshComponent.Orientation
    
    let PitchShifter: PitchShifter
    
    let PitchShifterBuilder: PitchShifterBuilder
    
    /**
    * @private
    */
    let PlatformMaskType: PlatformMaskType
    
    /**
    * @private
    */
    let PlatformSegmentationTextureProvider: PlatformSegmentationTextureProvider
    
    let PlaybackMode: PlaybackMode
    
    /**
    * Represents 3D locations of stationary features in the environment. The resulting cloud of points provides a sparse description of the 3D environment.
    
    */
    let PointCloud: PointCloud
    
    /**
    * A type of constraint that only allows rotation.  See also: [ConstraintComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ConstraintComponent).
    */
    let PointConstraint: PointConstraint
    
    /**
    * An Audio Component effect that allows the Lens to simulate sound based on the direction of the Audio Listener relative to the Audio Component.
    */
    let PositionEffect: PositionEffect
    
    /**
    * Uses an input color lookup table image to adjust the coloring of the Lens.
    * See the [Color Correction Post Effect guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/graphics/materials/post-effects#color-correction) for more information.
    */
    let PostEffectVisual: PostEffectVisual
    
    /**
    * @unreleased
    */
    let Prefab: Prefab
    
    /**
    * Controls an instance of a prefab asset.
    
    * @private
    */
    let PrefabInstantiator: PrefabInstantiator
    
    /**
    * Performs collision tests (such as ray casts) in one or more world. See [Physics.createGlobalProbe()](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#Physics), [Physics.createRootProbe()](https://lensstudio.snapchat.com/api/lens-studio/Classes/OtherClasses#Physics), [WorldComponent.createProbe()](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#WorldComponent).
    */
    let Probe: Probe
    
    /**
    * RenderObjectProvider for mesh objects generated procedurally.
    */
    let ProceduralMeshRenderObjectProvider: ProceduralMeshRenderObjectProvider
    
    /**
    * Provides a texture that can be written to or read from. Can be accessed using Texture.control on a Procedural Texture.
    */
    let ProceduralTextureProvider: ProceduralTextureProvider
    
    let ProcessedLocationModule: ProcessedLocationModule
    
    /**
    * @private
    */
    let ProcessingMode: ProcessingMode
    
    let Properties: Properties
    
    let PropertyOnEventArgs: PropertyOnEventArgs
    
    /**
    * Base class for all resource providers.
    */
    let Provider: Provider
    
    /**
    * @private
    */
    let QualityLevel: QualityLevel
    
    /**
    * A quaternion, used to represent rotation.
    */
    let quat: quat
    
    /**
    * @private
    */
    let QuatAnimationPropertyTrack: QuatAnimationPropertyTrack
    
    /**
    * The base class for animation tracks using quaternion values.
    
    * @deprecated
    */
    let QuaternionAnimationTrack: QuaternionAnimationTrack
    
    /**
    * Represents an animation track using quaternion value keyframes.
    
    * @deprecated
    */
    let QuaternionAnimationTrackKeyFramed: QuaternionAnimationTrackKeyFramed
    
    /**
    * Represents a rotation animation track using euler angles.
    
    * @deprecated
    */
    let QuaternionAnimationTrackXYZEuler: QuaternionAnimationTrackXYZEuler
    
    /**
    * @private
    */
    let QueryGeoStorageOptions: QueryGeoStorageOptions
    
    let RawLocationModule: RawLocationModule
    
    /**
    * Hit results of a ray-cast provided to script. See [Probe](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Probe).
    */
    let RayCastHit: RayCastHit
    
    /**
    * The options for the realtime store.
    */
    let RealtimeStoreCreateOptions: RealtimeStoreCreateOptions
    
    /**
    * The ownership model of a realtime store.
    */
    let RealtimeStoreCreateOptions_Ownership: RealtimeStoreCreateOptions.Ownership
    
    /**
    * The persistence model for a realtime store.
    */
    let RealtimeStoreCreateOptions_Persistence: RealtimeStoreCreateOptions.Persistence
    
    /**
    * @private
    */
    let RecordingState: RecordingState
    
    /**
    * An axis aligned rectangle.
    * Used by `anchors` and `offsets` in [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) to represent screen boundaries.
    * Rect can only store finite numbers in the range Number.MIN_VALUE to Number.MAX_VALUE.
    
    */
    let Rect: Rect
    
    /**
    * Applies ScreenTransform positioning to match the cropped region of a texture.
    * For more information, see the [Crop Textures](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/crop-textures) guide.
    */
    let RectangleSetter: RectangleSetter
    
    /**
    * Texture Provider providing a cropped region of the input texture. The region is specified by the cropRect in local space and rotation.
    * Can be accessed using Texture.control on a RectCropTexture asset, such as a Screen Crop Texture.
    * For more information, see the [Crop Textures](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/crop-textures) guide.
    */
    let RectCropTextureProvider: RectCropTextureProvider
    
    let RemoteApiRequest: RemoteApiRequest
    
    let RemoteApiResponse: RemoteApiResponse
    
    /**
    * Provides access to a remote media.
    */
    let RemoteMediaModule: RemoteMediaModule
    
    /**
    * Provides a reference to a remote asset (i.e. assets outside of the Lens size limit) that can be downloaded at runtime using script.
    */
    let RemoteReferenceAsset: RemoteReferenceAsset
    
    let RemoteServiceHttpRequest: RemoteServiceHttpRequest
    
    /**
    * @private
    */
    let RemoteServiceHttpRequest_HttpRequestMethod: RemoteServiceHttpRequest.HttpRequestMethod
    
    let RemoteServiceHttpResponse: RemoteServiceHttpResponse
    
    let RemoteServiceModule: RemoteServiceModule
    
    /**
    * @private
    */
    let RemoteServiceModule_OAuth2Status: RemoteServiceModule.OAuth2Status
    
    /**
    * The ordering method for where an entry point will be inserted relative to existing cameras.
    
    * CameraInsertionOrdering is used to specify the non-API camera that a RenderEntryPoint will be attached to. RenderEntryPoint has a member of this type. This property has no effect if the RenderEntryPoint is assigned a RenderAPICamera rather than a non-API camera.
    
    
    * @private
    */
    let RenderAPI_CameraInsertionOrdering: RenderAPI.CameraInsertionOrdering
    
    /**
    * The ordering method for where an entry point will be inserted within a specific camera’s rendering chain.
    
    * EntryPointInsertionOrdering is used to specify the location where the contents of a RenderEntryPoint should be placed in the scene. RenderEntryPoint has a member of this type.
    
    
    * @private
    */
    let RenderAPI_EntryPointInsertionOrdering: RenderAPI.EntryPointInsertionOrdering
    
    /**
    * The ordering method for objects within the same group.
    
    * ObjectOrderingInGroup is used to specify how the objects within the same group will be ordered. RenderGroup has a member of this type.
    
    
    * @private
    */
    let RenderAPI_ObjectOrderingInGroup: RenderAPI.ObjectOrderingInGroup
    
    /**
    * This class is used to represent a camera that is exclusively used within the `RenderAPIJS`. It has many of the same properties as the original `Camera` class. Each `RenderAPICameraJS` has a unique layer from all existing layers in the Scene. The `targetHandle` member is used to assign the RenderAPICameraJS a `RenderAPITargetJS`. If the targetHandle is invalid, nothing will be rendered with this camera.
    
    
    * @private
    */
    let RenderAPICameraJS: RenderAPICameraJS
    
    /**
    * This object represents the first point of entry for client code that wishes to make use of `RenderAPIJS` functionalities. It holds accessors to the system objects as well as utility functions necessary for `RenderAPIJS` to interface properly with the FlatScene. Only one instance of `RenderAPIJS` should exist for each `Scene`, which is bound to the global namespace.
    
    
    * @private
    */
    let RenderAPIJS: RenderAPIJS
    
    /**
    * This is a struct which represents the most basic unit in `RenderAPIJS`. It holds properties which will be used to create FlatVisualSrc's during FlatScene construction.
    
    
    * @private
    */
    let RenderAPIObjectJS: RenderAPIObjectJS
    
    /**
    * This is used to represent render targets that can be incorporated into `RenderAPIJS`. It is designed as a wrapper for color render targets and the depth-stencil render target such that render targets can also be treated as RenderElements by the RenderAPI.
    
    * You will not be able to independently create a RenderAPITargetJS. All RenderAPITargetJS instances are created alongside a corresponding `RenderAPICameraJS`.
    
    
    * @private
    */
    let RenderAPITargetJS: RenderAPITargetJS
    
    /**
    * This represents the precise location in the rendering pipeline where the objects should be rendered. The precise location is determined by specifying the exact camera and the order within said camera's rendering chain. A `RenderEntryPointJS` contains a vector of handles. Each handle points to a `RenderGroupJS` that will be added to this entry point location during rendering. The `cameraHandle` represents the RenderEntryPoint's possible association to a `RenderAPICameraJS`.
    
    
    * @private
    */
    let RenderEntryPointJS: RenderEntryPointJS
    
    /**
    * This represents a grouping of `RenderAPIObjectJS`, which is represented by the vector of handles. Objects in the same `RenderGroupJS` will always be rendered one after the other as a single block. Objects not part of a render group will never be rendered in between any two objects in that render group.
    
    
    * @private
    */
    let RenderGroupJS: RenderGroupJS
    
    /**
    * @private
    */
    let RenderingSpace: RenderingSpace
    
    /**
    * Represents a mesh asset.
    * See also: [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).
    */
    let RenderMesh: RenderMesh
    
    /**
    * Renders a [RenderMesh](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#RenderMesh) asset in the scene.
    * Comparable to the former class "MeshVisual", which was split into the classes:
    * [BaseMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#BaseMeshVisual),
    * [MaterialMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#MaterialMeshVisual),
    * and [RenderMeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#RenderMeshVisual).
    */
    let RenderMeshVisual: RenderMeshVisual
    
    /**
    * Provider for RenderMesh data.
    */
    let RenderObjectProvider: RenderObjectProvider
    
    /**
    * @private
    */
    let RenderObjectWithLayerJS: RenderObjectWithLayerJS
    
    /**
    * @private
    */
    let RenderObjectWithMeshJS: RenderObjectWithMeshJS
    
    /**
    * @private
    */
    let RenderObjectWithVisualJS: RenderObjectWithVisualJS
    
    /**
    * Controls a camera texture resource.
    * Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider) on a Camera texture.
    * For more information, see the [Camera and Layers](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/camera) guide.
    */
    let RenderTargetProvider: RenderTargetProvider
    
    /**
    * @private
    */
    let RenderTargetProvider_AntialiasingMode: RenderTargetProvider.AntialiasingMode
    
    /**
    * @private
    */
    let RenderTargetProvider_AntialiasingQuality: RenderTargetProvider.AntialiasingQuality
    
    /**
    * @private
    */
    let RenderTargetProvider_DepthBufferUsage: RenderTargetProvider.DepthBufferUsage
    
    /**
    * @private
    */
    let RenderTargetProvider_MSAAStrategy: RenderTargetProvider.MSAAStrategy
    
    /**
    * @private
    */
    let RenderTargetProvider_OutputResolution: RenderTargetProvider.OutputResolution
    
    /**
    * Specifies what kind of render target it is. Some texture types, for example TextureCubemap, need additional properties set on the rendering camera to work correctly.
    */
    let RenderTargetProvider_TextureType: RenderTargetProvider.TextureType
    
    /**
    * @private
    */
    let ResamplingQuality: ResamplingQuality
    
    /**
    * @private
    */
    let RestrictionComponent: RestrictionComponent
    
    /**
    * Visual effect used to add subtle retouching effects to detected faces (soft skin, teeth whitening, etc.).
    * To learn more, visit the [Retouch Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/face/face-effects/face-retouch).
    */
    let RetouchVisual: RetouchVisual
    
    /**
    * @private
    */
    let ReverseCameraTextureProvider: ReverseCameraTextureProvider
    
    let RotatedRect: RotatedRect
    
    /**
    * Used with [DeviceTracking.rotationOptions](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) to change settings for Rotation tracking mode.
    */
    let RotationOptions: RotationOptions
    
    /**
    * Applies a constant rotation to the object every frame.
    
    * @private
    */
    let Rotator: Rotator
    
    let Sampler: Sampler
    
    /**
    * Class for building Sampler.
    */
    let SamplerBuilder: SamplerBuilder
    
    /**
    * An accessor for Pass.samplers when using PassWrappers
    */
    let SamplerWrapper: SamplerWrapper
    
    let SamplerWrappers: SamplerWrappers
    
    /**
    * Asset for detecting an object through the Scan system.
    
    * @exposesUserData
    */
    let ScanModule: ScanModule
    
    /**
    * Contexts used in `ScanModule.scan()`.
    */
    let ScanModule_Contexts: ScanModule.Contexts
    
    /**
    * @private
    */
    let SceneConfig: SceneConfig
    
    /**
    * @private
    */
    let SceneConfig_EqualCameraOrderStrategy: SceneConfig.EqualCameraOrderStrategy
    
    /**
    * @private
    */
    let SceneConfig_FaceStretchAlgorithm: SceneConfig.FaceStretchAlgorithm
    
    /**
    * @private
    */
    let SceneConfig_FaceStretchBatchingStrategy: SceneConfig.FaceStretchBatchingStrategy
    
    /**
    * @private
    */
    let SceneConfig_RenderTargetStrategy: SceneConfig.RenderTargetStrategy
    
    /**
    * The base class for scenewide events.  SceneEvents can be created using [ScriptComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScriptComponent)'s [createEvent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#scriptcomponent--createEvent) method.
    */
    let SceneEvent: SceneEvent
    
    /**
    * @private
    */
    let SceneIntelligenceSystem: SceneIntelligenceSystem
    
    /**
    * An object in the scene hierarchy, containing a [Transform](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Transform) and possibly [Components](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components).
    * A script can access the SceneObject holding it through the method `script.getSceneObject()`.
    */
    let SceneObject: SceneObject
    
    /**
    * Base class for all object-based Event types in Lens Studio (ManipulateStartEvent, TapEvent, etc.).
    */
    let SceneObjectEvent: SceneObjectEvent
    
    /**
    * @private
    */
    let SceneRecognition: SceneRecognition
    
    /**
    * Overrides the settings on a local [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) to fit a screen region on the device.
    * See the [Screen Transform guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/2d/screen-transform-overview) for more information.
    */
    let ScreenRegionComponent: ScreenRegionComponent
    
    /**
    * Types of screen regions that can be used with [ScreenRegionComponent](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenRegionComponent).
    */
    let ScreenRegionType: ScreenRegionType
    
    /**
    * Texture providing the current Render Target being rendered.
    */
    let ScreenTextureProvider: ScreenTextureProvider
    
    /**
    * Used for positioning objects in 2d screen space. It overrides the regular [Transform](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#Transform) component on the SceneObject it's attached to.
    
    * See the [Screen Transform guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/scene-set-up/2d/screen-transform-overview) for more information.
    */
    let ScreenTransform: ScreenTransform
    
    /**
    * Represents a JavaScript script which can be used to add logic in your Lens.
    */
    let ScriptAsset: ScriptAsset
    
    /**
    * Binds scripts to Events and executes them when triggered. Any script can access the ScriptComponent executing them through the variable `script`.
    * See also: [Scripting Overview](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/scripting-overview#script-components), [Script Events Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/adding-interactivity/script-events#introduction).
    */
    let ScriptComponent: ScriptComponent
    
    /**
    * Base class for objects representing Script data.
    */
    let ScriptObject: ScriptObject
    
    /**
    * Represents the Lens scene. Accessible through `global.scene`.
    */
    let ScriptScene: ScriptScene
    
    /**
    * @private
    */
    let Segmentation: Segmentation
    
    /**
    * @private
    */
    let SegmentationMask: SegmentationMask
    
    /**
    * Segmentation model used for [SegmentationTextureProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Providers#SegmentationTextureProvider).
    */
    let SegmentationModel: SegmentationModel
    
    /**
    * Controls a segmentation texture resource.
    * Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider) on a Segmentation texture.
    * For more information, see the [Segmentation](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/segmentation/fullscreen-segmentation) guide.
    */
    let SegmentationTextureProvider: SegmentationTextureProvider
    
    /**
    * Arguments used with the `InteractionComponent.onSelectEnd` event.
    */
    let SelectEndEventArgs: SelectEndEventArgs
    
    /**
    * Arguments used with the `InteractionComponent.onSelectStart` event.
    */
    let SelectStartEventArgs: SelectStartEventArgs
    
    /**
    * @private
    */
    let SequentialTextureProvider: SequentialTextureProvider
    
    /**
    * Low-level data class.
    */
    let SerializableWithUID: SerializableWithUID
    
    /**
    * @private
    */
    let SerializationSystem: SerializationSystem
    
    let ShaderResourceSystem: ShaderResourceSystem
    
    /**
    * Base type for collision shapes.
    */
    let Shape: Shape
    
    /**
    * @unreleased
    */
    let ShoppingLoadingIndicator: ShoppingLoadingIndicator
    
    /**
    * @unreleased
    */
    let ShoppingModule: ShoppingModule
    
    /**
    * @private
    */
    let SideTextureMode: SideTextureMode
    
    let SinglePlaneTrackingUpdatedEvent: SinglePlaneTrackingUpdatedEvent
    
    /**
    * Represents skinning data for rigged meshes. See also: [MeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual).
    */
    let Skin: Skin
    
    /**
    * @private
    */
    let SkinSample: SkinSample
    
    /**
    * @unreleased
    */
    let SliderConstraint: SliderConstraint
    
    /**
    * Triggered when a smile ends on the tracked face.
    */
    let SmileFinishedEvent: SmileFinishedEvent
    
    /**
    * Triggered when a smile begins on the tracked face.
    */
    let SmileStartedEvent: SmileStartedEvent
    
    /**
    * @private
    */
    let Snap3D: Snap3D
    
    /**
    * @private
    */
    let Snap3D_Layer: Snap3D.Layer
    
    /**
    * @private
    */
    let Snap3D_MagicMomentCameraPathMode: Snap3D.MagicMomentCameraPathMode
    
    /**
    * @private
    */
    let Snap3D_MagicMomentMeshExperiment: Snap3D.MagicMomentMeshExperiment
    
    /**
    * @private
    */
    let Snap3D_MagicMomentParams: Snap3D.MagicMomentParams
    
    /**
    * @private
    */
    let Snap3D_Strategy: Snap3D.Strategy
    
    /**
    * Details about friendship between the active user and another user.
    */
    let SnapchatFriendUserInfo: SnapchatFriendUserInfo
    
    /**
    * @private
    */
    let SnapchatGroup: SnapchatGroup
    
    /**
    * Represents a Snapchat user in order to pass to other APIs or to retrieve certain details about the user like display name. 
    */
    let SnapchatUser: SnapchatUser
    
    /**
    * Set the bone on the skin.
    */
    let SnapchatUserBirthday: SnapchatUserBirthday
    
    /**
    * @unreleased
    */
    let SnapcodeFoundEvent: SnapcodeFoundEvent
    
    /**
    * Provides a marker for tracking Snapcodes.
    * For more information, see the [Marker Tracking](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/tracking/world/marker-tracking) guide.
    */
    let SnapcodeMarkerProvider: SnapcodeMarkerProvider
    
    /**
    * Called when the user taps on the capture button to record an image.
    */
    let SnapImageCaptureEvent: SnapImageCaptureEvent
    
    /**
    * @private
    */
    let SnapOS: SnapOS
    
    /**
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    let SnapOS_CompositorConfig: SnapOS.CompositorConfig
    
    /**
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    let SnapOS_DeviceConfig: SnapOS.DeviceConfig
    
    /**
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    let SnapOS_LayerConfig: SnapOS.LayerConfig
    
    /**
    * @experimental
    
    * @snapOsOnly
    
    * @private
    */
    let SnapOS_ReprojectionPlaneMode: SnapOS.ReprojectionPlaneMode
    
    /**
    * @private
    */
    let SnappablesSession: SnappablesSession
    
    /**
    * @private
    */
    let SnappablesSessionInitFailedEvent: SnappablesSessionInitFailedEvent
    
    /**
    * @private
    */
    let SnappablesSessionReadyEvent: SnappablesSessionReadyEvent
    
    /**
    * @private
    */
    let SnappablesSystem: SnappablesSystem
    
    /**
    * @private
    */
    let SnapRecordingSystem: SnapRecordingSystem
    
    /**
    * Gets called when the user starts long pressing the capture button to record a Snap.
    */
    let SnapRecordStartEvent: SnapRecordStartEvent
    
    /**
    * Gets called when the user stops long pressing the Snap button to end recording of a Snap.
    */
    let SnapRecordStopEvent: SnapRecordStopEvent
    
    /**
    * Order that inTensor will be sorted when applying `TensorMath.argSortMasked()`.
    */
    let SortOrder: SortOrder
    
    /**
    * @private
    */
    let SourceMaps: SourceMaps
    
    let SpatialAudio: SpatialAudio
    
    /**
    * @private
    */
    let SpatialMap: SpatialMap
    
    /**
    * @experimental
    
    * @private
    */
    let SpatialMapLoadEvent: SpatialMapLoadEvent
    
    /**
    * @experimental
    
    * @private
    */
    let SpatialMapMode: SpatialMapMode
    
    /**
    * @experimental
    
    * @private
    */
    let SpatialMapRelocalizationEvent: SpatialMapRelocalizationEvent
    
    /**
    * @experimental
    
    * @private
    */
    let SpatialMapSaveEvent: SpatialMapSaveEvent
    
    /**
    * Representation the signal strength over time at various frequencies present in a particular waveform. Created by applying Fast Fourier Transform (FFT) on the overlapping segments of the audio data.
    */
    let Spectrogram: Spectrogram
    
    /**
    * The builder class for Spectrogram.
    */
    let SpectrogramBuilder: SpectrogramBuilder
    
    /**
    * A sphere collision shape.
    */
    let SphereShape: SphereShape
    
    let SplineComponent: SplineComponent
    
    /**
    * Represents transform data for screen-aligned 2D sprites. Use on SceneObjects with a SpriteVisual Component.
    * See also: [SpriteVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#deprecated-spritevisual).
    */
    let SpriteAligner: SpriteAligner
    
    /**
    * This class has been **deprecated** and replaced with the [Image](https://lensstudio.snapchat.com/api/classes/Image) component.
    
    * Represents a renderable 2D visual in Lens Studio.
    
    
    * @deprecated
    */
    let SpriteVisual: SpriteVisual
    
    /**
    * @private
    */
    let SSAO_DebugMode: SSAO.DebugMode
    
    /**
    * @private
    */
    let SSAO_MeshMode: SSAO.MeshMode
    
    /**
    * @private
    */
    let SSAO_Settings: SSAO.Settings
    
    /**
    * @unreleased
    */
    let StateInfo: StateInfo
    
    /**
    * Stencil buffer clear option.
    */
    let StencilClearOption: StencilClearOption
    
    /**
    * Specifies whether the front and/or back face stencil test will be applied. The initial value is "FrontAndBack"
    */
    let StencilFace: StencilFace
    
    /**
    * Specifies the stencil test function. The initial value is "Always".
    */
    let StencilFunction: StencilFunction
    
    /**
    * Options for specifying the action to take when stencil and depth tests resolve.
    */
    let StencilOperation: StencilOperation
    
    /**
    * The stencil test state for Pass.
    */
    let StencilState: StencilState
    
    /**
    * @exposesUserData
    
    * @wearableOnly
    
    * @private
    */
    let StereoCameraModule: StereoCameraModule
    
    /**
    * @private
    */
    let StereoEffect: StereoEffect
    
    /**
    * Settings for saving values in a MultiplayerSession.
    */
    let StorageOptions: StorageOptions
    
    /**
    * Specifies a scope for storing or retrieving values from a MultiplayerSession.
    */
    let StorageScope: StorageScope
    
    /**
    * @deprecated
    
    * @private
    */
    let StrandNeighbourSearchType: StrandNeighbourSearchType
    
    /**
    * @private
    */
    let StreamPlayerComponent: StreamPlayerComponent
    
    /**
    * Options for stretching a mesh to fit a [ScreenTransform's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) bounding box.
    * Used in [MeshVisual's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual) `stretchMode` property, as long as the SceneObject has a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) attached.
    * Also used in [TextFill's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextFill) `textureStretch` property to control texture stretching when drawing text.
    
    * See the [Image guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/2d/image) for more information about stretch modes.
    */
    let StretchMode: StretchMode
    
    /**
    * @unreleased
    */
    let StretchPoint: StretchPoint
    
    let Studio: Studio
    
    /**
    * @private
    */
    let Surface: Surface
    
    /**
    * Used with [DeviceTracking.surfaceOptions](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) to change settings for Surface tracking mode.
    */
    let SurfaceOptions: SurfaceOptions
    
    /**
    * If a [DeviceTracking](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#DeviceTracking) component is present in the scene, this event is triggered when
    * the tracking is restarted (typically when the Lens starts, or if the user taps the ground).
    */
    let SurfaceTrackingResetEvent: SurfaceTrackingResetEvent
    
    /**
    * @private
    */
    let SystemInterfaceElement: SystemInterfaceElement
    
    let TangentType: TangentType
    
    /**
    * This event is triggered when the user taps on the screen.
    */
    let TapEvent: TapEvent
    
    /**
    * Arguments used with the `InteractionComponent.onTap` event.
    */
    let TapEventArgs: TapEventArgs
    
    /**
    * @wearableOnly
    */
    let TargetingDataArgs: TargetingDataArgs
    
    /**
    * Namespace for mathematical operations on tensors. Useful with MLComponent.
    
    **Tensor broadcasting rules**
    
    * Tensor (channels, width, height) op Tensor (1, 1, 1)  =  the same as applying op with scalar
    
    * Tensor (channels, width, height) op Tensor (channels, 1, 1)  =  the same as applying op per channel
    */
    let TensorMath: TensorMath
    
    let TensorMath_BorderType: TensorMath.BorderType
    
    let TensorMath_ThresholdMethod: TensorMath.ThresholdMethod
    
    /**
    * Visual component that renders dynamic text.
    * See the [Text guide](https://lensstudio.snapchat.com/lens-studio/references/guides/adding-content/text/2d-text) for more information.
    */
    let Text: Text
    
    /**
    * Renders a given text with a 3D mesh.
    */
    let Text3D: Text3D
    
    /**
    * Fill settings used by several text related classes.
    * Used in [Text's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `textFill` property, [DropshadowSettings'](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#DropshadowSettings) `fill` property, and [OutlineSettings'](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#OutlineSettings) `fill` property.
    */
    let TextFill: TextFill
    
    /**
    * Used in [TextFill's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextFill) `mode` property. Controls which drawing method is used for the TextFill.
    */
    let TextFillMode: TextFillMode
    
    let TextInputModule: TextInputModule
    
    /**
    * Provides access to the device's input system. Accessible through `global.textInputSystem`. 
    */
    let TextInputSystem: TextInputSystem
    
    /**
    * The settings used for how the input keyboard should work.
    */
    let TextInputSystem_KeyboardOptions: TextInputSystem.KeyboardOptions
    
    /**
    * The different input style of keyboard input.
    */
    let TextInputSystem_KeyboardType: TextInputSystem.KeyboardType
    
    /**
    * The return key style of keyboard input.
    */
    let TextInputSystem_ReturnKeyType: TextInputSystem.ReturnKeyType
    
    /**
    * Controls a text rendering texture. Can be accessed through the main rendering pass on a [Label](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#deprecated-label) component.
    * The properties here mirror those on Label.
    */
    let TextProvider: TextProvider
    
    let TextToSpeech: TextToSpeech
    
    /**
    * Provides the configuration for the [Text to Speech Module](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextToSpeechModule).   It is used to control the language of the generated voice, the voice’s style and pace.
    */
    let TextToSpeech_Options: TextToSpeech.Options
    
    /**
    * Provides a map of what phoneme is said at what time in the synthesized speech.
    */
    let TextToSpeech_PhonemeInfo: TextToSpeech.PhonemeInfo
    
    /**
    * The voice style on which the TextToSpeech will be synthesized, Varying from neutral style, to a more elaborated styles depending on the voice. Note that Sam’s voice still doesn’t have more than the neutral style, this will be added throughout the coming releases.
    */
    let TextToSpeech_VoiceNames: TextToSpeech.VoiceNames
    
    /**
    * The voice style on which the TextToSpeech will be synthesized, Varying from neutral style, to a more elaborated styles depending on the voice.
    * Note that Sam’s voice still don’t have more than the neutral style, this will be added throughout the coming releases.
    
    
    * @unreleased
    */
    let TextToSpeech_VoiceStyles: TextToSpeech.VoiceStyles
    
    /**
    * Parameter returned in the `onTTSCompleteHandler` callback providing timing details for word pronunciation. 
    */
    let TextToSpeech_WordInfo: TextToSpeech.WordInfo
    
    /**
    * Allows generation of speech from a given text. You can use only one `TextToSpeechModule` in a Lens. However, its methods can be called multiple times in parallel if needed. 
    */
    let TextToSpeechModule: TextToSpeechModule
    
    /**
    * Represents a texture file asset.
    */
    let Texture: Texture
    
    /**
    * @private
    */
    let TextureFormat: TextureFormat
    
    /**
    * @private
    */
    let TextureMeshBuilder: TextureMeshBuilder
    
    /**
    * The base class for specialized Texture providers. Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider).
    */
    let TextureProvider: TextureProvider
    
    /**
    * @deprecated
    */
    let TextureStretchMode: TextureStretchMode
    
    /**
    * Defines the bounding area used for texture tiling with [TextFill's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#TextFill) `tileZone` property.
    */
    let TileZone: TileZone
    
    /**
    * This provider is returned by `global.touchSystem` and allows your lens to handle any touches on the screen, and optionally let certain touch types to pass through (let Snapchat handle the touch).
    
    * Possible TouchType exception values:
    
    * "TouchTypeNone"
    * "TouchTypeTouch"
    * "TouchTypeTap"
    * "TouchTypeDoubleTap"
    * "TouchTypeScale"
    * "TouchTypePan"
    * "TouchTypeSwipe"
    */
    let TouchDataProvider: TouchDataProvider
    
    /**
    * Triggered when a touch event ends.
    */
    let TouchEndEvent: TouchEndEvent
    
    let TouchEndEventArgs: TouchEndEventArgs
    
    /**
    * Triggered when a touch position on the screen is moved.
    */
    let TouchMoveEvent: TouchMoveEvent
    
    /**
    * @private
    */
    let TouchMoveEvent_UpdateLimit: TouchMoveEvent.UpdateLimit
    
    /**
    * Arguments used with the `InteractionComponent.onTouchMove` event.
    */
    let TouchMoveEventArgs: TouchMoveEventArgs
    
    /**
    * Triggered when a touch event starts.
    */
    let TouchStartEvent: TouchStartEvent
    
    /**
    * Arguments used with the `InteractionComponent.onTouchStart` event.
    */
    let TouchStartEventArgs: TouchStartEventArgs
    
    /**
    * @private
    */
    let Trace: Trace
    
    /**
    * Represents a mesh generated by world tracking. Only available when world mesh tracking is supported and enabled.
    */
    let TrackedMesh: TrackedMesh
    
    /**
    * Classifications of mesh face. See [TrackedMeshHitTestResult](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#TrackedMeshHitTestResult).
    */
    let TrackedMeshFaceClassification: TrackedMeshFaceClassification
    
    /**
    * Provides histogram information about tracked world mesh faces in a given area. Returned by `DeviceTracking.calculateWorldMeshHistogram()`.
    */
    let TrackedMeshHistogramResult: TrackedMeshHistogramResult
    
    /**
    * Provides information about a TrackedMesh surface hit during a raycast. Is returned in an array when calling `DeviceTracking.hitTestWorldMesh()` or `DeviceTracking.raycastWorldMesh()`.
    */
    let TrackedMeshHitTestResult: TrackedMeshHitTestResult
    
    /**
    * @unreleased
    */
    let TrackedObject: TrackedObject
    
    /**
    * A representation for plane detected by native tracking. Can be used with TrackedPoint.
    */
    let TrackedPlane: TrackedPlane
    
    /**
    * @unreleased
    */
    let TrackedPlaneHitTestResult: TrackedPlaneHitTestResult
    
    let TrackedPlaneOrientation: TrackedPlaneOrientation
    
    /**
    * A point on the real world not attached to any detected plane.
    */
    let TrackedPoint: TrackedPoint
    
    /**
    * Allows you to bind the position and rotation of an object with this component to a [TrackedPoint](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#TrackedPoint).
    */
    let TrackedPointComponent: TrackedPointComponent
    
    /**
    * @deprecated
    
    * @private
    */
    let TrackerMode: TrackerMode
    
    /**
    * @deprecated
    
    * @private
    */
    let TrackerType: TrackerType
    
    /**
    * @private
    */
    let TrackingMode: TrackingMode
    
    /**
    * @private
    */
    let TrackingScopeAsset: TrackingScopeAsset
    
    /**
    * @private
    */
    let TranscriptionErrorEventArgs: TranscriptionErrorEventArgs
    
    /**
    * @private
    */
    let TranscriptionUpdateEventArgs: TranscriptionUpdateEventArgs
    
    /**
    * Controls the position, rotation, and scale of a [SceneObject](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#SceneObject).  Every SceneObject automatically has a Transform attached.
    */
    let Transform: Transform
    
    /**
    * Applies additional transform processing on data for InputPlaceholders and OutputPlaceholders used with MLComponent.
    * For more information, see the [MLComponent Overview](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/machine-learning/ml-component/ml-component-overview).
    */
    let Transformer: Transformer
    
    /**
    * Builds Transformer objects for MLComponent.
    */
    let TransformerBuilder: TransformerBuilder
    
    /**
    * Rotation types used by TransformBuilder.
    */
    let TransformerRotation: TransformerRotation
    
    /**
    * Triangle hit information, available when a ray cast intersects a collision mesh.
    */
    let TriangleHit: TriangleHit
    
    /**
    * Gets called when the user triggers the primary input on their device. For example touch on touch screens.
    */
    let TriggerPrimaryEvent: TriggerPrimaryEvent
    
    /**
    * Arguments used with the `InteractionComponent.onTriggerPrimary` event.
    */
    let TriggerPrimaryEventArgs: TriggerPrimaryEventArgs
    
    /**
    * Triggered when the lens turns off.
    */
    let TurnOffEvent: TurnOffEvent
    
    /**
    * This event has been **deprecated**, please use the [OnStartEvent](https://lensstudio.snapchat.com/api/classes/OnStartEvent) instead.
    
    * Triggered when the lens turns on.
    
    
    * @deprecated
    */
    let TurnOnEvent: TurnOnEvent
    
    /**
    * Triggered every frame.
    */
    let UpdateEvent: UpdateEvent
    
    /**
    * @private
    */
    let UpperBodyRenderObjectProvider: UpperBodyRenderObjectProvider
    
    /**
    * @private
    */
    let UpperBodyTrackingAsset: UpperBodyTrackingAsset
    
    /**
    * @private
    */
    let UriRequestType: UriRequestType
    
    /**
    * @private
    */
    let UriSystem: UriSystem
    
    /**
    * Provides information about the user such as display name, birthday, and current weather. Accessible through `global.userContextSystem`.
    
    * All callbacks will execute as soon as the requested information is available. In some rare cases, the requested information may be completely unavailable, and the callback will never occur.
    
    * Note that formatted or localized strings may appear differently to users depending on their region.
    */
    let UserContextSystem: UserContextSystem
    
    /**
    * @private
    */
    let UserInfoSystem: UserInfoSystem
    
    /**
    * @private
    */
    let UserLocationInfo: UserLocationInfo
    
    /**
    * A two dimensional vector.
    * Vectors can only store finite numbers in the range Number.MIN_VALUE to Number.MAX_VALUE.
    
    */
    let vec2: vec2
    
    /**
    * Represents an animation track using vec2 value keyframes.
    
    * @deprecated
    */
    let Vec2AnimationTrack: Vec2AnimationTrack
    
    /**
    * Represents an animation track using vec2 value keyframes.
    
    * @deprecated
    */
    let Vec2AnimationTrackKeyFramed: Vec2AnimationTrackKeyFramed
    
    /**
    * A three dimensional vector. 
    * Vectors can only store finite numbers in the range Number.MIN_VALUE to Number.MAX_VALUE.
    
    */
    let vec3: vec3
    
    /**
    * @private
    */
    let Vec3AnimationPropertyTrack: Vec3AnimationPropertyTrack
    
    /**
    * Represents an animation track using vec3 value keyframes.
    
    * @deprecated
    */
    let Vec3AnimationTrack: Vec3AnimationTrack
    
    /**
    * Represents an animation track using vec3 value keyframes.
    
    * @deprecated
    */
    let Vec3AnimationTrackKeyFramed: Vec3AnimationTrackKeyFramed
    
    /**
    * Represents an animation track using vec3 animation tracks.
    
    * @deprecated
    */
    let Vec3AnimationTrackXYZ: Vec3AnimationTrackXYZ
    
    /**
    * A four dimensional vector.
    * Vectors can only store finite numbers in the range Number.MIN_VALUE to Number.MAX_VALUE.
    
    */
    let vec4: vec4
    
    /**
    * Represents an animation track using vec4 value keyframes.
    
    * @deprecated
    */
    let Vec4AnimationTrack: Vec4AnimationTrack
    
    /**
    * Represents an animation track using vec4 value keyframes.
    
    * @deprecated
    */
    let Vec4AnimationTrackKeyFramed: Vec4AnimationTrackKeyFramed
    
    /**
    * A vector containing 4 boolean values.
    */
    let vec4b: vec4b
    
    /**
    * Used to help control vertex animations on the SceneObject.
    */
    let VertexCache: VertexCache
    
    /**
    * Provides settings for vertex physics in the ClothVisual component.
    */
    let VertexSimulationSettings: VertexSimulationSettings
    
    /**
    * Used by the `verticalAlignment` property in [MeshVisual](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#MeshVisual).
    * When a [ScreenTransform](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#ScreenTransform) is attached to the same SceneObject, this determines how the mesh will be positioned vertically.
    */
    let VerticalAlignment: VerticalAlignment
    
    /**
    * Options for handling vertical text overflow. Used by [Text component's](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Text) `verticalOverflow` property.
    */
    let VerticalOverflow: VerticalOverflow
    
    /**
    * Defines a VFX to use with [VFX Component](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#VFXComponent). For more information, see the [VFX Guide](https://lensstudio.snapchat.com/lens-studio/references/guides/lens-features/graphics/particles/vfx-editor/introduction-and-concepts).
    */
    let VFXAsset: VFXAsset
    
    /**
    * A VFX visual used to show a [VFX Asset](https://lensstudio.snapchat.com/api/lens-studio/Classes/Assets#VFXAsset).
    */
    let VFXComponent: VFXComponent
    
    /**
    * @private
    */
    let VideoRecorderComponent: VideoRecorderComponent
    
    /**
    * Describes the current status of a [VideoTextureProvider](https://lensstudio.snapchat.com/api/lens-studio/Classes/Providers#VideoTextureProvider).
    */
    let VideoStatus: VideoStatus
    
    /**
    * Controls a video texture resource. Can be accessed through [Texture.control](https://lensstudio.snapchat.com/api/lens-studio/Classes/Components#Texture#control-textureprovider).
    */
    let VideoTextureProvider: VideoTextureProvider
    
    /**
    * Base class for all visual Components (e.g. MeshVisual).
    */
    let Visual: Visual
    
    let VoiceML: VoiceML
    
    /**
    * Additional parameters are used to provide additional data for NlpModels and NlpResponses. 
    */
    let VoiceML_AdditionalParam: VoiceML.AdditionalParam
    
    /**
    * NlpModels are used to provide the VoiceML NLP engine information about how the transcript of the input audio should be processed. BaseNlpModels is the abstract base class all NlpModels ([NlpKeywordModel](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpKeywordModel), [NlpIntentModel](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpIntentModel)) inherit from.
    
    * You can specify multiple NlpModels to process the same audio, all of their results will be returned in [ListeningUpdateEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLListeningUpdateEventArgs)
    */
    let VoiceML_BaseNlpModel: VoiceML.BaseNlpModel
    
    /**
    * The abstract base class all NlpResponses inherit from. NlpResponses are used as the result from the VoiceML NLP engine with information after processing the transcript of the input audio.
    */
    let VoiceML_BaseNlpResponse: VoiceML.BaseNlpResponse
    
    /**
    * An NLP model used to detect keywords in the transcript of the input audio.  For example, you can have keyword detection which will trigger every time the word "red" is said, and another trigger for the word "yellow". 
    */
    let VoiceML_KeywordModelGroup: VoiceML.KeywordModelGroup
    
    /**
    * ListeningErrorEventArgs object returns in onListeningError callback. It contains the error code and description of the error. 
    */
    let VoiceML_ListeningErrorEventArgs: VoiceML.ListeningErrorEventArgs
    
    /**
    * Provides the configuration for the audio input processing output. This can either include NLP processing using the ([nlpModels](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLBaseNlpModel)) or directly retrieving the transcription.  `speechContext` provides the ability to further improve the transcription accuracy given an assumed context. 
    */
    let VoiceML_ListeningOptions: VoiceML.ListeningOptions
    
    /**
    * The parameter when the callback registered on from `VoiceMLModule.onListeningUpdate` is called. This is to mark the input audio transcription (and possibly NlpModels as a result) was updated.
    */
    let VoiceML_ListeningUpdateEventArgs: VoiceML.ListeningUpdateEventArgs
    
    /**
    * May be returned when [enableSystemCommands()](https://lensstudio.snapchat.com/api/classes/VoiceMLModule#enableSystemCommands) API is used.
    * The NlpCommandResponse contains the results of the servers' NLP command model classification on the last sentence and indicates that a predetermined system command was detected.
    * Current supported commands:
    
    * “Take a Snap”: takes a snapshot.
    * “Start Recording”: starts a video recording if not already started.
    * "Stop Recording”: stops an ongoing video recording, if applicable.
    
    */
    let VoiceML_NlpCommandResponse: VoiceML.NlpCommandResponse
    
    /**
    * Specifies which NLP Intent model should run to classify the transcription of the input audio. NLP Intent classification meant to extract the meaning of a sentence rather than detecting certain keywords. Multiple intent models can be used on the same transcription, and will run only on complete sentences (`isFinalTranscription = True`). Supported intent models: `VOICE_ENABLED_UI`. 
    */
    let VoiceML_NlpIntentModel: VoiceML.NlpIntentModel
    
    /**
    * Returned when [NlpIntentModel](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpIntentModel) was specificed in the ListeningOptions, it contains the results of the NLP Intent model classification on the last sentence. `NlpIntentResponse` will only run on complete sentences (`isFinalTranscription = true`).  
    
    */
    let VoiceML_NlpIntentResponse: VoiceML.NlpIntentResponse
    
    /**
    * Contains helper functions for NlpIntentModel.
    */
    let VoiceML_NlpIntentsModelOptions: VoiceML.NlpIntentsModelOptions
    
    /**
    * Used to detect usage of certain keywords from the input audio.
    
    * Keyword detection (whose results will be returned in [NlpKeywordResponse](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLNlpKeywordResponse) in the [ListeningUpdateEventArgs](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#VoiceMLListeningUpdateEventArgs)) can happen in the mid input sentence (and in such case the the isFinalTranscription=false) or can happen at the end of the sentence (isFinalTranscription=true). Mid sentence detection have closer proximity to the time the word was spoken, but might be less accurate. 
    */
    let VoiceML_NlpKeywordModel: VoiceML.NlpKeywordModel
    
    /**
    * Contains helper functions for NlpKeywordModel.
    */
    let VoiceML_NlpKeywordModelOptions: VoiceML.NlpKeywordModelOptions
    
    /**
    * NlpKeywordResponse will be returned if KeywordModel has been supplied as an input model in the ListeningOptions.  The keyword model allows detection of keywords (or short phrases) in an input audio. 
    */
    let VoiceML_NlpKeywordResponse: VoiceML.NlpKeywordResponse
    
    /**
    * The NLP Response Status indicates wether the NLP was successful in parsing the sentence. 
    */
    let VoiceML_NlpResponseStatus: VoiceML.NlpResponseStatus
    
    /**
    * The `PostProcessingAction` is the base class for `QnaAction` and other post processing actions that need to processed after the transcription phase.
    */
    let VoiceML_PostProcessingAction: VoiceML.PostProcessingAction
    
    /**
    * The `PostProcessingActionResponse` is the base class for `QnaActionRespose` and other post processing actions responses. It holds the id and status properties for all deriving objects.
    */
    let VoiceML_PostProcessingActionResponse: VoiceML.PostProcessingActionResponse
    
    let VoiceML_PostProcessingActionResponseStatus: VoiceML.PostProcessingActionResponseStatus
    
    let VoiceML_QnaAction: VoiceML.QnaAction
    
    let VoiceML_QnaResponse: VoiceML.QnaResponse
    
    /**
    * Speech context is used in cases where specific words are expected from the users, the transcription accuracy of these words can be improved, by straightening their likelihood in context. The strength is scaled 1-10 (10 being the strongest increase) the default value is 5.
    */
    let VoiceML_SpeechContext: VoiceML.SpeechContext
    
    /**
    * @private
    */
    let VoiceML_TranscriptionOptions: VoiceML.TranscriptionOptions
    
    /**
    * VoiceML Module allows voice input and commands. It enables transciption of the speech, detecting keywords within the transcription, intents as well as system commands (such as "Take a Snap"). You can use one VoiceML Module per Lens. 
    */
    let VoiceMLModule: VoiceMLModule
    
    let VoiceMLModule_AnswerStatusCodes: VoiceMLModule.AnswerStatusCodes
    
    /**
    * Status Codes for NLP Responses. 
    */
    let VoiceMLModule_NlpResponsesStatusCodes: VoiceMLModule.NlpResponsesStatusCodes
    
    let VoiceMLModule_SpeechRecognizer: VoiceMLModule.SpeechRecognizer
    
    /**
    * @private
    */
    let Weather: Weather
    
    /**
    * Types of weather returned by [UserContextSystem's](https://lensstudio.snapchat.com/api/lens-studio/Classes/ScriptObjects#UserContextSystem) `requestWeatherCondition()` callback.
    */
    let WeatherCondition: WeatherCondition
    
    /**
    * @private
    */
    let WeatherSystem: WeatherSystem
    
    let WeightedMode: WeightedMode
    
    /**
    * Groups physics objects in its subtree into an independent world simulation.
    */
    let WorldComponent: WorldComponent
    
    /**
    * Holds settings for world mesh tracking in DeviceTracking component. Accessible through DeviceTracking.worldOptions.
    */
    let WorldOptions: WorldOptions
    
    /**
    * @deprecated
    
    * @experimental
    */
    let WorldQuery: WorldQuery
    
    /**
    * @wearableOnly
    */
    let WorldQueryHitTestResult: WorldQueryHitTestResult
    
    /**
    * @wearableOnly
    */
    let WorldQueryModule: WorldQueryModule
    
    /**
    * Provider for RenderMesh data representing the estimated shape of real world objects generated from depth information. Only available when world mesh tracking is supported and enabled.
    */
    let WorldRenderObjectProvider: WorldRenderObjectProvider
    
    /**
    * Provides information about whether certain world tracking features are supported by the device.
    */
    let WorldTrackingCapabilities: WorldTrackingCapabilities
    
    /**
    * Triggered when new world tracking meshes are detected. Only available when a Device Tracking component is in the scene, and world mesh tracking is supported and enabled.
    */
    let WorldTrackingMeshesAddedEvent: WorldTrackingMeshesAddedEvent
    
    /**
    * Triggered when some world tracking meshes are no longer detected. Only available when a Device Tracking component is in the scene, and world mesh tracking is supported and enabled.
    */
    let WorldTrackingMeshesRemovedEvent: WorldTrackingMeshesRemovedEvent
    
    /**
    * Triggered when world tracking meshes are updated. Only available when a Device Tracking component is in the scene, and world mesh tracking is supported and enabled.
    */
    let WorldTrackingMeshesUpdatedEvent: WorldTrackingMeshesUpdatedEvent
    
    /**
    * Triggered when the world tracking mode has changed.
    
    * @private
    */
    let WorldTrackingModeChangedEvent: WorldTrackingModeChangedEvent
    
    /**
    * Triggered when plane(s) are newly detected. The `worldOptions.nativePlaneTrackingType` must be set to anything other than `NativePlaneTrackingType.None`. In addition, [Device Tracking](https://lensstudio.snapchat.com/api/classes/devicetracking) component must be set to `World` mode to orient the Camera relative to the planes correctly.
    
    */
    let WorldTrackingPlanesAddedEvent: WorldTrackingPlanesAddedEvent
    
    /**
    * Triggered when plane(s) are no longer detected.  This usually happens when two planes merge into one.  Planes persist when no longer seen by camera(s) and when previously detected objects move (e.g. a door is opened) to create a static scene. [Device Tracking](https://lensstudio.snapchat.com/api/classes/devicetracking) component must be set to `World` mode to orient the Camera relative to the planes correctly.
    
    */
    let WorldTrackingPlanesRemovedEvent: WorldTrackingPlanesRemovedEvent
    
    /**
    * Triggered when currently detected plane(s) are updated.  This usually happens when a plane grows in size. The `worldOptions.nativePlaneTrackingType` must be set to anything other than `NativePlaneTrackingType.None`. In addition, [Device Tracking](https://lensstudio.snapchat.com/api/classes/devicetracking) component must be set to `World` mode to orient the Camera relative to the planes correctly.
    
    */
    let WorldTrackingPlanesUpdatedEvent: WorldTrackingPlanesUpdatedEvent
    
    let WorldUnderstandingModule: WorldUnderstandingModule
    
    /**
    * Describes how a texture should be sampled when using coordinates outside of the normal range.
    */
    let WrapMode: WrapMode
    
    /**
    * @private
    */
    let WritePermissions: WritePermissions
    
    let Zodiac: Zodiac
    
}

